{"version":3,"sources":["../src/index.js"],"names":["JSONDigger","constructor","datasource","idProp","childrenProp","ds","id","children","count","countNodes","obj","_this","Object","keys","length","forEach","child","findNodeById","Promise","resolve","reject","Error","callback","node","msg","matchConditions","conditions","flag","some","item","RegExp","test","subitem","findChildren","parent","findParent","err","findNodes","nodes","push","slice","findSiblings","filter","findAncestors","ancestors","validateParams","data","Array","every","addChildren","addSiblings","addRoot","assign","prop","updateNode","updateNodes","ids","removeNode","index","map","indexOf","splice","removeNodes","param","String","Number","p"],"mappings":"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","sourcesContent":["export default class JSONDigger {\n  constructor(datasource, idProp, childrenProp) {\n    this.ds = datasource;\n    this.id = idProp;\n    this.children = childrenProp;\n    this.count = 0;\n  }\n\n  countNodes (obj) {\n    var _this = this;\n    this.count++;\n    if (!obj || !Object.keys(obj).length) {\n      return false;\n    } else {\n      if (obj[this.children]) {\n        obj[this.children].forEach(child => {\n          _this.countNodes(child);\n        });\n      }\n    }\n  }\n\n  findNodeById (id) {\n    const _this = this;\n    this.countNodes(this.ds);\n    return new Promise((resolve, reject) => {\n      if (!id) {\n        return reject(new Error('Parameter id is invalid.'));\n      }\n      function findNodeById (obj, id, callback) {\n        if (!_this.count) {\n          return;\n        }\n        if (obj[_this.id] === id) {\n          _this.count = 0;\n          callback(null, obj);\n        } else {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback('The node doesn\\'t exist.', null);\n          }\n          _this.count--;\n          if (obj[_this.children]) {\n            obj[_this.children].forEach(node => {\n              findNodeById(node, id, callback);\n            });\n          }\n        }\n      }\n      findNodeById(this.ds, id, (msg, node) => {\n        if (msg) {\n          reject(new Error(msg));\n        } else {\n          resolve(node);\n        }\n      });\n    });\n  }\n\n  matchConditions (obj, conditions) {\n    var flag = true;\n    Object.keys(conditions).some(item => {\n      if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number' || typeof conditions[item] === 'boolean') {\n        if (obj[item] !== conditions[item]) {\n          flag = false;\n          return true;\n        }\n      } else if (conditions[item] instanceof RegExp) {\n        if (!conditions[item].test(obj[item])) {\n          flag = false;\n          return true;\n        }\n      } else if (typeof conditions[item] === 'object') {\n        Object.keys(conditions[item]).some(subitem => {\n          switch (subitem) {\n            case '>': {\n              if (!(obj[item] > conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '<': {\n              if (!(obj[item] < conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '>=': {\n              if (!(obj[item] >= conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '<=': {\n              if (!(obj[item] <= conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n            case '!==': {\n              if (!(obj[item] !== conditions[item][subitem])) {\n                flag = false;\n                return true;\n              }\n              break;\n            }\n          }\n        });\n        if (!flag) {\n          return false;\n        }\n      }\n    });\n\n    return flag;\n  }\n\n  async findChildren (id) {\n    const _this = this;\n    if (!id) {\n      throw new Error('Parameter id is invalid.');\n    }\n    try {\n      const parent = await this.findParent(id);\n      return parent[this.children];\n    } catch (err) {\n      throw new Error('The child nodes don\\'t exist.');\n    }\n  }\n\n  findNodes (conditions) {\n    const _this = this;\n    this.countNodes(this.ds);\n    return new Promise(async(resolve, reject) => {\n      if (!conditions || !Object.keys(conditions).length) {\n        return reject(new Error('Parameter conditions are invalid.'));\n      }\n      let nodes = [];\n      function findNodes(obj, conditions, callback) {\n        if (!_this.count) {\n          return;\n        }\n        if (_this.matchConditions(obj, conditions)) {\n          nodes.push(obj);\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n          }\n        } else {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n          }\n        }\n        _this.count--;\n        if (obj[_this.children]) {\n          obj[_this.children].forEach(child => {\n            findNodes(child, conditions, callback);\n          });\n        }\n      }\n      findNodes(this.ds, conditions, (msg, nodes) => {\n        if (msg) {\n          reject(new Error(msg));\n        } else {\n          resolve(nodes);\n        }\n      });\n    });\n  }\n\n  findParent (id) {\n    const _this = this;\n    this.countNodes(this.ds);\n    return new Promise((resolve, reject) => {\n      if (!id) {\n        return reject(new Error('Parameter id is invalid.'));\n      }\n      function findParent (obj, id, callback)  {\n        if (_this.count === 1) {\n          _this.count = 0;\n          callback('The parent node doesn\\'t exist.', null);\n        } else {\n          _this.count--;\n          if (typeof obj[_this.children] !== 'undefined') {\n            obj[_this.children].forEach(function(child) {\n              if (child[_this.id] === id) {\n                _this.count = 0;\n                callback(null, obj);\n              }\n            });\n            obj[_this.children].forEach(function(child) {\n              findParent(child, id, callback);\n            });\n          }\n        }\n      }\n      findParent(this.ds, id, (msg, parent) => {\n        if (msg) {\n          reject(new Error(msg));\n        } else {\n          resolve(parent);\n        }\n      });\n    });\n  }\n\n  async findSiblings (id) {\n    const _this = this;\n    if (!id) {\n      throw new Error('Parameter id is invalid.');\n    }\n    try {\n      const parent = await this.findParent(id);\n      return parent[this.children].filter(child => {\n        return child[_this.id] !== id;\n      });\n    } catch (err) {\n      throw new Error('The sibling nodes don\\'t exist.');\n    }\n  }\n\n  findAncestors (id) {\n    const _this = this;\n    return new Promise(async(resolve, reject) => {\n      if (!id) {\n        return reject(new Error('Parameter id is invalid.'));\n      }\n      let  nodes = [];\n      async function findAncestors (id) {\n        try {\n          if (id === _this.ds[_this.id]) {\n            if (!nodes.length) {\n              throw new Error('The ancestor nodes don\\'t exist.');\n            }\n            return nodes.slice(0);\n          } else {\n            const parent = await _this.findParent(id);\n            nodes.push(parent);\n            return findAncestors(parent[_this.id]);\n          }\n        } catch (err) {\n          throw new Error('The ancestor nodes don\\'t exist.');\n        }\n      }\n      try {\n        const ancestors = await findAncestors(id);\n        resolve(ancestors);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  // validate the input parameters id and data(could be oject or array)\n  validateParams(id, data) {\n    if (!id) {\n      throw new Error('Parameter id is invalid.');\n    }\n    if (!data\n      || (data.constructor !== Object && data.constructor !== Array)\n      || (data.constructor === Object && !Object.keys(data).length)\n      || (data.constructor === Array && !data.length)\n      || (data.constructor === Array && data.length && !data.every(item => item && item.constructor === Object && Object.keys(item).length))) {\n      throw new Error('Parameter data is invalid.');\n    }\n  }\n\n  async addChildren (id, data) {\n    this.validateParams(id, data);\n    try {\n      const parent = await this.findNodeById(id);\n      if (data.constructor === Object) {\n        if (parent[this.children]) {\n          parent[this.children].push(data);\n        } else {\n          parent[this.children] = [data];\n        }\n      } else {\n        if (parent[this.children]) {\n          parent[this.children].push(...data);\n        } else {\n          parent[this.children] = data;\n        }\n      }\n    } catch (err) {\n      throw new Error('Failed to add child nodes.');\n    }\n  }\n\n  async addSiblings (id, data) {\n    this.validateParams(id, data);\n    try {\n      const parent = await this.findParent(id);\n      if (data.constructor === Object) {\n        parent[this.children].push(data);\n      } else {\n        parent[this.children].push(...data);\n      }\n    } catch (err) {\n      throw new Error('Failed to add sibling nodes.');\n    }\n  }\n\n  addRoot (data) {\n    const _this = this;\n    if (!data || data.constructor !== Object || (data.constructor === Object && !Object.keys(data).length)) {\n      throw new Error('Parameter data is invalid.');\n    }\n    try {\n      this.ds[this.children] = [Object.assign({}, this.ds)];\n      delete data[this.children];\n      Object.keys(this.ds).filter(prop => prop !== this.children).forEach(prop => {\n        if (!data[prop]) {\n          delete this.ds[prop];\n        }\n      });\n      Object.assign(this.ds, data);\n    } catch (err) {\n      throw new Error('Failed to add root node.');\n    }\n  }\n\n  async updateNode (data) {\n    if (!data\n      || data.constructor !== Object\n      || (data.constructor === Object && !Object.keys(data).length)\n      || (data.constructor === Object && Object.keys(data).length && !data[this.id])) {\n      throw new Error('Parameter data is invalid.');\n    }\n    try {\n      const node = await this.findNodeById(data[this.id]);\n      Object.assign(node, data);\n    } catch (err) {\n      throw new Error('Failed to update node.');\n    }\n  }\n\n  async updateNodes (ids, data) {\n    const _this = this;\n    if (!ids\n      || (ids.constructor === Array && !ids.length)\n      || !data) {\n      throw new Error('Input parameter is invalid.');\n    }\n    try {\n      for (const id of ids) {\n        data[_this.id] = id; \n        await this.updateNode(data);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // remove single node based on id\n  async removeNode (id) {\n    const _this = this;\n    if (id === this.ds[this.id]) {\n      throw new Error('Input parameter is invalid.');\n    }\n    const parent = await this.findParent(id);\n    const index = parent[this.children].map(node => node[_this.id]).indexOf(id);\n    parent[this.children].splice(index, 1);\n    this.count = 0;\n  }\n\n  // param could be single id, id array or conditions object\n  async removeNodes (param) {\n    const _this = this;\n    if (!param\n      || (param.constructor === Array && !param.length)\n      || (param.constructor === Object && !Object.keys(param).length)) {\n      throw new Error('Input parameter is invalid.');\n    }\n    try {\n      // if passing in single id\n      if (param.constructor === String || param.constructor === Number) {\n        await this.removeNode(param);\n      } else if (param.constructor === Array) { // if passing in id array\n        for (const p of param) {\n          await this.removeNode(p);\n        }\n      } else { // if passing in conditions object\n        const nodes = await this.findNodes(param);\n        const ids = nodes.map(node => node[_this.id]);\n        for (const p of ids) {\n          await this.removeNode(p);\n        }\n      }\n    } catch (err) {\n      throw new Error('Failed to remove nodes.');\n    }\n  }\n\n};"],"file":"index.js"}