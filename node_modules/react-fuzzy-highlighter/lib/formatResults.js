"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatResults = void 0;
var set_value_1 = __importDefault(require("set-value"));
var strind_1 = __importDefault(require("strind"));
function formatResults(results) {
    var finalResults = [];
    results.forEach(function (result, index) {
        var _a;
        finalResults.push(__assign(__assign({}, result), { formatted: __assign({}, result.item) }));
        (_a = result.matches) === null || _a === void 0 ? void 0 : _a.forEach(function (_a) {
            var indices = _a.indices, key = _a.key, value = _a.value;
            if (!value || !key)
                return;
            var output = strind_1.default(value, __spreadArrays(indices), function (_a) {
                var text = _a.chars, matches = _a.matches;
                return ({
                    text: text,
                    isHighlighted: matches
                });
            });
            var formattedResult = output.matched;
            var formatted = finalResults[index].formatted;
            if (key.split('.').length > 1) {
                set_value_1.default(formatted, key, formattedResult);
            }
            else {
                formatted[key] = formattedResult;
            }
        });
    });
    return finalResults;
}
exports.formatResults = formatResults;
