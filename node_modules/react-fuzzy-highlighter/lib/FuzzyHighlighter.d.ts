import Fuse from 'fuse.js';
import * as React from 'react';
import { FinalResults } from './formatResults';
declare class FuzzyHighlighter<T, O> extends React.Component<IFuzzyHighlighterProps<T, O>, IFuzzyHighlighterState<T>> {
    readonly state: IFuzzyHighlighterState<T>;
    private fuse;
    componentDidMount(): void;
    componentDidUpdate(prevProps: IFuzzyHighlighterProps<T, O>): void;
    render(): {} | null | undefined;
    search(): void;
}
declare type Data<T> = ReadonlyArray<T>;
declare type Options<T> = Fuse.IFuseOptions<T>;
interface IFuzzyHighlighterProps<T, O> {
    query: string;
    data: Data<T>;
    options?: Options<T>;
    children?: (params: {
        results: ReadonlyArray<Fuse.FuseResult<T>>;
        formattedResults: FinalResults<T>;
        timing: number;
    }) => React.ReactNode;
}
export declare type Result<T> = Fuse.FuseResult<T>;
export declare type Results<T> = ReadonlyArray<Result<T>>;
interface IFuzzyHighlighterState<T> {
    results: Results<T>;
    cache: {
        [query: string]: ReadonlyArray<Fuse.FuseResult<T>>;
    };
    info: {
        timing: number;
    };
}
export default FuzzyHighlighter;
