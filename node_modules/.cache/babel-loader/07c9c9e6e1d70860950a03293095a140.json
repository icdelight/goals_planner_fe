{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Partitions a string based on character indices.\n *\n * @param {string} str - string to partition\n * @param {[number,number][]} indices - array of tuples to match [start, end] indices\n * @param {function} callback - callback function called with matching characters\n */\n\nfunction strind(str, indices, callback) {\n  var strs = str.split('');\n  var strsLen = strs.length;\n  var idx = Array.isArray(indices[0]) ? indices : [indices];\n  var partition = [];\n  var nonmatched = [];\n\n  function updateNonmatched(open, close, index) {\n    var chars = str.slice(open, close);\n\n    if (!chars.length) {\n      return;\n    }\n\n    nonmatched.push({\n      chars: chars,\n      index: index\n    });\n\n    if (callback) {\n      var cb = callback({\n        chars: chars,\n        matches: false\n      });\n      partition.push(cb);\n    }\n  }\n\n  for (var i = 0, len = idx.length; i < len; i++) {\n    var _a = idx[i],\n        start = _a[0],\n        end = _a[1];\n    var floor = start >= 0 ? start : 0;\n    var ceiling = end >= strsLen ? strsLen : end + 1;\n\n    if (i === 0 && start > 0) {\n      updateNonmatched(0, start, 0);\n    }\n\n    var chars = str.slice(floor, ceiling);\n\n    if (callback) {\n      var cb = callback({\n        chars: chars,\n        matches: true\n      });\n      partition.push(cb);\n    } else {\n      partition.push(chars);\n    }\n\n    if (end < strsLen) {\n      var open = end + 1;\n      var close = i < len - 1 ? idx[i + 1][0] : strsLen;\n      updateNonmatched(open, close, partition.length);\n    }\n\n    if (end >= strsLen) {\n      break;\n    }\n  }\n\n  return {\n    unmatched: nonmatched,\n    matched: partition\n  };\n}\n\nexports.default = strind;","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/goals_planner_fe/goals_planner_fe/node_modules/strind/lib/strind.js"],"names":["Object","defineProperty","exports","value","strind","str","indices","callback","strs","split","strsLen","length","idx","Array","isArray","partition","nonmatched","updateNonmatched","open","close","index","chars","slice","push","cb","matches","i","len","_a","start","end","floor","ceiling","unmatched","matched","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Partitions a string based on character indices.\n *\n * @param {string} str - string to partition\n * @param {[number,number][]} indices - array of tuples to match [start, end] indices\n * @param {function} callback - callback function called with matching characters\n */\nfunction strind(str, indices, callback) {\n    var strs = str.split('');\n    var strsLen = strs.length;\n    var idx = Array.isArray(indices[0]) ? indices : [indices];\n    var partition = [];\n    var nonmatched = [];\n    function updateNonmatched(open, close, index) {\n        var chars = str.slice(open, close);\n        if (!chars.length) {\n            return;\n        }\n        nonmatched.push({ chars: chars, index: index });\n        if (callback) {\n            var cb = callback({ chars: chars, matches: false });\n            partition.push(cb);\n        }\n    }\n    for (var i = 0, len = idx.length; i < len; i++) {\n        var _a = idx[i], start = _a[0], end = _a[1];\n        var floor = start >= 0 ? start : 0;\n        var ceiling = end >= strsLen ? strsLen : end + 1;\n        if (i === 0 && start > 0) {\n            updateNonmatched(0, start, 0);\n        }\n        var chars = str.slice(floor, ceiling);\n        if (callback) {\n            var cb = callback({ chars: chars, matches: true });\n            partition.push(cb);\n        }\n        else {\n            partition.push(chars);\n        }\n        if (end < strsLen) {\n            var open = end + 1;\n            var close = i < len - 1 ? idx[i + 1][0] : strsLen;\n            updateNonmatched(open, close, partition.length);\n        }\n        if (end >= strsLen) {\n            break;\n        }\n    }\n    return {\n        unmatched: nonmatched,\n        matched: partition\n    };\n}\nexports.default = strind;\n"]},"metadata":{},"sourceType":"script"}