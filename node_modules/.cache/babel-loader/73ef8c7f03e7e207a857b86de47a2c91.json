{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\nimport * as React from 'react';\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport useIntl from './useIntl';\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\n\nfunction selectUnit(seconds) {\n  var absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n\n  if (absValue < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n}\n\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    default:\n      return DAY;\n  }\n}\n\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n\n  switch (unit) {\n    case 'second':\n      return value;\n\n    case 'minute':\n      return value * MINUTE;\n\n    default:\n      return value * HOUR;\n  }\n}\n\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\n\nfunction canIncrement(unit) {\n  if (unit === void 0) {\n    unit = 'second';\n  }\n\n  return INCREMENTABLE_UNITS.includes(unit);\n}\n\nvar SimpleFormattedRelativeTime = function (props) {\n  var _a = useIntl(),\n      formatRelativeTime = _a.formatRelativeTime,\n      Text = _a.textComponent;\n\n  var children = props.children,\n      value = props.value,\n      unit = props.unit,\n      otherProps = __rest(props, [\"children\", \"value\", \"unit\"]);\n\n  var formattedRelativeTime = formatRelativeTime(value || 0, unit, otherProps);\n\n  if (typeof children === 'function') {\n    return children(formattedRelativeTime);\n  }\n\n  if (Text) {\n    return React.createElement(Text, null, formattedRelativeTime);\n  }\n\n  return React.createElement(React.Fragment, null, formattedRelativeTime);\n};\n\nvar FormattedRelativeTime = function (_a) {\n  var value = _a.value,\n      unit = _a.unit,\n      updateIntervalInSeconds = _a.updateIntervalInSeconds,\n      otherProps = __rest(_a, [\"value\", \"unit\", \"updateIntervalInSeconds\"]);\n\n  invariant(!updateIntervalInSeconds || !!(updateIntervalInSeconds && canIncrement(unit)), 'Cannot schedule update with unit longer than hour');\n\n  var _b = React.useState(),\n      prevUnit = _b[0],\n      setPrevUnit = _b[1];\n\n  var _c = React.useState(0),\n      prevValue = _c[0],\n      setPrevValue = _c[1];\n\n  var _d = React.useState(0),\n      currentValueInSeconds = _d[0],\n      setCurrentValueInSeconds = _d[1];\n\n  var updateTimer;\n\n  if (unit !== prevUnit || value !== prevValue) {\n    setPrevValue(value || 0);\n    setPrevUnit(unit);\n    setCurrentValueInSeconds(canIncrement(unit) ? valueToSeconds(value, unit) : 0);\n  }\n\n  React.useEffect(function () {\n    function clearUpdateTimer() {\n      clearTimeout(updateTimer);\n    }\n\n    clearUpdateTimer(); // If there's no interval and we cannot increment this unit, do nothing\n\n    if (!updateIntervalInSeconds || !canIncrement(unit)) {\n      return clearUpdateTimer;\n    } // Figure out the next interesting time\n\n\n    var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n    var nextUnit = selectUnit(nextValueInSeconds); // We've reached the max auto incrementable unit, don't schedule another update\n\n    if (nextUnit === 'day') {\n      return clearUpdateTimer;\n    }\n\n    var unitDuration = getDurationInSeconds(nextUnit);\n    var remainder = nextValueInSeconds % unitDuration;\n    var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n    var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n    var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n\n    if (currentValueInSeconds !== nextInterestingValueInSeconds) {\n      updateTimer = setTimeout(function () {\n        return setCurrentValueInSeconds(nextInterestingValueInSeconds);\n      }, delayInSeconds * 1e3);\n    }\n\n    return clearUpdateTimer;\n  }, [currentValueInSeconds, updateIntervalInSeconds, unit]);\n  var currentValue = value || 0;\n  var currentUnit = unit;\n\n  if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n    currentUnit = selectUnit(currentValueInSeconds);\n    var unitDuration = getDurationInSeconds(currentUnit);\n    currentValue = Math.round(currentValueInSeconds / unitDuration);\n  }\n\n  return React.createElement(SimpleFormattedRelativeTime, __assign({\n    value: currentValue,\n    unit: currentUnit\n  }, otherProps));\n};\n\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":null,"metadata":{},"sourceType":"module"}