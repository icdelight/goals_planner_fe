{"ast":null,"code":"import { __extends } from \"tslib\";\nexport var IntlErrorCode;\n\n(function (IntlErrorCode) {\n  IntlErrorCode[\"FORMAT_ERROR\"] = \"FORMAT_ERROR\";\n  IntlErrorCode[\"UNSUPPORTED_FORMATTER\"] = \"UNSUPPORTED_FORMATTER\";\n  IntlErrorCode[\"INVALID_CONFIG\"] = \"INVALID_CONFIG\";\n  IntlErrorCode[\"MISSING_DATA\"] = \"MISSING_DATA\";\n  IntlErrorCode[\"MISSING_TRANSLATION\"] = \"MISSING_TRANSLATION\";\n})(IntlErrorCode || (IntlErrorCode = {}));\n\nvar IntlError = function (_super) {\n  __extends(IntlError, _super);\n\n  function IntlError(code, message, exception) {\n    var _this = _super.call(this, \"[@formatjs/intl Error \" + code + \"] \" + message + \" \\n\" + (exception ? \"\\n\" + exception.message + \"\\n\" + exception.stack : '')) || this;\n\n    _this.code = code;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_this, IntlError);\n    }\n\n    return _this;\n  }\n\n  return IntlError;\n}(Error);\n\nexport { IntlError };\n\nvar UnsupportedFormatterError = function (_super) {\n  __extends(UnsupportedFormatterError, _super);\n\n  function UnsupportedFormatterError(message, exception) {\n    return _super.call(this, IntlErrorCode.UNSUPPORTED_FORMATTER, message, exception) || this;\n  }\n\n  return UnsupportedFormatterError;\n}(IntlError);\n\nexport { UnsupportedFormatterError };\n\nvar InvalidConfigError = function (_super) {\n  __extends(InvalidConfigError, _super);\n\n  function InvalidConfigError(message, exception) {\n    return _super.call(this, IntlErrorCode.INVALID_CONFIG, message, exception) || this;\n  }\n\n  return InvalidConfigError;\n}(IntlError);\n\nexport { InvalidConfigError };\n\nvar MissingDataError = function (_super) {\n  __extends(MissingDataError, _super);\n\n  function MissingDataError(message, exception) {\n    return _super.call(this, IntlErrorCode.MISSING_DATA, message, exception) || this;\n  }\n\n  return MissingDataError;\n}(IntlError);\n\nexport { MissingDataError };\n\nvar MessageFormatError = function (_super) {\n  __extends(MessageFormatError, _super);\n\n  function MessageFormatError(message, locale, descriptor, exception) {\n    var _this = _super.call(this, IntlErrorCode.FORMAT_ERROR, message + \" \\nLocale: \" + locale + \"\\nMessageID: \" + (descriptor === null || descriptor === void 0 ? void 0 : descriptor.id) + \"\\nDefault Message: \" + (descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage) + \"\\nDescription: \" + (descriptor === null || descriptor === void 0 ? void 0 : descriptor.description) + \" \\n\", exception) || this;\n\n    _this.descriptor = descriptor;\n    return _this;\n  }\n\n  return MessageFormatError;\n}(IntlError);\n\nexport { MessageFormatError };\n\nvar MissingTranslationError = function (_super) {\n  __extends(MissingTranslationError, _super);\n\n  function MissingTranslationError(descriptor, locale) {\n    var _this = _super.call(this, IntlErrorCode.MISSING_TRANSLATION, \"Missing message: \\\"\" + descriptor.id + \"\\\" for locale \\\"\" + locale + \"\\\", using \" + (descriptor.defaultMessage ? 'default message' : 'id') + \" as fallback.\") || this;\n\n    _this.descriptor = descriptor;\n    return _this;\n  }\n\n  return MissingTranslationError;\n}(IntlError);\n\nexport { MissingTranslationError };","map":null,"metadata":{},"sourceType":"module"}