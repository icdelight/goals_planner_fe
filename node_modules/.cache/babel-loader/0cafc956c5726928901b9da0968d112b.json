{"ast":null,"code":"var _jsxFileName = \"/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/views/TreeAdmin.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport SortableTree from \"react-sortable-tree\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport useCustomLayout from 'hooks/useCustomLayout';\nimport { MENU_PLACEMENT, LAYOUT } from 'constants.js';\n/* eslint-disable no-plusplus */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst alertNodeInfo = ({\n  node,\n  path,\n  treeIndex\n}) => {\n  console.log(node);\n  console.log(path);\n  console.log(treeIndex);\n  const objectString = Object.keys(node).map(k => k === \"children\" ? \"children: Array\" : `${k}: '${node[k]}'`).join(\",\\n   \");\n  alert(\"Info passed to the button generator:\\n\\n\" + `node: {\\n   ${objectString}\\n},\\n` + `path: [${path.join(\", \")}],\\n` + `treeIndex: ${treeIndex}`);\n};\n\nconst maxDepth = 3;\nconst title = 'Tree Admin Page';\nconst description = 'An page for configure the tree view.';\nconst breadcrumbs = [{\n  to: '',\n  text: 'Home'\n}];\nexport default class TreeAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNodeClick = node => {\n      this.setState({\n        nodeClicked: node\n      });\n    };\n\n    this.handleTreeOnChange = treeData => {\n      this.setState({\n        treeData\n      });\n    };\n\n    this.handleClickButton = () => {\n      const {\n        treeData\n      } = this.state;\n      const loopData = ''; // console.log(treeData.keys(\"children\"));\n      // treeData.forEach(\n      //     function(d) {\n      //         console.log(d);\n      //         if(d.expanded) {\n      //         }\n      //     }\n      // );\n\n      this.loopParseData(treeData, 0);\n    };\n\n    this.loopParseData = (data, parent) => {\n      let resJson = \"\";\n\n      if (data) {\n        data.forEach(function (d, idx, arr) {\n          if (d.expanded) {\n            // this.loopParseData(d);\n            console.log(`${d.title}, id : ${d.id}, parent : ${parent} Parent of : `);\n            resJson += `${d.title} Parent of : `;\n            this.loopParseData(d.children, d.id);\n          } else {\n            resJson += `${d.title}, id : ${d.id}, parent : ${parent}`;\n            console.log(`${d.title}, id : ${d.id}, parent : ${parent}`);\n          }\n        }.bind(this));\n      }\n    };\n\n    this.state = {\n      treeData: [{\n        id: 1,\n        title: \"Chicken\",\n        expanded: true,\n        parent: 0,\n        pic: \"\",\n        start_date: \"\",\n        end_date: \"\",\n        children: [{\n          id: 2,\n          title: \"Egg\",\n          parent: 1\n        }, {\n          id: 3,\n          title: \"Wings\",\n          parent: 1\n        }, {\n          id: 4,\n          title: \"Feet\",\n          parent: 1\n        }]\n      }],\n      nodeClicked: false\n    };\n  }\n\n  render() {\n    const {\n      treeData,\n      nodeClicked\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 500\n      },\n      children: [/*#__PURE__*/_jsxDEV(HtmlHead, {\n        title: title,\n        description: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"scroll-section\",\n            id: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"page-title-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"mb-0 pb-0 display-4\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(BreadcrumbList, {\n                items: breadcrumbs\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Card, {\n              className: \"mb-5\",\n              body: true,\n              children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                children: description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(SortableTree, {\n                treeData: treeData,\n                onChange: this.handleTreeOnChange,\n                isVirtualized: false,\n                maxDepth: maxDepth,\n                generateNodeProps: rowInfo => {\n                  const {\n                    node\n                  } = rowInfo;\n                  return {\n                    buttons: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      className: \"btn-xs btn-outline-success\",\n                      style: {\n                        verticalAlign: \"middle\"\n                      },\n                      onClick: () => alertNodeInfo(rowInfo),\n                      children: \"\\u2139\"\n                    }, node, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 41\n                    }, this)],\n                    onClick: () => {\n                      this.handleNodeClick(node);\n                    },\n                    style: node === nodeClicked ? {\n                      border: \"3px solid yellow\"\n                    } : {}\n                  };\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: this.handleClickButton,\n                children: \"Click Me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/views/TreeAdmin.js"],"names":["React","Component","render","SortableTree","Row","Col","Card","HtmlHead","BreadcrumbList","useCustomLayout","MENU_PLACEMENT","LAYOUT","alertNodeInfo","node","path","treeIndex","console","log","objectString","Object","keys","map","k","join","alert","maxDepth","title","description","breadcrumbs","to","text","TreeAdmin","constructor","props","handleNodeClick","setState","nodeClicked","handleTreeOnChange","treeData","handleClickButton","state","loopData","loopParseData","data","parent","resJson","forEach","d","idx","arr","expanded","id","children","bind","pic","start_date","end_date","height","rowInfo","buttons","verticalAlign","onClick","style","border"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport SortableTree from \"react-sortable-tree\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport useCustomLayout from 'hooks/useCustomLayout';\nimport { MENU_PLACEMENT, LAYOUT } from 'constants.js';\n/* eslint-disable no-plusplus */\nconst alertNodeInfo = ({ node, path, treeIndex }) => {\n    console.log(node);\n    console.log(path);\n    console.log(treeIndex);\n    const objectString = Object.keys(node)\n      .map((k) => (k === \"children\" ? \"children: Array\" : `${k}: '${node[k]}'`))\n      .join(\",\\n   \");\n  \n    alert(\n      \"Info passed to the button generator:\\n\\n\" +\n        `node: {\\n   ${objectString}\\n},\\n` +\n        `path: [${path.join(\", \")}],\\n` +\n        `treeIndex: ${treeIndex}`\n    );\n};\nconst maxDepth = 3;\nconst title = 'Tree Admin Page';\nconst description = 'An page for configure the tree view.';\n\nconst breadcrumbs = [{ to: '', text: 'Home' }];\n\nexport default class TreeAdmin extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        treeData: [\n          {\n            id: 1,\n            title: \"Chicken\",\n            expanded: true,\n            parent: 0,\n            pic: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            children: [{ id: 2, title: \"Egg\", parent: 1 }, { id: 3, title: \"Wings\", parent: 1 }, { id: 4,  title: \"Feet\", parent: 1 }]\n          }\n        ],\n        nodeClicked: false,\n      };\n    };\n\n    handleNodeClick = (node) => {\n        this.setState({\n            nodeClicked: node\n        });\n    };\n\n    handleTreeOnChange = (treeData) => {\n        this.setState({ treeData });\n    };\n\n    handleClickButton = () => {\n        const { treeData } = this.state;\n        const loopData = '';\n        // console.log(treeData.keys(\"children\"));\n        // treeData.forEach(\n        //     function(d) {\n        //         console.log(d);\n        //         if(d.expanded) {\n                    \n        //         }\n        //     }\n        // );\n        this.loopParseData(treeData,0);\n    }\n\n    loopParseData = (data,parent) => {\n        let resJson = \"\";\n        if(data) {\n            data.forEach(\n                function(d,idx,arr) {\n                    if(d.expanded) {\n                        // this.loopParseData(d);\n                        console.log(`${d.title}, id : ${d.id}, parent : ${parent} Parent of : `);\n                        resJson += `${d.title} Parent of : `;\n                        this.loopParseData(d.children,d.id);\n                    }else{\n                        resJson += `${d.title}, id : ${d.id}, parent : ${parent}`;\n                        console.log(`${d.title}, id : ${d.id}, parent : ${parent}`);\n                    }\n                }.bind(this)\n            );\n        }\n    }\n    \n    \n    render() {\n        \n        const { treeData, nodeClicked } = this.state;\n        return (\n            <div style={{ height: 500 }}>\n                <HtmlHead title={title} description={description} />\n                <Row>\n                    <Col>\n                        {/* Title Start */}\n                        <section className=\"scroll-section\" id=\"title\">\n                        <div className=\"page-title-container\">\n                            <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                            <BreadcrumbList items={breadcrumbs} />\n                        </div>\n                        <Card className=\"mb-5\" body>\n                            <Card.Text>{description}</Card.Text>\n                            <SortableTree\n                                treeData={treeData}\n                                onChange={this.handleTreeOnChange}\n                                isVirtualized= {false}\n                                maxDepth={maxDepth}\n                                generateNodeProps={(rowInfo) => {\n                                    const { node } = rowInfo;\n                                    return {\n                                        buttons: [\n                                        <button\n                                            type=\"button\"\n                                            key={node}\n                                            className=\"btn-xs btn-outline-success\"\n                                            style={{\n                                            verticalAlign: \"middle\"\n                                            }}\n                                            onClick={() => alertNodeInfo(rowInfo)}\n                                        >\n                                            ℹ\n                                        </button>\n                                        ],\n                                        onClick: () => {\n                                        this.handleNodeClick(node);\n                                        },\n                                        style:\n                                        node === nodeClicked\n                                            ? {\n                                                border: \"3px solid yellow\"\n                                            }\n                                            : {}\n                                    };\n                                }}\n                                />\n                                <button type=\"button\" onClick={this.handleClickButton}>\n                                    Click Me\n                                </button>\n                        </Card>\n                        </section>\n                    {/* Title End */}\n                    </Col>\n                </Row>\n                \n            </div>\n        );\n    }\n  }"]},"metadata":{},"sourceType":"module"}