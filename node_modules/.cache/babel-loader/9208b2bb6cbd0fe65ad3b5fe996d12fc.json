{"ast":null,"code":"// import redux and persist plugins\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { persistReducer } from 'reduxjs-toolkit-persist';\nimport storage from 'reduxjs-toolkit-persist/lib/storage';\nimport persistStore from 'reduxjs-toolkit-persist/es/persistStore';\nimport { FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE } from 'reduxjs-toolkit-persist/es/constants'; // import theme reducers\n\nimport settingsReducer from 'settings/settingsSlice';\nimport layoutReducer from 'layout/layoutSlice';\nimport langReducer from 'lang/langSlice';\nimport authReducer from 'auth/authSlice';\nimport menuReducer from 'layout/nav/main-menu/menuSlice';\nimport notificationReducer from 'layout/nav/notifications/notificationSlice';\nimport scrollspyReducer from 'components/scrollspy/scrollspySlice'; // import persist key\n\nimport { REDUX_PERSIST_KEY } from 'config.js';\nconst persistConfig = {\n  key: REDUX_PERSIST_KEY,\n  storage,\n  whitelist: ['menu', 'settings', 'lang']\n};\nconst persistedReducer = persistReducer(persistConfig, combineReducers({\n  settings: settingsReducer,\n  layout: layoutReducer,\n  lang: langReducer,\n  auth: authReducer,\n  menu: menuReducer,\n  notification: notificationReducer,\n  scrollspy: scrollspyReducer\n}));\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nconst persistedStore = persistStore(store);\nexport { store, persistedStore };","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/goals_planner_fe/goals_planner_fe/src/store.js"],"names":["combineReducers","configureStore","persistReducer","storage","persistStore","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","REHYDRATE","settingsReducer","layoutReducer","langReducer","authReducer","menuReducer","notificationReducer","scrollspyReducer","REDUX_PERSIST_KEY","persistConfig","key","whitelist","persistedReducer","settings","layout","lang","auth","menu","notification","scrollspy","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistedStore"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,QAAvC,EAAiDC,SAAjD,QAAkE,sCAAlE,C,CAEA;;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,OAAOC,gBAAP,MAA6B,qCAA7B,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAEF,iBADe;AAEpBf,EAAAA,OAFoB;AAGpBkB,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,MAArB;AAHS,CAAtB;AAMA,MAAMC,gBAAgB,GAAGpB,cAAc,CACrCiB,aADqC,EAErCnB,eAAe,CAAC;AACduB,EAAAA,QAAQ,EAAEZ,eADI;AAEda,EAAAA,MAAM,EAAEZ,aAFM;AAGda,EAAAA,IAAI,EAAEZ,WAHQ;AAIda,EAAAA,IAAI,EAAEZ,WAJQ;AAKda,EAAAA,IAAI,EAAEZ,WALQ;AAMda,EAAAA,YAAY,EAAEZ,mBANA;AAOda,EAAAA,SAAS,EAAEZ;AAPG,CAAD,CAFsB,CAAvC;AAYA,MAAMa,KAAK,GAAG7B,cAAc,CAAC;AAC3B8B,EAAAA,OAAO,EAAET,gBADkB;AAE3BU,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAE,CAAC9B,KAAD,EAAQK,SAAR,EAAmBJ,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,QAA1C;AADC;AADA,GAAD;AAHK,CAAD,CAA5B;AASA,MAAM2B,cAAc,GAAGhC,YAAY,CAAC0B,KAAD,CAAnC;AACA,SAASA,KAAT,EAAgBM,cAAhB","sourcesContent":["// import redux and persist plugins\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { persistReducer } from 'reduxjs-toolkit-persist';\nimport storage from 'reduxjs-toolkit-persist/lib/storage';\nimport persistStore from 'reduxjs-toolkit-persist/es/persistStore';\nimport { FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE } from 'reduxjs-toolkit-persist/es/constants';\n\n// import theme reducers\nimport settingsReducer from 'settings/settingsSlice';\nimport layoutReducer from 'layout/layoutSlice';\nimport langReducer from 'lang/langSlice';\nimport authReducer from 'auth/authSlice';\nimport menuReducer from 'layout/nav/main-menu/menuSlice';\nimport notificationReducer from 'layout/nav/notifications/notificationSlice';\nimport scrollspyReducer from 'components/scrollspy/scrollspySlice';\n\n// import persist key\nimport { REDUX_PERSIST_KEY } from 'config.js';\n\nconst persistConfig = {\n  key: REDUX_PERSIST_KEY,\n  storage,\n  whitelist: ['menu', 'settings', 'lang'],\n};\n\nconst persistedReducer = persistReducer(\n  persistConfig,\n  combineReducers({\n    settings: settingsReducer,\n    layout: layoutReducer,\n    lang: langReducer,\n    auth: authReducer,\n    menu: menuReducer,\n    notification: notificationReducer,\n    scrollspy: scrollspyReducer,\n  })\n);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\nconst persistedStore = persistStore(store);\nexport { store, persistedStore };\n"]},"metadata":{},"sourceType":"module"}