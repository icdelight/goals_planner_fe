{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Partitions a string based on character indices.\n *\n * @param {string} str - string to partition\n * @param {[number,number][]} indices - array of tuples to match [start, end] indices\n * @param {function} callback - callback function called with matching characters\n */\n\nfunction strind(str, indices, callback) {\n  var strs = str.split('');\n  var strsLen = strs.length;\n  var idx = Array.isArray(indices[0]) ? indices : [indices];\n  var partition = [];\n  var nonmatched = [];\n\n  function updateNonmatched(open, close, index) {\n    var chars = str.slice(open, close);\n\n    if (!chars.length) {\n      return;\n    }\n\n    nonmatched.push({\n      chars: chars,\n      index: index\n    });\n\n    if (callback) {\n      var cb = callback({\n        chars: chars,\n        matches: false\n      });\n      partition.push(cb);\n    }\n  }\n\n  for (var i = 0, len = idx.length; i < len; i++) {\n    var _a = idx[i],\n        start = _a[0],\n        end = _a[1];\n    var floor = start >= 0 ? start : 0;\n    var ceiling = end >= strsLen ? strsLen : end + 1;\n\n    if (i === 0 && start > 0) {\n      updateNonmatched(0, start, 0);\n    }\n\n    var chars = str.slice(floor, ceiling);\n\n    if (callback) {\n      var cb = callback({\n        chars: chars,\n        matches: true\n      });\n      partition.push(cb);\n    } else {\n      partition.push(chars);\n    }\n\n    if (end < strsLen) {\n      var open = end + 1;\n      var close = i < len - 1 ? idx[i + 1][0] : strsLen;\n      updateNonmatched(open, close, partition.length);\n    }\n\n    if (end >= strsLen) {\n      break;\n    }\n  }\n\n  return {\n    unmatched: nonmatched,\n    matched: partition\n  };\n}\n\nexports.default = strind;","map":null,"metadata":{},"sourceType":"script"}