{"ast":null,"code":"var _jsxFileName = \"/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/views/TreeViewMap.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TreeAdmin extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      currentUser,\n      isLogin\n    } = useSelector(state => state.auth);\n    this.state = {\n      treeData: [{\n        id: 1,\n        title: \"Chicken\",\n        expanded: true,\n        parent: 0,\n        children: [{\n          id: 2,\n          title: \"Egg\",\n          parent: 1\n        }, {\n          id: 3,\n          title: \"Wings\",\n          parent: 1\n        }, {\n          id: 4,\n          title: \"Feet\",\n          parent: 1\n        }]\n      }],\n      goals: null\n    };\n  }\n\n  componentDidMount() {\n    const Signups = TreeView(currentUser.token).then(function (response) {\n      if (response) {\n        if (response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n          }); // getGoals(response.responseData);\n\n          goals => this.setState({\n            goals: response.responseData\n          });\n        } else {\n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App2\",\n      children: [/*#__PURE__*/_jsxDEV(HtmlHead, {\n        title: title,\n        description: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"scroll-section\",\n            id: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"page-title-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"mb-0 pb-0 display-4\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(BreadcrumbList, {\n                items: breadcrumbs\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EmptyDiv\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(OrganizationChart, {\n              datasource: goals,\n              chartClass: \"myChart\",\n              NodeTemplate: MyNode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleClick,\n            children: \"Click Me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/views/TreeViewMap.js"],"names":["React","useEffect","useState","useSelector","TreeAdmin","Component","constructor","props","currentUser","isLogin","state","auth","treeData","id","title","expanded","parent","children","goals","componentDidMount","Signups","TreeView","token","then","response","responseCode","toast","success","responseDesc","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setState","responseData","error","render","description","breadcrumbs","MyNode","handleClick"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from 'react-redux';\n\nexport default class TreeAdmin extends Component {\n    \n    constructor(props) {\n        super(props);\n        const { currentUser, isLogin } = useSelector((state) => state.auth);\n\n        this.state = {\n          treeData: [\n            {\n              id: 1,\n              title: \"Chicken\",\n              expanded: true,\n              parent: 0,\n              children: [{ id: 2, title: \"Egg\", parent: 1 }, { id: 3, title: \"Wings\", parent: 1 }, { id: 4,  title: \"Feet\", parent: 1 }]\n            }\n          ],\n          goals: null,\n        };\n    };\n\n    componentDidMount() {\n        const Signups  =  TreeView(currentUser.token).then(function(response) {\n            if(response) {\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                  hideProgressBar: false,\n                  closeOnClick: true,\n                  pauseOnHover: true,\n                  draggable: true,\n                  progress: undefined,\n                });\n                // getGoals(response.responseData);\n                goals => this.setState({goals: response.responseData})\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                  hideProgressBar: false,\n                  closeOnClick: true,\n                  pauseOnHover: true,\n                  draggable: true,\n                  progress: undefined,\n                });\n              }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App2\">\n                <HtmlHead title={title} description={description} />\n                <Row>\n                    <Col>\n                        {/* Title Start */}\n                        <section className=\"scroll-section\" id=\"title\">\n                        <div className=\"page-title-container\">\n                            <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                            <BreadcrumbList items={breadcrumbs} />\n                        </div>\n                        {/* <Card className=\"mb-5\" body>\n                            <Card.Text>{description}</Card.Text> */}\n                            <div className=\"EmptyDiv\"> </div>\n                            <OrganizationChart\n                                datasource={goals}\n                                chartClass=\"myChart\"\n                                NodeTemplate={MyNode}\n                            />\n                            {/* </Card> */}\n                        </section>\n                    {/* Title End */}\n                    <button type=\"button\" onClick={handleClick}>\n                        Click Me\n                    </button>\n                    </Col>\n                </Row>\n            </div>\n          \n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}