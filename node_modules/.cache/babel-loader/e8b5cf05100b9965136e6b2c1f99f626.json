{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useWindowScroll = () => {\n  _s();\n\n  const [scrolled, setScrolled] = useState(false);\n  const offset = 80;\n  let windowScrolled = false;\n  let prevScrollPos = window.pageYOffset;\n\n  const handleLoad = () => {\n    prevScrollPos = window.pageYOffset;\n  };\n\n  const handleScroll = () => {\n    windowScrolled = true;\n  }; // Horizontal menu hiding and showing based on menu behaviour and scroll position\n\n\n  const onWindowScrollInterval = () => {\n    if (windowScrolled) {\n      const currentScrollPos = window.pageYOffset;\n      windowScrolled = false;\n\n      if (Math.abs(prevScrollPos - currentScrollPos) <= offset && currentScrollPos > offset) {\n        prevScrollPos = currentScrollPos;\n        return;\n      }\n\n      if (prevScrollPos > currentScrollPos || currentScrollPos <= offset) {\n        setScrolled(false);\n      } else if (prevScrollPos <= currentScrollPos && currentScrollPos > offset) {\n        setScrolled(true);\n      }\n\n      prevScrollPos = currentScrollPos;\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(onWindowScrollInterval, 200);\n    window.addEventListener('load', handleLoad);\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      clearInterval(intervalId);\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('load', handleLoad);\n    }; // eslint-disable-next-line\n  }, []);\n  return scrolled;\n};\n\n_s(useWindowScroll, \"tQtW9FyKD+Ut/6k+f0BCbABprL4=\");","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/goals_planner_fe/goals_planner_fe/src/hooks/useWindowScroll.js"],"names":["useState","useEffect","useWindowScroll","scrolled","setScrolled","offset","windowScrolled","prevScrollPos","window","pageYOffset","handleLoad","handleScroll","onWindowScrollInterval","currentScrollPos","Math","abs","intervalId","setInterval","addEventListener","clearInterval","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACnC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMK,MAAM,GAAG,EAAf;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,aAAa,GAAGC,MAAM,CAACC,WAA3B;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvBH,IAAAA,aAAa,GAAGC,MAAM,CAACC,WAAvB;AACD,GAFD;;AAGA,QAAME,YAAY,GAAG,MAAM;AACzBL,IAAAA,cAAc,GAAG,IAAjB;AACD,GAFD,CATmC,CAYnC;;;AACA,QAAMM,sBAAsB,GAAG,MAAM;AACnC,QAAIN,cAAJ,EAAoB;AAClB,YAAMO,gBAAgB,GAAGL,MAAM,CAACC,WAAhC;AACAH,MAAAA,cAAc,GAAG,KAAjB;;AAEA,UAAIQ,IAAI,CAACC,GAAL,CAASR,aAAa,GAAGM,gBAAzB,KAA8CR,MAA9C,IAAwDQ,gBAAgB,GAAGR,MAA/E,EAAuF;AACrFE,QAAAA,aAAa,GAAGM,gBAAhB;AACA;AACD;;AAED,UAAIN,aAAa,GAAGM,gBAAhB,IAAoCA,gBAAgB,IAAIR,MAA5D,EAAoE;AAClED,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD,OAFD,MAEO,IAAIG,aAAa,IAAIM,gBAAjB,IAAqCA,gBAAgB,GAAGR,MAA5D,EAAoE;AACzED,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACDG,MAAAA,aAAa,GAAGM,gBAAhB;AACD;AACF,GAjBD;;AAkBAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,UAAU,GAAGC,WAAW,CAACL,sBAAD,EAAyB,GAAzB,CAA9B;AAEAJ,IAAAA,MAAM,CAACU,gBAAP,CAAwB,MAAxB,EAAgCR,UAAhC;AACAF,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AAEA,WAAO,MAAM;AACXQ,MAAAA,aAAa,CAACH,UAAD,CAAb;AACAR,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCT,YAArC;AACAH,MAAAA,MAAM,CAACY,mBAAP,CAA2B,MAA3B,EAAmCV,UAAnC;AACD,KAJD,CANc,CAWd;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAOP,QAAP;AACD,CA9CM;;GAAMD,e","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useWindowScroll = () => {\n  const [scrolled, setScrolled] = useState(false);\n  const offset = 80;\n  let windowScrolled = false;\n  let prevScrollPos = window.pageYOffset;\n\n  const handleLoad = () => {\n    prevScrollPos = window.pageYOffset;\n  };\n  const handleScroll = () => {\n    windowScrolled = true;\n  };\n  // Horizontal menu hiding and showing based on menu behaviour and scroll position\n  const onWindowScrollInterval = () => {\n    if (windowScrolled) {\n      const currentScrollPos = window.pageYOffset;\n      windowScrolled = false;\n\n      if (Math.abs(prevScrollPos - currentScrollPos) <= offset && currentScrollPos > offset) {\n        prevScrollPos = currentScrollPos;\n        return;\n      }\n\n      if (prevScrollPos > currentScrollPos || currentScrollPos <= offset) {\n        setScrolled(false);\n      } else if (prevScrollPos <= currentScrollPos && currentScrollPos > offset) {\n        setScrolled(true);\n      }\n      prevScrollPos = currentScrollPos;\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(onWindowScrollInterval, 200);\n\n    window.addEventListener('load', handleLoad);\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      clearInterval(intervalId);\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('load', handleLoad);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return scrolled;\n};\n"]},"metadata":{},"sourceType":"module"}