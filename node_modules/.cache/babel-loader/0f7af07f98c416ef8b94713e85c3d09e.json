{"ast":null,"code":"var _jsxFileName = \"/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/layout/nav/notifications/Notifications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\nimport { MENU_PLACEMENT } from 'constants.js';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { layoutShowingNavMenu } from 'layout/layoutSlice';\nimport { fetchNotifications } from './notificationSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NotificationsDropdownToggle = /*#__PURE__*/React.memo(_c2 = /*#__PURE__*/React.forwardRef(_c = ({\n  onClick,\n  expanded = false\n}, ref) => /*#__PURE__*/_jsxDEV(\"a\", {\n  ref: ref,\n  href: \"#/\",\n  className: \"notification-button\",\n  \"data-toggle\": \"dropdown\",\n  \"aria-expanded\": expanded,\n  onClick: e => {\n    e.preventDefault();\n    e.stopPropagation();\n    onClick(e);\n  },\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"position-relative d-inline-flex\",\n    children: [/*#__PURE__*/_jsxDEV(CsLineIcons, {\n      icon: \"bell\",\n      size: \"18\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"position-absolute notification-dot rounded-xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 5\n}, this)));\n_c3 = NotificationsDropdownToggle;\n\nconst NotificationItem = ({\n  img = '',\n  link = '',\n  detail = ''\n}) => /*#__PURE__*/_jsxDEV(\"li\", {\n  className: \"mb-3 pb-3 border-bottom border-separator-light d-flex\",\n  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n    src: img,\n    className: \"me-3 sw-4 sh-4 rounded-xl align-self-center\",\n    alt: \"notification\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"align-self-center\",\n    children: /*#__PURE__*/_jsxDEV(NavLink, {\n      to: link,\n      activeClassName: \"\",\n      children: detail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 34,\n  columnNumber: 3\n}, this);\n\n_c4 = NotificationItem;\nconst NotificationsDropdownMenu = /*#__PURE__*/React.memo(_c6 = /*#__PURE__*/React.forwardRef(_c5 = ({\n  style,\n  className,\n  labeledBy,\n  items\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: style,\n    className: classNames('wide notification-dropdown scroll-out', className),\n    \"aria-labelledby\": labeledBy,\n    children: /*#__PURE__*/_jsxDEV(OverlayScrollbarsComponent, {\n      options: {\n        scrollbars: {\n          autoHide: 'leave',\n          autoHideDelay: 600\n        },\n        overflowBehavior: {\n          x: 'hidden',\n          y: 'scroll'\n        }\n      },\n      className: \"scroll\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-unstyled border-last-none\",\n        children: items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(NotificationItem, {\n          detail: item.detail,\n          link: item.link,\n          img: item.img\n        }, `notificationItem.${itemIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}));\n_c7 = NotificationsDropdownMenu;\nNotificationsDropdownMenu.displayName = 'NotificationsDropdownMenu';\nconst MENU_NAME = 'Notifications';\n\nconst Notifications = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    placementStatus: {\n      view: placement\n    },\n    behaviourStatus: {\n      behaviourHtmlData\n    },\n    attrMobile,\n    attrMenuAnimate\n  } = useSelector(state => state.menu);\n  const {\n    color\n  } = useSelector(state => state.settings);\n  const {\n    items\n  } = useSelector(state => state.notification);\n  const {\n    showingNavMenu\n  } = useSelector(state => state.layout);\n  useEffect(() => {\n    dispatch(fetchNotifications());\n    return () => {}; // eslint-disable-next-line\n  }, []);\n\n  const onToggle = (status, event) => {\n    if (event && event.stopPropagation) event.stopPropagation();else if (event && event.originalEvent && event.originalEvent.stopPropagation) event.originalEvent.stopPropagation();\n    dispatch(layoutShowingNavMenu(status ? MENU_NAME : ''));\n  };\n\n  useEffect(() => {\n    dispatch(layoutShowingNavMenu('')); // eslint-disable-next-line\n  }, [attrMenuAnimate, behaviourHtmlData, attrMobile, color]);\n\n  if (items && items.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Dropdown, {\n      as: \"li\",\n      bsPrefix: \"list-inline-item\",\n      onToggle: onToggle,\n      show: showingNavMenu === MENU_NAME,\n      align: placement === MENU_PLACEMENT.Horizontal ? 'end' : 'start',\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n        as: NotificationsDropdownToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n        as: NotificationsDropdownMenu,\n        items: items,\n        popperConfig: {\n          modifiers: [{\n            name: 'offset',\n            options: {\n              offset: () => {\n                if (placement === MENU_PLACEMENT.Horizontal) {\n                  return [0, 7];\n                }\n\n                if (window.innerWidth < 768) {\n                  return [-168, 7];\n                }\n\n                return [-162, 7];\n              }\n            }\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Notifications, \"y8YbtY4XFROw2HBdHxmZSgvA4Gk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c8 = Notifications;\nexport default _c9 = /*#__PURE__*/React.memo(Notifications);\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"NotificationsDropdownToggle$React.memo$React.forwardRef\");\n$RefreshReg$(_c2, \"NotificationsDropdownToggle$React.memo\");\n$RefreshReg$(_c3, \"NotificationsDropdownToggle\");\n$RefreshReg$(_c4, \"NotificationItem\");\n$RefreshReg$(_c5, \"NotificationsDropdownMenu$React.memo$React.forwardRef\");\n$RefreshReg$(_c6, \"NotificationsDropdownMenu$React.memo\");\n$RefreshReg$(_c7, \"NotificationsDropdownMenu\");\n$RefreshReg$(_c8, \"Notifications\");\n$RefreshReg$(_c9, \"%default%\");","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/layout/nav/notifications/Notifications.js"],"names":["React","useEffect","useDispatch","useSelector","NavLink","Dropdown","classNames","OverlayScrollbarsComponent","MENU_PLACEMENT","CsLineIcons","layoutShowingNavMenu","fetchNotifications","NotificationsDropdownToggle","memo","forwardRef","onClick","expanded","ref","e","preventDefault","stopPropagation","NotificationItem","img","link","detail","NotificationsDropdownMenu","style","className","labeledBy","items","scrollbars","autoHide","autoHideDelay","overflowBehavior","x","y","map","item","itemIndex","displayName","MENU_NAME","Notifications","dispatch","placementStatus","view","placement","behaviourStatus","behaviourHtmlData","attrMobile","attrMenuAnimate","state","menu","color","settings","notification","showingNavMenu","layout","onToggle","status","event","originalEvent","length","Horizontal","modifiers","name","options","offset","window","innerWidth"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\nimport { MENU_PLACEMENT } from 'constants.js';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { layoutShowingNavMenu } from 'layout/layoutSlice';\nimport { fetchNotifications } from './notificationSlice';\n\nconst NotificationsDropdownToggle = React.memo(\n  React.forwardRef(({ onClick, expanded = false }, ref) => (\n    <a\n      ref={ref}\n      href=\"#/\"\n      className=\"notification-button\"\n      data-toggle=\"dropdown\"\n      aria-expanded={expanded}\n      onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(e);\n      }}\n    >\n      <div className=\"position-relative d-inline-flex\">\n        <CsLineIcons icon=\"bell\" size=\"18\" />\n        <span className=\"position-absolute notification-dot rounded-xl\" />\n      </div>\n    </a>\n  ))\n);\nconst NotificationItem = ({ img = '', link = '', detail = '' }) => (\n  <li className=\"mb-3 pb-3 border-bottom border-separator-light d-flex\">\n    <img src={img} className=\"me-3 sw-4 sh-4 rounded-xl align-self-center\" alt=\"notification\" />\n    <div className=\"align-self-center\">\n      <NavLink to={link} activeClassName=\"\">\n        {detail}\n      </NavLink>\n    </div>\n  </li>\n);\n\nconst NotificationsDropdownMenu = React.memo(\n  React.forwardRef(({ style, className, labeledBy, items }, ref) => {\n    return (\n      <div ref={ref} style={style} className={classNames('wide notification-dropdown scroll-out', className)} aria-labelledby={labeledBy}>\n        <OverlayScrollbarsComponent\n          options={{\n            scrollbars: { autoHide: 'leave', autoHideDelay: 600 },\n            overflowBehavior: { x: 'hidden', y: 'scroll' },\n          }}\n          className=\"scroll\"\n        >\n          <ul className=\"list-unstyled border-last-none\">\n            {items.map((item, itemIndex) => (\n              <NotificationItem key={`notificationItem.${itemIndex}`} detail={item.detail} link={item.link} img={item.img} />\n            ))}\n          </ul>\n        </OverlayScrollbarsComponent>\n      </div>\n    );\n  })\n);\nNotificationsDropdownMenu.displayName = 'NotificationsDropdownMenu';\n\nconst MENU_NAME = 'Notifications';\nconst Notifications = () => {\n  const dispatch = useDispatch();\n\n  const {\n    placementStatus: { view: placement },\n    behaviourStatus: { behaviourHtmlData },\n    attrMobile,\n    attrMenuAnimate,\n  } = useSelector((state) => state.menu);\n  const { color } = useSelector((state) => state.settings);\n  const { items } = useSelector((state) => state.notification);\n  const { showingNavMenu } = useSelector((state) => state.layout);\n\n  useEffect(() => {\n    dispatch(fetchNotifications());\n    return () => {};\n    // eslint-disable-next-line\n  }, []);\n\n  const onToggle = (status, event) => {\n    if (event && event.stopPropagation) event.stopPropagation();\n    else if (event && event.originalEvent && event.originalEvent.stopPropagation) event.originalEvent.stopPropagation();\n    dispatch(layoutShowingNavMenu(status ? MENU_NAME : ''));\n  };\n\n  useEffect(() => {\n    dispatch(layoutShowingNavMenu(''));\n    // eslint-disable-next-line\n  }, [attrMenuAnimate, behaviourHtmlData, attrMobile, color]);\n\n  if (items && items.length > 0) {\n    return (\n      <Dropdown\n        as=\"li\"\n        bsPrefix=\"list-inline-item\"\n        onToggle={onToggle}\n        show={showingNavMenu === MENU_NAME}\n        align={placement === MENU_PLACEMENT.Horizontal ? 'end' : 'start'}\n      >\n        <Dropdown.Toggle as={NotificationsDropdownToggle} />\n        <Dropdown.Menu\n          as={NotificationsDropdownMenu}\n          items={items}\n          popperConfig={{\n            modifiers: [\n              {\n                name: 'offset',\n                options: {\n                  offset: () => {\n                    if (placement === MENU_PLACEMENT.Horizontal) {\n                      return [0, 7];\n                    }\n                    if (window.innerWidth < 768) {\n                      return [-168, 7];\n                    }\n                    return [-162, 7];\n                  },\n                },\n              },\n            ],\n          }}\n        />\n      </Dropdown>\n    );\n  }\n  return <></>;\n};\nexport default React.memo(Notifications);\n"]},"metadata":{},"sourceType":"module"}