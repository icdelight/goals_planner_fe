{"ast":null,"code":"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport axios from 'axios';\nimport authReducer, { setCurrentUser } from 'auth/authSlice';\nimport { LAYOUT, MENU_BEHAVIOUR, NAV_COLOR, MENU_PLACEMENT, RADIUS, THEME_COLOR, USER_ROLE } from 'constants.js';\nimport { URL_SERVICE } from 'config.js';\nimport { DEFAULT_PATHS } from '../config';\nlet response = {\n  responseCode: 999,\n  responseDesc: \"\",\n  responseData: null\n};\nconst appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\nconst history = useHistory();\nexport const TreeView = async token => {\n  const header = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      'Authorization': `Bearer ${token}`\n    }\n  };\n  const result = await axios.post(`${URL_SERVICE}goals/alltreegoals`, {}, header).then(res => {\n    console.log(res);\n\n    if (res) {\n      if (res.data) {\n        if (res.data.statusCode) {\n          console.log(res.data.statusCode);\n          response = {\n            responseCode: res.data.statusCode,\n            responseDesc: res.data.message,\n            responseData: res.data.data\n          };\n\n          if (res.data.statusCode === '401') {\n            // dispatch(setCurrentUser(''));\n            const path = `${appRoot}/login`;\n            history.push(path);\n          }\n        } else {\n          response = {\n            responseCode: 999,\n            responseDesc: 'Invalid response. 2',\n            responseData: null\n          };\n        }\n      } else {\n        response = {\n          responseCode: 999,\n          responseDesc: 'Invalid response. 3',\n          responseData: null\n        };\n      }\n    } else {\n      response = {\n        responseCode: 999,\n        responseDesc: 'Failled to parse response.',\n        responseData: null\n      };\n    }\n\n    return response;\n  }).catch(function (error) {\n    console.log(error);\n\n    if (error.response) {\n      // Request made and server responded\n      // console.log(error.response.data);\n      console.log(error.response.status); // console.log(error.response.headers);\n\n      if (error.response.status === 401) {\n        // dispatch(setCurrentUser(''));\n        const path = `${appRoot}/login`;\n        history.push(path);\n      }\n\n      response = {\n        responseCode: error.response.status,\n        responseDesc: error.response.data.message,\n        responseData: null\n      };\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.log(error.request);\n      response = {\n        responseCode: 999,\n        responseDesc: error.request,\n        responseData: null\n      };\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n      response = {\n        responseCode: 999,\n        responseDesc: `Something went wrong, ${error.message}`,\n        responseData: null\n      };\n    }\n\n    return response;\n  });\n  return result;\n};\n_c = TreeView;\nexport const TreeAdmin = async token => {\n  const header = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      'Authorization': `Bearer ${token}`\n    }\n  };\n  const result = await axios.post(`${URL_SERVICE}goals/allgoalsadmin`, {}, header).then(res => {\n    if (res) {\n      if (res.data) {\n        if (res.data.statusCode) {\n          // console.log(res.data.data);\n          response = {\n            responseCode: res.data.statusCode,\n            responseDesc: res.data.message,\n            responseData: res.data.data\n          };\n        } else {\n          response = {\n            responseCode: 999,\n            responseDesc: 'Invalid response. 2',\n            responseData: null\n          };\n        }\n      } else {\n        response = {\n          responseCode: 999,\n          responseDesc: 'Invalid response. 3',\n          responseData: null\n        };\n      }\n    } else {\n      response = {\n        responseCode: 999,\n        responseDesc: 'Failled to parse response.',\n        responseData: null\n      };\n    }\n\n    return response;\n  }).catch(function (error) {\n    if (error.response) {\n      // Request made and server responded\n      // console.log(error.response.data);\n      // console.log(error.response.status);\n      // console.log(error.response.headers);\n      response = {\n        responseCode: error.response.status,\n        responseDesc: error.response.data.message,\n        responseData: null\n      };\n    } else if (error.request) {\n      // The request was made but no response was received\n      // console.log(error.request);\n      response = {\n        responseCode: 999,\n        responseDesc: error.request,\n        responseData: null\n      };\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      // console.log('Error', error.message);\n      response = {\n        responseCode: 999,\n        responseDesc: `Something went wrong, ${error.message}`,\n        responseData: null\n      };\n    }\n\n    return response;\n  });\n  return result;\n};\n_c2 = TreeAdmin;\nexport const AddChildTreeService = async (token, titleReq, descReq, picReq, startReq, endReq, parentReq, typeReq, indReq) => {\n  const header = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      title_goals: titleReq,\n      desc_goals: descReq,\n      pic_goals: picReq,\n      start_date: startReq,\n      due_date: endReq,\n      parent_goals: parentReq,\n      type_goals: typeReq,\n      indikator: indReq\n    }\n  };\n  console.log(header.params);\n  const result = await axios.post(`${URL_SERVICE}goals/addgoals`, {}, header).then(res => {\n    if (res) {\n      if (res.data) {\n        if (res.data.statusCode) {\n          // console.log(res.data.data);\n          response = {\n            responseCode: res.data.statusCode,\n            responseDesc: res.data.message,\n            responseData: res.data.data\n          };\n        } else {\n          response = {\n            responseCode: 999,\n            responseDesc: 'Invalid response. 2',\n            responseData: null\n          };\n        }\n      } else {\n        response = {\n          responseCode: 999,\n          responseDesc: 'Invalid response. 3',\n          responseData: null\n        };\n      }\n    } else {\n      response = {\n        responseCode: 999,\n        responseDesc: 'Failled to parse response.',\n        responseData: null\n      };\n    }\n\n    return response;\n  }).catch(function (error) {\n    if (error.response) {\n      // Request made and server responded\n      // console.log(error.response.data);\n      // console.log(error.response.status);\n      // console.log(error.response.headers);\n      response = {\n        responseCode: error.response.status,\n        responseDesc: error.response.data.message,\n        responseData: null\n      };\n    } else if (error.request) {\n      // The request was made but no response was received\n      // console.log(error.request);\n      response = {\n        responseCode: 999,\n        responseDesc: error.request,\n        responseData: null\n      };\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      // console.log('Error', error.message);\n      response = {\n        responseCode: 999,\n        responseDesc: `Something went wrong, ${error.message}`,\n        responseData: null\n      };\n    }\n\n    return response;\n  });\n  return result;\n};\n_c3 = AddChildTreeService;\nexport const EditNode = async (token, idReq, titleReq, descReq, picReq, startReq, endReq, statusReq, typeReq, indReq) => {\n  const header = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      'Authorization': `Bearer ${token}`\n    },\n    params: {\n      id_goals: idReq,\n      title_goals: titleReq,\n      desc_goals: descReq,\n      pic_goals: picReq,\n      start_date: startReq,\n      due_date: endReq,\n      status: statusReq,\n      type_goals: typeReq,\n      indikator: indReq\n    }\n  };\n  console.log(header.params);\n  const result = await axios.post(`${URL_SERVICE}goals/editgoals`, {}, header).then(res => {\n    if (res) {\n      if (res.data) {\n        if (res.data.statusCode) {\n          // console.log(res.data.data);\n          response = {\n            responseCode: res.data.statusCode,\n            responseDesc: res.data.message,\n            responseData: res.data.data\n          };\n        } else {\n          response = {\n            responseCode: 999,\n            responseDesc: 'Invalid response. 2',\n            responseData: null\n          };\n        }\n      } else {\n        response = {\n          responseCode: 999,\n          responseDesc: 'Invalid response. 3',\n          responseData: null\n        };\n      }\n    } else {\n      response = {\n        responseCode: 999,\n        responseDesc: 'Failled to parse response.',\n        responseData: null\n      };\n    }\n\n    return response;\n  }).catch(function (error) {\n    if (error.response) {\n      // Request made and server responded\n      // console.log(error.response.data);\n      // console.log(error.response.status);\n      // console.log(error.response.headers);\n      response = {\n        responseCode: error.response.status,\n        responseDesc: error.response.data.message,\n        responseData: null\n      };\n    } else if (error.request) {\n      // The request was made but no response was received\n      // console.log(error.request);\n      response = {\n        responseCode: 999,\n        responseDesc: error.request,\n        responseData: null\n      };\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      // console.log('Error', error.message);\n      response = {\n        responseCode: 999,\n        responseDesc: `Something went wrong, ${error.message}`,\n        responseData: null\n      };\n    }\n\n    return response;\n  });\n  return result;\n};\n_c4 = EditNode;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"TreeView\");\n$RefreshReg$(_c2, \"TreeAdmin\");\n$RefreshReg$(_c3, \"AddChildTreeService\");\n$RefreshReg$(_c4, \"EditNode\");","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/services/treeservice.js"],"names":["React","useDispatch","useSelector","useHistory","axios","authReducer","setCurrentUser","LAYOUT","MENU_BEHAVIOUR","NAV_COLOR","MENU_PLACEMENT","RADIUS","THEME_COLOR","USER_ROLE","URL_SERVICE","DEFAULT_PATHS","response","responseCode","responseDesc","responseData","appRoot","APP","endsWith","slice","length","history","TreeView","token","header","headers","result","post","then","res","console","log","data","statusCode","message","path","push","catch","error","status","request","TreeAdmin","AddChildTreeService","titleReq","descReq","picReq","startReq","endReq","parentReq","typeReq","indReq","params","title_goals","desc_goals","pic_goals","start_date","due_date","parent_goals","type_goals","indikator","EditNode","idReq","statusReq","id_goals"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport axios from 'axios';\nimport authReducer, { setCurrentUser } from 'auth/authSlice';\nimport { LAYOUT, MENU_BEHAVIOUR, NAV_COLOR, MENU_PLACEMENT, RADIUS, THEME_COLOR, USER_ROLE } from 'constants.js';\nimport { URL_SERVICE } from 'config.js';\nimport { DEFAULT_PATHS } from '../config';\n\nlet response = {\n    responseCode : 999,\n    responseDesc : \"\",\n    responseData : null,\n};\nconst appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\nconst history = useHistory();\n\nexport const TreeView = async (token) => {\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}goals/alltreegoals`, { }, header)\n    .then(res => {\n        console.log(res);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode) {\n                    console.log(res.data.statusCode);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                    if(res.data.statusCode === '401') {\n                        // dispatch(setCurrentUser(''));\n                        const path = `${appRoot}/login`; \n                        history.push(path);\n                    }\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        console.log(error);\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            console.log(error.response.status);\n            // console.log(error.response.headers);\n            if(error.response.status === 401) {\n                // dispatch(setCurrentUser(''));\n                const path = `${appRoot}/login`; \n                history.push(path);\n            }\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const TreeAdmin = async (token) => {\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        }\n    };\n    const result = await axios.post( `${URL_SERVICE}goals/allgoalsadmin`, { }, header)\n    .then(res => {\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const AddChildTreeService = async (token,titleReq,descReq,picReq,startReq,endReq,parentReq,typeReq,indReq) => {\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n        params : {\n            title_goals: titleReq, \n            desc_goals: descReq, \n            pic_goals: picReq, \n            start_date: startReq, \n            due_date: endReq, \n            parent_goals: parentReq,\n            type_goals: typeReq,\n            indikator: indReq,\n        }\n    };\n\n    console.log(header.params);\n    const result = await axios.post( \n        `${URL_SERVICE}goals/addgoals`, \n        { }, \n        header\n    )\n    .then(res => {\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const EditNode = async (token,idReq,titleReq,descReq,picReq,startReq,endReq,statusReq,typeReq,indReq) => {\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n        params : {\n            id_goals: idReq, \n            title_goals: titleReq, \n            desc_goals: descReq, \n            pic_goals: picReq, \n            start_date: startReq, \n            due_date: endReq, \n            status: statusReq,\n            type_goals: typeReq,\n            indikator: indReq,\n        }\n    };\n\n    console.log(header.params);\n    const result = await axios.post( \n        `${URL_SERVICE}goals/editgoals`, \n        { }, \n        header\n    )\n    .then(res => {\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}"]},"metadata":{},"sourceType":"module"}