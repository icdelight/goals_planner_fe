{"ast":null,"code":"var _jsxFileName = \"/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/layout/nav/NavLanguageSwitcher.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { MENU_PLACEMENT } from 'constants.js';\nimport { changeLang } from 'lang/langSlice';\nimport { layoutShowingNavMenu } from 'layout/layoutSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MENU_NAME = 'NavLanguageSwitcher';\n\nconst NavLanguageSwitcher = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    behaviourStatus: {\n      behaviourHtmlData\n    },\n    placementStatus: {\n      view: placement\n    },\n    attrMobile,\n    attrMenuAnimate\n  } = useSelector(state => state.menu);\n  const {\n    color\n  } = useSelector(state => state.settings);\n  const {\n    showingNavMenu\n  } = useSelector(state => state.layout);\n  const {\n    languages,\n    currentLang\n  } = useSelector(state => state.lang);\n\n  const onSelectLang = code => {\n    dispatch(changeLang(code));\n  };\n\n  const onToggle = (status, event) => {\n    if (event && event.stopPropagation) event.stopPropagation();else if (event && event.originalEvent && event.originalEvent.stopPropagation) event.originalEvent.stopPropagation();\n    dispatch(layoutShowingNavMenu(status ? MENU_NAME : ''));\n  };\n\n  useEffect(() => {\n    dispatch(layoutShowingNavMenu('')); // eslint-disable-next-line\n  }, [attrMenuAnimate, behaviourHtmlData, attrMobile, color]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"language-switch-container\",\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      onToggle: onToggle,\n      show: showingNavMenu === MENU_NAME,\n      align: \"end\",\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n        variant: \"empty\",\n        className: classNames('language-button', {\n          show: showingNavMenu === MENU_NAME\n        }),\n        children: currentLang.code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n        popperConfig: {\n          modifiers: [{\n            name: 'offset',\n            options: {\n              offset: () => {\n                if (placement === MENU_PLACEMENT.Vertical) {\n                  return [6, 7];\n                }\n\n                return [0, 7];\n              }\n            }\n          }]\n        },\n        children: languages.map(lang => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: () => onSelectLang(lang.code),\n          children: lang.code\n        }, lang.locale, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavLanguageSwitcher, \"AqkYoYoPt1bq0euRvXwFpmSsa04=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = NavLanguageSwitcher;\nexport default _c2 = /*#__PURE__*/React.memo(NavLanguageSwitcher);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NavLanguageSwitcher\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/layout/nav/NavLanguageSwitcher.js"],"names":["React","useEffect","Dropdown","useDispatch","useSelector","classNames","MENU_PLACEMENT","changeLang","layoutShowingNavMenu","MENU_NAME","NavLanguageSwitcher","dispatch","behaviourStatus","behaviourHtmlData","placementStatus","view","placement","attrMobile","attrMenuAnimate","state","menu","color","settings","showingNavMenu","layout","languages","currentLang","lang","onSelectLang","code","onToggle","status","event","stopPropagation","originalEvent","show","modifiers","name","options","offset","Vertical","map","locale","memo"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { MENU_PLACEMENT } from 'constants.js';\nimport { changeLang } from 'lang/langSlice';\nimport { layoutShowingNavMenu } from 'layout/layoutSlice';\n\nconst MENU_NAME = 'NavLanguageSwitcher';\nconst NavLanguageSwitcher = () => {\n  const dispatch = useDispatch();\n\n  const {\n    behaviourStatus: { behaviourHtmlData },\n    placementStatus: { view: placement },\n    attrMobile,\n    attrMenuAnimate,\n  } = useSelector((state) => state.menu);\n  const { color } = useSelector((state) => state.settings);\n  const { showingNavMenu } = useSelector((state) => state.layout);\n  const { languages, currentLang } = useSelector((state) => state.lang);\n\n  const onSelectLang = (code) => {\n    dispatch(changeLang(code));\n  };\n  const onToggle = (status, event) => {\n    if (event && event.stopPropagation) event.stopPropagation();\n    else if (event && event.originalEvent && event.originalEvent.stopPropagation) event.originalEvent.stopPropagation();\n    dispatch(layoutShowingNavMenu(status ? MENU_NAME : ''));\n  };\n\n  useEffect(() => {\n    dispatch(layoutShowingNavMenu(''));\n    // eslint-disable-next-line\n  }, [attrMenuAnimate, behaviourHtmlData, attrMobile, color]);\n\n  return (\n    <div className=\"language-switch-container\">\n      <Dropdown onToggle={onToggle} show={showingNavMenu === MENU_NAME} align=\"end\">\n        <Dropdown.Toggle\n          variant=\"empty\"\n          className={classNames('language-button', {\n            show: showingNavMenu === MENU_NAME,\n          })}\n        >\n          {currentLang.code}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu\n          popperConfig={{\n            modifiers: [\n              {\n                name: 'offset',\n                options: {\n                  offset: () => {\n                    if (placement === MENU_PLACEMENT.Vertical) {\n                      return [6, 7];\n                    }\n                    return [0, 7];\n                  },\n                },\n              },\n            ],\n          }}\n        >\n          {languages.map((lang) => (\n            <Dropdown.Item key={lang.locale} onClick={() => onSelectLang(lang.code)}>\n              {lang.code}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  );\n};\nexport default React.memo(NavLanguageSwitcher);\n"]},"metadata":{},"sourceType":"module"}