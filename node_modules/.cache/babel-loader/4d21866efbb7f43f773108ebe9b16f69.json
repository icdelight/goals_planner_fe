{"ast":null,"code":"var _jsxFileName = \"/Users/harmadini/Work/Free/React/goals_planner_fe/goals_planner_fe/src/layout/nav/NavMobileButtons.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport ScrollspyMobile from 'components/scrollspy/ScrollspyMobile';\nimport { menuChangeAttrMobile, menuChangeNavClasses } from './main-menu/menuSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavMobileButtons = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    navClasses\n  } = useSelector(state => state.menu);\n  const {\n    items: scrollspyItems\n  } = useSelector(state => state.scrollspy); // Starts mobile menu opening sequence\n\n  const showMobileMenu = e => {\n    e.preventDefault();\n    dispatch(menuChangeAttrMobile(true));\n    let newNavClasses = { ...navClasses,\n      'mobile-top-out': true,\n      'mobile-top-in': false,\n      'mobile-top-ready': false\n    };\n    dispatch(menuChangeNavClasses(newNavClasses));\n    setTimeout(() => {\n      newNavClasses = { ...newNavClasses,\n        'mobile-top-out': false,\n        'mobile-side-ready': true\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n    }, 200);\n    setTimeout(() => {\n      newNavClasses = { ...newNavClasses,\n        'mobile-side-in': true\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n    }, 230);\n  }; // Starts mobile menu closing sequence\n\n\n  const hideMobileMenu = () => {\n    let newNavClasses = { ...navClasses,\n      'mobile-side-out': true,\n      'mobile-side-ready': true,\n      'mobile-side-in': false\n    };\n    dispatch(menuChangeNavClasses(newNavClasses));\n    setTimeout(() => {\n      newNavClasses = { ...newNavClasses,\n        'mobile-side-ready': false,\n        'mobile-side-out': false,\n        'mobile-top-ready': true\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n    }, 200);\n    setTimeout(() => {\n      newNavClasses = { ...newNavClasses,\n        'mobile-top-in': true,\n        'mobile-top-ready': true\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n      dispatch(menuChangeAttrMobile(false));\n    }, 230);\n  };\n\n  useEffect(() => {\n    if (navClasses && navClasses['mobile-side-in']) {\n      window.addEventListener('click', hideMobileMenu);\n    }\n\n    return () => {\n      window.removeEventListener('click', hideMobileMenu);\n    }; // eslint-disable-next-line\n  }, [navClasses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mobile-buttons-container\",\n    children: [scrollspyItems && scrollspyItems.length > 0 && /*#__PURE__*/_jsxDEV(ScrollspyMobile, {\n      items: scrollspyItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 55\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#/\",\n      id: \"mobileMenuButton\",\n      className: \"menu-button\",\n      onClick: showMobileMenu,\n      children: /*#__PURE__*/_jsxDEV(CsLineIcons, {\n        icon: \"menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavMobileButtons, \"aHl4IOi55ti+U5wL+d0H1fm5CvQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = NavMobileButtons;\nexport default _c2 = /*#__PURE__*/React.memo(NavMobileButtons);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NavMobileButtons\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/goals_planner_fe/goals_planner_fe/src/layout/nav/NavMobileButtons.js"],"names":["React","useEffect","useDispatch","useSelector","CsLineIcons","ScrollspyMobile","menuChangeAttrMobile","menuChangeNavClasses","NavMobileButtons","dispatch","navClasses","state","menu","items","scrollspyItems","scrollspy","showMobileMenu","e","preventDefault","newNavClasses","setTimeout","hideMobileMenu","window","addEventListener","removeEventListener","length","memo"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport ScrollspyMobile from 'components/scrollspy/ScrollspyMobile';\nimport { menuChangeAttrMobile, menuChangeNavClasses } from './main-menu/menuSlice';\n\nconst NavMobileButtons = () => {\n  const dispatch = useDispatch();\n  const { navClasses } = useSelector((state) => state.menu);\n  const { items: scrollspyItems } = useSelector((state) => state.scrollspy);\n\n  // Starts mobile menu opening sequence\n  const showMobileMenu = (e) => {\n    e.preventDefault();\n    dispatch(menuChangeAttrMobile(true));\n    let newNavClasses = {\n      ...navClasses,\n      'mobile-top-out': true,\n      'mobile-top-in': false,\n      'mobile-top-ready': false,\n    };\n    dispatch(menuChangeNavClasses(newNavClasses));\n    setTimeout(() => {\n      newNavClasses = {\n        ...newNavClasses,\n        'mobile-top-out': false,\n        'mobile-side-ready': true,\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n    }, 200);\n    setTimeout(() => {\n      newNavClasses = {\n        ...newNavClasses,\n        'mobile-side-in': true,\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n    }, 230);\n  };\n\n  // Starts mobile menu closing sequence\n  const hideMobileMenu = () => {\n    let newNavClasses = {\n      ...navClasses,\n      'mobile-side-out': true,\n      'mobile-side-ready': true,\n      'mobile-side-in': false,\n    };\n    dispatch(menuChangeNavClasses(newNavClasses));\n    setTimeout(() => {\n      newNavClasses = {\n        ...newNavClasses,\n        'mobile-side-ready': false,\n        'mobile-side-out': false,\n        'mobile-top-ready': true,\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n    }, 200);\n    setTimeout(() => {\n      newNavClasses = {\n        ...newNavClasses,\n        'mobile-top-in': true,\n        'mobile-top-ready': true,\n      };\n      dispatch(menuChangeNavClasses(newNavClasses));\n      dispatch(menuChangeAttrMobile(false));\n    }, 230);\n  };\n\n  useEffect(() => {\n    if (navClasses && navClasses['mobile-side-in']) {\n      window.addEventListener('click', hideMobileMenu);\n    }\n    return () => {\n      window.removeEventListener('click', hideMobileMenu);\n    };\n    // eslint-disable-next-line\n  }, [navClasses]);\n\n  return (\n    <div className=\"mobile-buttons-container\">\n      {scrollspyItems && scrollspyItems.length > 0 && <ScrollspyMobile items={scrollspyItems} />}\n      <a href=\"#/\" id=\"mobileMenuButton\" className=\"menu-button\" onClick={showMobileMenu}>\n        <CsLineIcons icon=\"menu\" />\n      </a>\n    </div>\n  );\n};\nexport default React.memo(NavMobileButtons);\n"]},"metadata":{},"sourceType":"module"}