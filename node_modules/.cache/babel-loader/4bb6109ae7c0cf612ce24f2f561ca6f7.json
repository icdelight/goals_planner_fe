{"ast":null,"code":"var _jsxFileName = \"/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/views/TreeAdminFun.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport SortableTree from \"react-sortable-tree\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { TreeView } from '../services/treeservice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TreeAdminFun = () => {\n  _s();\n\n  const {\n    currentUser,\n    isLogin\n  } = useSelector(state => state.auth);\n  const [treeData, getGoals] = useState('');\n  const [isLoading, setLoading] = useState(true);\n\n  const getAllGoals = () => {\n    let result = null;\n    const Signups = TreeView(currentUser.token).then(function (response) {\n      if (response) {\n        if (response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n          }); // console.log(response.responseData);\n\n          result = response.responseData;\n          console.log(result);\n          getGoals(result);\n          setLoading(false);\n        } else {\n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n          });\n        }\n      }\n    });\n  };\n\n  const handleNodeClick = node => {\n    setState({\n      nodeClicked: node\n    });\n  };\n\n  const handleTreeOnChange = treeData => {\n    setState({\n      treeData\n    });\n  };\n\n  useEffect(() => {\n    getAllGoals();\n  }, []);\n  const maxDepth = 3;\n  const title = 'Tree Admin Page';\n  const description = 'An page for configure the tree view.';\n  const breadcrumbs = [{\n    to: '',\n    text: 'Home'\n  }];\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: 500\n    },\n    children: [/*#__PURE__*/_jsxDEV(HtmlHead, {\n      title: title,\n      description: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"scroll-section\",\n          id: \"title\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"page-title-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"mb-0 pb-0 display-4\",\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(BreadcrumbList, {\n              items: breadcrumbs\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            className: \"mb-5\",\n            body: true,\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(SortableTree, {\n              treeData: treeData,\n              onChange: handleTreeOnChange,\n              isVirtualized: false,\n              maxDepth: maxDepth,\n              generateNodeProps: rowInfo => {\n                const {\n                  node\n                } = rowInfo;\n                return {\n                  buttons: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn-xs btn-outline-success\",\n                    style: {\n                      verticalAlign: \"middle\"\n                    },\n                    onClick: () => alertNodeInfo(rowInfo),\n                    children: \"\\u2139\"\n                  }, node, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 37\n                  }, this)],\n                  onClick: () => {\n                    this.handleNodeClick(node);\n                  },\n                  style: node === nodeClicked ? {\n                    border: \"3px solid yellow\"\n                  } : {}\n                };\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: this.handleClickButton,\n              children: \"Click Me\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeAdminFun, \"hHM62UGuEMa9VGf+J9UTiBB+HA8=\", false, function () {\n  return [useSelector];\n});\n\n_c = TreeAdminFun;\nexport default TreeAdminFun;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeAdminFun\");","map":{"version":3,"sources":["/Users/harmadini/Work/Free/React/Acorn-React-Admin-Template-1.0.2/Source/acorn-react-starter-project/src/views/TreeAdminFun.js"],"names":["React","useEffect","useState","SortableTree","Row","Col","Card","HtmlHead","BreadcrumbList","toast","useSelector","TreeView","TreeAdminFun","currentUser","isLogin","state","auth","treeData","getGoals","isLoading","setLoading","getAllGoals","result","Signups","token","then","response","responseCode","success","responseDesc","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","responseData","console","log","error","handleNodeClick","node","setState","nodeClicked","handleTreeOnChange","maxDepth","title","description","breadcrumbs","to","text","height","rowInfo","buttons","verticalAlign","alertNodeInfo","onClick","style","border","handleClickButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SortableTree from \"react-sortable-tree\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { TreeView } from '../services/treeservice';\n\nconst TreeAdminFun = () => {\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const [treeData, getGoals] = useState('');\n    const [isLoading, setLoading] = useState(true);\n\n    const getAllGoals = () => {\n      \n      let result = null;\n      const Signups  =  TreeView(currentUser.token).then(function(response) {\n        if(response) {\n          if(response.responseCode === 200) {\n            toast.success(response.responseDesc, {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n            // console.log(response.responseData);\n            result = response.responseData;\n            console.log(result);\n            getGoals(result);\n            setLoading(false);\n          }else{  \n            toast.error(response.responseDesc, {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            });\n          }\n        }\n      });\n    }\n\n    const handleNodeClick = (node) => {\n        setState({\n            nodeClicked: node\n        });\n    };\n\n    const handleTreeOnChange = (treeData) => {\n        setState({ treeData });\n    };\n\n    useEffect(() => {\n        getAllGoals();\n    }, []);\n    \n    const maxDepth = 3; \n    const title = 'Tree Admin Page';\n    const description = 'An page for configure the tree view.';\n    const breadcrumbs = [{ to: '', text: 'Home' }];\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"App\" style={{ height: 500 }}>\n            <HtmlHead title={title} description={description} />\n            <Row>\n                <Col>\n                    {/* Title Start */}\n                    <section className=\"scroll-section\" id=\"title\">\n                    <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </div>\n                    <Card className=\"mb-5\" body>\n                        <Card.Text>{description}</Card.Text>\n                        <SortableTree\n                            treeData={treeData}\n                            onChange={handleTreeOnChange}\n                            isVirtualized= {false}\n                            maxDepth={maxDepth}\n                            generateNodeProps={(rowInfo) => {\n                                const { node } = rowInfo;\n                                return {\n                                    buttons: [\n                                    <button\n                                        type=\"button\"\n                                        key={node}\n                                        className=\"btn-xs btn-outline-success\"\n                                        style={{\n                                        verticalAlign: \"middle\"\n                                        }}\n                                        onClick={() => alertNodeInfo(rowInfo)}\n                                    >\n                                        ℹ\n                                    </button>\n                                    ],\n                                    onClick: () => {\n                                    this.handleNodeClick(node);\n                                    },\n                                    style:\n                                    node === nodeClicked\n                                        ? {\n                                            border: \"3px solid yellow\"\n                                        }\n                                        : {}\n                                };\n                            }}\n                            />\n                            <button type=\"button\" onClick={this.handleClickButton}>\n                                Click Me\n                            </button>\n                    </Card>\n                    </section>\n                {/* Title End */}\n                </Col>\n            </Row>\n            \n        </div>\n    )\n\n};\n\nexport default TreeAdminFun;\n"]},"metadata":{},"sourceType":"module"}