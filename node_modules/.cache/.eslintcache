[{"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/index.js":"1","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/reportWebVitals.js":"2","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/config.js":"3","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/store.js":"4","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routes.js":"5","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/LangProvider.js":"6","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/helper.js":"7","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/default-routes.js":"8","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/components/RouteIdentifier.js":"9","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/loading/Loading.js":"10","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/index.js":"11","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/constants.js":"12","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/components/RouteItem.js":"13","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/messages.js":"14","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/langSlice.js":"15","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/layoutSlice.js":"16","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/settings/settingsSlice.js":"17","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/auth/authSlice.js":"18","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/scrollspy/scrollspySlice.js":"19","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/App.js":"20","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/menuSlice.js":"21","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/notifications/notificationSlice.js":"22","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Home.js":"23","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/user/UserSetting.js":"24","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/area/AreaSetting.js":"25","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/user/EditUser.js":"26","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/area/AddArea.js":"27","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/area/EditArea.js":"28","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/cluster/EditCluster.js":"29","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/cluster/AddCluster.js":"30","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/cluster/ClusterSetting.js":"31","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/api.js":"32","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/NotFound.js":"33","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Register.js":"34","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Login.js":"35","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/ForgotPassword.js":"36","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Unauthorized.js":"37","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/ResetPassword.js":"38","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/InvalidAccess.js":"39","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.chat.js":"40","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.contacts.js":"41","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.tasks.js":"42","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/products.js":"43","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.mailbox.js":"44","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/users.js":"45","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.events.js":"46","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/notifications.js":"47","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/datatable.js":"48","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/es.js":"49","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/en.js":"50","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/de.js":"51","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-detail/index.js":"52","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-addchild/index.js":"53","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-update/index.js":"54","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/index.js":"55","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeview-dabeng/index.js":"56","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/areaservice.js":"57","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/clusterservice.js":"58","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/signin.js":"59","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/Layout.js":"60","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeview-dabeng/view.js":"61","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/treeservice.js":"62","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/html-head/HtmlHead.js":"63","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useCustomLayout.js":"64","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/breadcrumb-list/BreadcrumbList.js":"65","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/cs-line-icons/CsLineIcons.js":"66","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/Table.js":"67","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/TablePagination.js":"68","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/ModalAddEdit.js":"69","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/ControlsPageSize.js":"70","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/ControlsSearch.js":"71","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/LayoutFullpage.js":"72","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/userservice.js":"73","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/defaultRes.js":"74","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useWindowSize.js":"75","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/node/mynode.js":"76","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/org-chart/ChartContainer.js":"77","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/cs-line-icons/svgs.js":"78","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/select/SelectServerSide.js":"79","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useLayout.js":"80","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/Nav.js":"81","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/footer/Footer.js":"82","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/sidebar-menu/SidebarMenu.js":"83","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/select/SelectMultiple.js":"84","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/org-chart/ChartNode.js":"85","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/org-chart/service.js":"86","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useModalPaddingFix.js":"87","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/NavMobileButtons.js":"88","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/NavLogo.js":"89","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/MainMenu.js":"90","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/NavUserMenu.js":"91","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/sidebar-menu/SidebarMenuItems.js":"92","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useMutationObservable.js":"93","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/helper.js":"94","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/MainMenuItems.js":"95","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/scrollspy/ScrollspyMobile.js":"96","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useWindowScroll.js":"97","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/scrollspy/ScrollspyContent.js":"98","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/usePrevious.js":"99"},{"size":2036,"mtime":1662440522374,"results":"100","hashOfConfig":"101"},{"size":364,"mtime":1662440522379,"results":"102","hashOfConfig":"101"},{"size":1318,"mtime":1663001724113,"results":"103","hashOfConfig":"101"},{"size":1613,"mtime":1662565343881,"results":"104","hashOfConfig":"101"},{"size":7285,"mtime":1663667424019,"results":"105","hashOfConfig":"101"},{"size":437,"mtime":1662440522374,"results":"106","hashOfConfig":"101"},{"size":9950,"mtime":1662440522380,"results":"107","hashOfConfig":"101"},{"size":1505,"mtime":1662440522380,"results":"108","hashOfConfig":"101"},{"size":557,"mtime":1662440522379,"results":"109","hashOfConfig":"101"},{"size":695,"mtime":1662440522369,"results":"110","hashOfConfig":"101"},{"size":305,"mtime":1662440522365,"results":"111","hashOfConfig":"101"},{"size":916,"mtime":1662999711595,"results":"112","hashOfConfig":"101"},{"size":594,"mtime":1662440522379,"results":"113","hashOfConfig":"101"},{"size":185,"mtime":1662440522375,"results":"114","hashOfConfig":"101"},{"size":864,"mtime":1662440522374,"results":"115","hashOfConfig":"101"},{"size":418,"mtime":1662440522376,"results":"116","hashOfConfig":"101"},{"size":3841,"mtime":1662440522391,"results":"117","hashOfConfig":"101"},{"size":513,"mtime":1662440522366,"results":"118","hashOfConfig":"101"},{"size":412,"mtime":1662440522370,"results":"119","hashOfConfig":"101"},{"size":1108,"mtime":1662999711594,"results":"120","hashOfConfig":"101"},{"size":2780,"mtime":1662440522377,"results":"121","hashOfConfig":"101"},{"size":863,"mtime":1662440522378,"results":"122","hashOfConfig":"101"},{"size":1399,"mtime":1662999711601,"results":"123","hashOfConfig":"101"},{"size":11721,"mtime":1663667230103,"results":"124","hashOfConfig":"101"},{"size":13013,"mtime":1663667230099,"results":"125","hashOfConfig":"101"},{"size":14794,"mtime":1663667230103,"results":"126","hashOfConfig":"101"},{"size":9592,"mtime":1663667230099,"results":"127","hashOfConfig":"101"},{"size":9584,"mtime":1663667230100,"results":"128","hashOfConfig":"101"},{"size":12842,"mtime":1663667230101,"results":"129","hashOfConfig":"101"},{"size":15005,"mtime":1663667230100,"results":"130","hashOfConfig":"101"},{"size":17188,"mtime":1663667230101,"results":"131","hashOfConfig":"101"},{"size":259,"mtime":1662440522362,"results":"132","hashOfConfig":"101"},{"size":1556,"mtime":1662440522394,"results":"133","hashOfConfig":"101"},{"size":5551,"mtime":1663667230102,"results":"134","hashOfConfig":"101"},{"size":4683,"mtime":1662999711601,"results":"135","hashOfConfig":"101"},{"size":3253,"mtime":1662440522394,"results":"136","hashOfConfig":"101"},{"size":1561,"mtime":1662440522395,"results":"137","hashOfConfig":"101"},{"size":3829,"mtime":1662440522395,"results":"138","hashOfConfig":"101"},{"size":1569,"mtime":1662440522394,"results":"139","hashOfConfig":"101"},{"size":10970,"mtime":1662440522363,"results":"140","hashOfConfig":"101"},{"size":7390,"mtime":1662440522363,"results":"141","hashOfConfig":"101"},{"size":6140,"mtime":1662440522364,"results":"142","hashOfConfig":"101"},{"size":15375,"mtime":1662440522365,"results":"143","hashOfConfig":"101"},{"size":34818,"mtime":1662440522364,"results":"144","hashOfConfig":"101"},{"size":3422,"mtime":1662440522365,"results":"145","hashOfConfig":"101"},{"size":3523,"mtime":1662440522363,"results":"146","hashOfConfig":"101"},{"size":788,"mtime":1662440522365,"results":"147","hashOfConfig":"101"},{"size":9667,"mtime":1662440522365,"results":"148","hashOfConfig":"101"},{"size":5991,"mtime":1662440522375,"results":"149","hashOfConfig":"101"},{"size":5475,"mtime":1662440522375,"results":"150","hashOfConfig":"101"},{"size":5991,"mtime":1662440522375,"results":"151","hashOfConfig":"101"},{"size":19467,"mtime":1663758455450,"results":"152","hashOfConfig":"101"},{"size":15593,"mtime":1663759515830,"results":"153","hashOfConfig":"101"},{"size":17955,"mtime":1663760093845,"results":"154","hashOfConfig":"101"},{"size":6549,"mtime":1663667242053,"results":"155","hashOfConfig":"101"},{"size":4991,"mtime":1663740705134,"results":"156","hashOfConfig":"101"},{"size":18092,"mtime":1663667230096,"results":"157","hashOfConfig":"101"},{"size":11687,"mtime":1663667230097,"results":"158","hashOfConfig":"101"},{"size":6336,"mtime":1663667230097,"results":"159","hashOfConfig":"101"},{"size":995,"mtime":1662999711595,"results":"160","hashOfConfig":"101"},{"size":9229,"mtime":1663760583685,"results":"161","hashOfConfig":"101"},{"size":13960,"mtime":1663759526717,"results":"162","hashOfConfig":"101"},{"size":354,"mtime":1662440522368,"results":"163","hashOfConfig":"101"},{"size":3718,"mtime":1662440522373,"results":"164","hashOfConfig":"101"},{"size":638,"mtime":1662440522367,"results":"165","hashOfConfig":"101"},{"size":993,"mtime":1662440522371,"results":"166","hashOfConfig":"101"},{"size":2393,"mtime":1663667242052,"results":"167","hashOfConfig":"101"},{"size":1609,"mtime":1663667242053,"results":"168","hashOfConfig":"101"},{"size":5042,"mtime":1663667242052,"results":"169","hashOfConfig":"101"},{"size":1440,"mtime":1663667242051,"results":"170","hashOfConfig":"101"},{"size":947,"mtime":1663667242051,"results":"171","hashOfConfig":"101"},{"size":1094,"mtime":1662440522375,"results":"172","hashOfConfig":"101"},{"size":11222,"mtime":1663667230098,"results":"173","hashOfConfig":"101"},{"size":1743,"mtime":1663667242046,"results":"174","hashOfConfig":"101"},{"size":658,"mtime":1662440522374,"results":"175","hashOfConfig":"101"},{"size":13303,"mtime":1662999711595,"results":"176","hashOfConfig":"101"},{"size":10966,"mtime":1663760724811,"results":"177","hashOfConfig":"101"},{"size":200096,"mtime":1662440522372,"results":"178","hashOfConfig":"101"},{"size":611,"mtime":1663667242046,"results":"179","hashOfConfig":"101"},{"size":2550,"mtime":1662440522373,"results":"180","hashOfConfig":"101"},{"size":2756,"mtime":1662999711596,"results":"181","hashOfConfig":"101"},{"size":1345,"mtime":1662999711596,"results":"182","hashOfConfig":"101"},{"size":928,"mtime":1662440522378,"results":"183","hashOfConfig":"101"},{"size":355,"mtime":1663740705133,"results":"184","hashOfConfig":"101"},{"size":11081,"mtime":1663315319677,"results":"185","hashOfConfig":"101"},{"size":488,"mtime":1663315319691,"results":"186","hashOfConfig":"101"},{"size":979,"mtime":1662440522373,"results":"187","hashOfConfig":"101"},{"size":2673,"mtime":1662440522377,"results":"188","hashOfConfig":"101"},{"size":531,"mtime":1662440522376,"results":"189","hashOfConfig":"101"},{"size":5816,"mtime":1662440522377,"results":"190","hashOfConfig":"101"},{"size":4838,"mtime":1662999711596,"results":"191","hashOfConfig":"101"},{"size":1749,"mtime":1662440522378,"results":"192","hashOfConfig":"101"},{"size":691,"mtime":1662440522373,"results":"193","hashOfConfig":"101"},{"size":5315,"mtime":1662440522377,"results":"194","hashOfConfig":"101"},{"size":6946,"mtime":1662440522377,"results":"195","hashOfConfig":"101"},{"size":1209,"mtime":1662440522370,"results":"196","hashOfConfig":"101"},{"size":1460,"mtime":1662440522374,"results":"197","hashOfConfig":"101"},{"size":840,"mtime":1662440522370,"results":"198","hashOfConfig":"101"},{"size":200,"mtime":1663739229131,"results":"199","hashOfConfig":"101"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},"cm7p90",{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"202"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"202"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"202"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"202"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"202"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"202"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"202"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"202"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"202"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"202"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"202"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"202"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"202"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"202"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"202"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"202"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"202"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/index.js",[],["420","421"],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/reportWebVitals.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/config.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/store.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routes.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/LangProvider.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/helper.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/default-routes.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/components/RouteIdentifier.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/loading/Loading.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/index.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/constants.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/routing/components/RouteItem.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/messages.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/langSlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/layoutSlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/settings/settingsSlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/auth/authSlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/scrollspy/scrollspySlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/App.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/menuSlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/notifications/notificationSlice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Home.js",["422","423"],"import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport useCustomLayout from 'hooks/useCustomLayout';\nimport { MENU_PLACEMENT, LAYOUT } from 'constants.js';\nimport { useSelector } from 'react-redux';\n\n\nconst Home = () => { \n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const title = 'Home Page';\n    const description = 'An empty home page with a boxed layout.';\n    const breadcrumbs = [{ to: '', text: 'Home' }];\n    // console.log(currentUser);\n    useCustomLayout({ placement: MENU_PLACEMENT.Vertical, layout: LAYOUT.Boxed });\n    return (\n        <>\n          <HtmlHead title={title} description={description} />\n          <Row>\n            <Col>\n              {/* Title Start */}\n              <section className=\"scroll-section\" id=\"title\">\n                <div className=\"page-title-container\">\n                  <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                  <BreadcrumbList items={breadcrumbs} />\n                </div>\n                <Card className=\"mb-5\" body>\n                  <Card.Text>{description}</Card.Text>\n                </Card>\n              </section>\n              {/* Title End */}\n            </Col>\n          </Row>\n        </>\n      );\n\n}\n\nexport default Home;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/user/UserSetting.js",["424","425","426","427","428","429","430"],"import {React,useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Card, Form , Button, Pagination} from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport useCustomLayout from 'hooks/useCustomLayout';\nimport { MENU_PLACEMENT, LAYOUT } from 'constants.js';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { GetAllUsers, FindUsers } from '../../services/userservice';\nimport { DEFAULT_PATHS } from '../../config';\n\nconst RowInd = function(propss){\n    const {name, firstname, role, area, subarea, createDate, onClick} = propss;\n\n    const newDate= new Date(createDate); \n    const cratedString = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(newDate);\n    // console.log(cratedString)\n           \n    return (\n      <Card className=\"mb-2\">\n      <Row className=\"g-0 h-auto sh-sm-19 sh-lg-9\">\n        <Col xs=\"12\" sm=\"auto\">\n          <img src=\"/img/profile/profile-12.gif\" className=\"card-img card-img-horizontal-sm rounded-xl sh-10 h-sm-100 sw-lg-9 sw-sm-12\" alt=\"thumb\" />\n        </Col>\n        <Col xs=\"12\" className=\"col-sm\">\n          <Card.Body className=\"pt-sm-0 pb-sm-0 h-100\">\n            <Row className=\"g-0 h-100 align-content-center\">\n              <Col lg=\"2\" className=\"d-flex flex-column mb-lg-0 mb-3 mb-lg-0 pe-3 d-flex\">\n                  <div className=\"lh-1\">{name}</div>\n                  <div className=\"text-small text-muted text-truncate\">{firstname}</div>\n              </Col>\n              <Col xs=\"4\" sm=\"4\" lg=\"2\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{role}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Role</div>\n              </Col>\n              <Col xs=\"4\" sm=\"4\" lg=\"2\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"center\"}}>{area}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"center\"}}>Area</div>\n              </Col>\n              <Col xs=\"4\" sm=\"4\" lg=\"2\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"center\"}}>{subarea}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"center\"}}>Sub Area</div>\n              </Col>\n              <Col xs=\"10\" sm=\"11\" lg=\"3\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <div className=\"lh-1 text-alternate pe-2\" style={{textAlign:\"left\"}}>{cratedString}</div>\n                <div className=\"text-muted text-small pe-2\" style={{textAlign:\"left\", alignItems:\"left\"}}>Created</div>\n              </Col>\n              <Col xs=\"2\" sm=\"1\" lg=\"1\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <Button size=\"sm\" variant=\"outline-muted\" className=\"btn-icon btn-icon-only hover-outline\" onClick={onClick}>\n                  <CsLineIcons icon=\"edit-square\" />\n                </Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Col>\n      </Row>\n    </Card>\n    );\n}\n\nconst UserSettingPage = () => {\n  const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n  const history = useHistory();\n  const title = 'User Setting Page';\n  const description = 'List of Users.';\n  const { currentUser, isLogin } = useSelector((state) => state.auth);\n\n  const rowsId = [];\n  // const [rowState, setRowState] = useState(rowsId);\n  const [ds, getUsers] = useState(rowsId);\n  const [isLoading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n\n  const breadcrumbs = [{ to: '', text: 'Home' }];\n\n  const getAllUsers = (paging) => { \n    setLoading(true);\n    let result = null;\n    GetAllUsers(currentUser.token, paging).then(function(response) {\n      if(response) {\n        // console.log(response);\n        if(response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n          // console.log(response.responseData);\n          result = response.responseData;\n          getUsers(result);\n          setLoading(false);\n          setPage(paging);\n        }else{  \n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n          });\n          setLoading(false);\n\n          // if(response.responseCode === 401) {\n          //   // dispatch(setCurrentUser(''));\n          //   const path = `${appRoot}/login`; \n          //   history.push(path);\n          // }\n        }\n      }\n    });\n  };\n\n  const findUsers = (paging,search) => { \n    setLoading(true);\n    let result = null;\n    FindUsers(currentUser.token, paging, search).then(function(response) {\n      if(response) {\n        // console.log(response);\n        if(response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n          // console.log(response.responseData);\n          result = response.responseData;\n          getUsers(result);\n          setLoading(false);\n          setPage(paging);\n        }else{  \n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n          });\n          setLoading(false);\n\n          // if(response.responseCode === 401) {\n          //   // dispatch(setCurrentUser(''));\n          //   const path = `${appRoot}/login`; \n          //   history.push(path);\n          // }\n        }\n      }\n    });\n  };\n\n  const nextPage = () => {\n      const paging = page + 1;\n      // console.log(values.searchField);\n      if(values.searchField != '') {\n        findUsers(paging,values.searchField);\n      }else{\n        getAllUsers(paging);\n      }\n  };\n\n  const prevPage = () => {\n      let paging = 0;\n      if(page == 1) {\n          paging = page;\n      }else{\n          paging = page - 1;\n      }\n      // console.log(values.searchField);\n      if(values.searchField != '') {\n        findUsers(paging,values.searchField);\n      }else{\n        getAllUsers(paging);\n      }\n  };\n\n  useEffect(() => {\n    getAllUsers(page);\n  }, []);\n\n\n  const onSubmit = (values) => {\n    // console.log(values.searchField);\n    findUsers(page,values.searchField);\n  }\n\n  const clickRows = (val) => {\n      // console.log(val);;\n      const path = `${appRoot}/setting/usersetting/upduser`; \n        // console.log(path);\n      history.push(path,{\n          name: val.name,\n          flag_active: val.flag_active,\n          createdAt: val.createdAt,\n          updatedAt: val.updatedAt,\n          role: val.role,\n          role_name: val.role_name,\n          firstname: val.firstName != null ? val.firstName: '',\n          lastname: val.lastName != null ? val.lastName: '',\n          id_area: val.id_area,\n          desc_area: val.desc_area,\n          id_sub_area: val.id_sub_area,\n          desc_sub_area: val.desc_sub_area,\n      });\n  };\n\n  const initialValues = { searchField: '' };\n  const validationSchema = Yup.object().shape({\n    // searchField: Yup.string().required('Search is required'),\n  });\n  const formik = useFormik({ initialValues, validationSchema, onSubmit });\n  const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n  useCustomLayout({ placement: MENU_PLACEMENT.Vertical, layout: LAYOUT.Boxed });\n\n  if (isLoading) {\n    return <div className=\"App\">Loading...</div>;\n  }\n  \n  return (\n    <>\n      <HtmlHead title={title} description={description} />\n      <Row>\n        <Col>\n          <section className=\"scroll-section\" id=\"title\">\n            <Row className=\"g-0\">\n              {/* Title Start */}\n              <Col xs=\"auto\" className=\"mb-2 mb-md-0 me-auto\">\n                <div className=\"page-title-container\">\n                  <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                  <BreadcrumbList items={breadcrumbs} />\n                </div>\n              </Col>\n              <div className=\"w-100 d-md-none\" />\n              <Col xs=\"12\" sm=\"6\" md=\"auto\" className=\"d-flex align-items-start justify-content-end order-3 order-sm-2\">\n                <div className=\"g-0 row mb-3\">\n                    <div className=\"d-flex align-items-start justify-content-end justify-content-lg-start col-md col-12\">\n                        <form id=\"searchForm\" className=\"tooltip-end-bottom me-lg-auto w-md-auto search-input-container border border-separator col-12\" onSubmit={handleSubmit}>\n                        <div className=\"input-group\">\n                        <Form.Control id=\"searchField\" className=\"\" placeholder=\"Search\" value={values.searchField} onChange={handleChange} />\n                        <button id=\"button-addon\" type=\"submit\" className=\"btn btn-outline-secondary\">\n                            <span className=\"search-magnifier-icon pe-none\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"cs-icon search \">\n                                <circle cx=\"9\" cy=\"9\" r=\"7\"> </circle>\n                                <path d=\"M14 14L17.5 17.5\"> </path>\n                                </svg>\n                            </span>\n                        </button>\n                        </div>\n                        </form> \n                    </div>\n                </div> \n              </Col>\n            </Row>\n            {/* <section className=\"scroll-section\" id=\"responsiveVertical\"> */}\n            <h2 className=\"small-title\">List Users</h2>\n            <Row className=\"mb-5\">\n              <Col>\n                <div className=\"display-data-Container\">\n                    {ds.map((row, idx) => {\n                      delete row.pass;\n                      return(\n                        <RowInd \n                          key={idx}\n                          name={row.name}\n                          firstname={row.firstName}\n                          role={row.role_name}\n                          area={row.desc_area}\n                          subarea={row.desc_sub_area}\n                          createDate={row.createdAt}\n                          onClick={(e) => clickRows(row)}\n                        /> \n                      )\n                    })\n                    }\n                </div>\n              </Col>\n            </Row>\n            <div className=\"mb-5\">\n              <nav>\n                <Pagination className=\"justify-content-center\">\n                    <Pagination.Prev className=\"shadow\" onClick={() => prevPage()}>\n                        <CsLineIcons icon=\"chevron-left\" />\n                    </Pagination.Prev>\n                    <Pagination.Item className=\"shadow\" disabled>{page}</Pagination.Item>\n                    <Pagination.Next className=\"shadow\" onClick={() => nextPage()}>\n                        <CsLineIcons icon=\"chevron-right\" />\n                    </Pagination.Next>\n                </Pagination>\n              </nav>\n            </div>\n          </section>\n          {/* Title End */}\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default UserSettingPage;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/area/AreaSetting.js",["431","432","433","434","435","436","437","438","439","440","441","442"],"import {React,useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Card, Form , Button, Pagination} from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport useCustomLayout from 'hooks/useCustomLayout';\nimport { MENU_PLACEMENT, LAYOUT } from 'constants.js';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { GetAllAreas, FindAreas } from '../../services/areaservice';\nimport { DEFAULT_PATHS } from '../../config';\n\nconst RowInd = function(propss){\n    const {idarea, idsubarea, descarea, descsubarea, idparentarea, descparentarea, active, onClick} = propss;\n\n    // const newDate= new Date(createDate); \n    // const cratedString = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(newDate);\n    // console.log(cratedString)\n    // console.log('act',active);\n    return (\n      <Card className=\"mb-2\">\n      <Row className=\"g-0 h-auto sh-sm-19 sh-lg-9\">\n        <Col xs=\"12\" sm=\"auto\">\n          <img src=\"/img/logo/map.gif\" className=\"card-img card-img-horizontal-sm rounded-xl sh-10 h-sm-100 sw-lg-9 sw-sm-12\" alt=\"thumb\" />\n        </Col>\n        <Col xs=\"12\" className=\"col-sm\">\n          <Card.Body className=\"pt-sm-0 pb-sm-0 h-100\">\n            <Row className=\"g-0 h-100 align-content-center\">\n              <Col lg=\"3\" xs=\"6\" sm=\"6\" className=\"d-flex flex-column mb-lg-0 mb-3 mb-lg-0 pe-3 d-flex\">\n                  <div className=\"lh-1\">{descarea}</div>\n                  <div className=\"text-small text-muted text-truncate\">Region Area</div>\n              </Col>\n              <Col lg=\"3\" sm=\"6\" xs=\"6\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 \">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{descparentarea}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Parents Area</div>\n              </Col>\n              <Col lg=\"3\" xs=\"6\" sm=\"6\" className=\"d-flex flex-column mb-lg-0 mb-3 mb-lg-0 pe-3 d-flex\">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{descsubarea}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Sub Area</div>\n              </Col>\n              <Col lg=\"2\" sm=\"5\" xs=\"4\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{active == \"1\" ? 'Active' : 'Not Active'}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Flag Active</div>\n              </Col>\n              <Col lg=\"1\" sm=\"1\" xs=\"1\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <Button size=\"sm\" variant=\"outline-muted\" className=\"btn-icon btn-icon-only hover-outline\" onClick={onClick}>\n                  <CsLineIcons icon=\"edit-square\" />\n                </Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Col>\n      </Row>\n    </Card>\n    );\n}\n\nconst AreaSettingPage = () => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const title = 'Area Setting Page';\n    const description = 'List of Areas.';\n    const breadcrumbs = [{ to: '', text: 'Home' }];\n    useCustomLayout({ placement: MENU_PLACEMENT.Vertical, layout: LAYOUT.Boxed });\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n\n    const rowsId = [];\n    // const [rowState, setRowState] = useState(rowsId);\n    const [ds, getAreas] = useState(rowsId);\n    const [isLoading, setLoading] = useState(true);\n    const [page, setPage] = useState(1);\n\n    const getAllAreas = (paging) => {\n        setLoading(true);\n        let result = null;\n        // console.log(paging);\n        GetAllAreas(currentUser.token, paging).then(function(response) {\n          if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n              toast.success(response.responseDesc, {\n                position: \"top-right\",\n                autoClose: 1000,\n              });\n              // console.log(response.responseData);\n              result = response.responseData;\n              getAreas(result);\n              setLoading(false);\n              setPage(paging);\n            }else{  \n              toast.error(response.responseDesc, {\n                position: \"top-right\",\n                autoClose: 5000,\n              });\n              \n              setLoading(false);\n              // if(response.responseCode === 401) {\n              //   // dispatch(setCurrentUser(''));\n              //   const path = `${appRoot}/login`; \n              //   history.push(path);\n              // }\n            }\n          }\n        });\n    };\n\n    const findAreas = (paging,search) => {\n      setLoading(true);\n      let result = null;\n      if(search == \"\") {\n        getAllAreas(paging);\n      }else{\n        FindAreas(currentUser.token, paging, search).then(function(response) {\n          if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n              toast.success(response.responseDesc, {\n                position: \"top-right\",\n                autoClose: 1000,\n              });\n              // console.log(response.responseData);\n              result = response.responseData;\n              getAreas(result);\n              setLoading(false);\n            }else{  \n              toast.error(response.responseDesc, {\n                position: \"top-right\",\n                autoClose: 5000,\n              });\n              \n              setLoading(false);\n              // if(response.responseCode === 401) {\n              //   // dispatch(setCurrentUser(''));\n              //   const path = `${appRoot}/login`; \n              //   history.push(path);\n              // }\n            }\n          }\n        });\n      }\n    };\n\n    const addAreaClick = () => {\n      const path = `${appRoot}/setting/areasetting/addarea`; \n          // console.log(path);\n        history.push(path);\n    };\n\n    const clickRows = (val) => {\n        // console.log(val);\n        const path = `${appRoot}/setting/areasetting/editarea`; \n          // console.log(path);\n        history.push(path,{\n            idarea: val.id_area,\n            idsubarea: val.id_sub_area,\n            descarea: val.desc_area,\n            descsubarea: val.desc_sub_area,\n            idparentarea: val.id_parent_area,\n            descparentarea: val.desc_parent_area == null ? '' : val.desc_parent_area,\n            active: val.active,\n        });\n    };\n\n    const onSubmit = (values) => {\n        // console.log(values);\n        // console.log(paging);\n        findAreas(page,values.searchField);\n    };\n\n    const nextPage = () => {\n        const paging = page + 1;\n        // console.log(values.searchField);\n        if(values.searchField != '') {\n          findAreas(paging,values.searchField);\n        }else{\n          getAllAreas(paging);\n        }\n    };\n\n    const prevPage = () => {\n        let paging = 0;\n        if(page == 1) {\n            paging = page;\n        }else{\n            paging = page - 1;\n        }\n        // console.log(values.searchField);\n        if(values.searchField != '') {\n          findAreas(paging,values.searchField);\n        }else{\n          getAllAreas(paging);\n        }\n    };\n\n    const initialValues = { searchField: '' };\n    const validationSchema = Yup.object().shape({\n        // searchField: Yup.string().required('Search is required'),\n    });\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    useEffect(() => {\n        getAllAreas(page);\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n\n    return (\n        <>\n        <HtmlHead title={title} description={description} />\n        <Row>\n            <Col>\n                <section className=\"scroll-section\" id=\"title\">\n                {/* Title Start */}\n                <Row className=\"g-0\">\n                    <Col xs=\"auto\" className=\"mb-2 mb-md-0 me-auto\">\n                        <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                        </div>\n                    </Col>\n                    {/* Title End */}\n                    <div className=\"w-100 d-md-none\" />\n                    {/* <Col>\n                    <Card className=\"mb-5\" body> */}\n                    <Col xs=\"12\" sm=\"6\" md=\"auto\" className=\"d-flex align-items-start justify-content-end order-3 order-sm-2\">\n                        <div className=\"g-0 row mb-3\">\n                            <div className=\"d-flex align-items-start justify-content-end justify-content-lg-start col-md col-12\">\n                                <form id=\"searchForm\" className=\"tooltip-end-bottom me-lg-auto w-md-auto search-input-container border border-separator col-12\" onSubmit={handleSubmit}>\n                                    <div className=\"input-group\">\n                                        <Form.Control id=\"searchField\" className=\"\" placeholder=\"Search\" value={values.searchField} onChange={handleChange} />\n                                        <button id=\"button-addon\" type=\"submit\" className=\"btn btn-outline-secondary\">\n                                            <span className=\"search-magnifier-icon pe-none\">\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"cs-icon search \">\n                                                <circle cx=\"9\" cy=\"9\" r=\"7\"> </circle>\n                                                <path d=\"M14 14L17.5 17.5\"> </path>\n                                                </svg>\n                                            </span>\n                                        </button>\n                                        <button id=\"button-addon\" type=\"submit\" className=\"btn btn-outline-warning\" onClick={()=>addAreaClick()} >\n                                          <CsLineIcons icon=\"plus\" className=\"me-2\" size=\"17\" />\n                                        </button>\n                                    </div>\n                                </form> \n                            </div>\n                        </div> \n                    </Col>\n                </Row>\n                {/* </Card>\n                </Col> */}\n                <Row>\n                </Row>\n                {/* <section className=\"scroll-section\" id=\"responsiveVertical\"> */}\n                <h2 className=\"small-title\">List Area</h2>\n                <Row className=\"mb-5\">\n                <Col>\n                    <div className=\"display-data-Container\">\n                        {ds.map((row, idx) => {\n                            delete row.pass;\n                            return(\n                                <RowInd \n                                key={idx}\n                                idarea={row.id_area}\n                                idsubarea={row.id_sub_area}\n                                descarea={row.desc_area}\n                                descsubarea={row.desc_sub_area}\n                                idparentarea={row.id_parent_area}\n                                descparentarea={row.desc_parent_area}\n                                active={row.active}\n                                onClick={(e) => clickRows(row)}\n                                /> \n                            )\n                        })\n                        }\n                    </div>\n                </Col>\n                </Row>\n                <div className=\"mb-5\">\n                  <nav>\n                    <Pagination className=\"justify-content-center\">\n                        <Pagination.Prev className=\"shadow\" onClick={() => prevPage()}>\n                            <CsLineIcons icon=\"chevron-left\" />\n                        </Pagination.Prev>\n                        <Pagination.Item className=\"shadow\" disabled>{page}</Pagination.Item>\n                        <Pagination.Next className=\"shadow\" onClick={() => nextPage()}>\n                            <CsLineIcons icon=\"chevron-right\" />\n                        </Pagination.Next>\n                    </Pagination>\n                  </nav>\n                </div>\n                </section>\n            </Col>\n        </Row>\n    </>\n  );\n};\n\nexport default AreaSettingPage;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/user/EditUser.js",["443","444","445","446","447","448","449","450","451","452","453","454"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Button, Row, Col, Card, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport Select from 'react-select';\n// import DatePicker from 'react-datepicker';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useFormik, Formik, Field } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\n// import CsLineIcons from 'cs-line-icons/CsLineIcons';\n// import useCustomLayout from 'hooks/useCustomLayout';\nimport 'react-datepicker/dist/react-datepicker.css';\n// import { useWindowSize } from 'hooks/useWindowSize';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_PATHS } from '../../config';\nimport { GetParentAreasSelection, GetAllAreasSelection } from '../../services/areaservice';\nimport { ManageUser } from '../../services/userservice';\nimport { LAYOUT } from '../../constants';\n\nconst EditUser = (props) => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const states = props;\n    const user = states.location.state;\n    // console.log(user);\n    const ref = useRef(null);\n    const [isChecked, setIsChecked] = useState(null);\n\n    const title = 'Update User';\n    const description = 'An page for update the user.';\n    const breadcrumbs = [\n        { to: ``, text: 'Home' },\n        { to: `setting/usersetting`, text: 'User Setting' },\n    ];\n\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const [isLoading, setLoading] = useState(true);\n    const options = [];\n    const [valueArea, setValueArea] = useState();\n    const [opt, setOpt] = useState(options);\n    const [valueSubArea, setValueSubArea] = useState();\n    const [optSub, setOptSub] = useState(options);\n    const optionsRole = [\n        { value : 1, label : \"superadmin\" },\n        { value : 2, label : \"admin\" },\n        { value : 3, label : \"editor\" },\n        { value : 4, label : \"viewer\" },\n    ];\n    const [optRole, setOptRole] = useState(optionsRole);\n    const [valueRole, setValueRole] = useState();\n\n    const getAllArea = () => {\n        setLoading(true);\n        let result = null;\n        GetParentAreasSelection(currentUser.token, user.id_area).then(function(response) {\n            if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 1000,\n                });\n                const objSelected = {\n                    value: user.id_area,\n                    label: user.desc_area,\n                };\n                setValueArea(objSelected);\n                // result = response.responseData;\n                setOpt(response.responseData);\n                setLoading(false);\n                const selectedRole = {\n                    value : user.role,\n                    label : user.role_name,\n                };\n                setValueRole(selectedRole);\n            }else{  \n                toast.error(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                });\n                setLoading(false);\n\n                // if(response.responseCode === 401) {\n                //   // dispatch(setCurrentUser(''));\n                //   const path = `${appRoot}/login`; \n                //   history.push(path);\n                // }\n            }\n            }\n        });\n    };\n\n    const getSubArea = (area,sub_area,desc_sub_area) => {\n        setLoading(true);\n        let result = null;\n        GetAllAreasSelection(currentUser.token, area, sub_area).then(function(response) {\n            if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 1000,\n                });\n                // if(area == user.id_area) {\n                    const objSelected = {\n                        value: sub_area,\n                        label: desc_sub_area,\n                    };\n                    setValueSubArea(objSelected);\n                // }else{\n                //     const objSelected = {\n                //         value: null,\n                //         label: null,\n                //     };\n                //     setValueSubArea(objSelected);\n                // }\n                // result = response.responseData;\n                setOptSub(response.responseData);\n                setLoading(false);\n            }else{  \n                toast.error(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                });\n                setLoading(false);\n\n                // if(response.responseCode === 401) {\n                //   // dispatch(setCurrentUser(''));\n                //   const path = `${appRoot}/login`; \n                //   history.push(path);\n                // }\n            }\n            }\n        });\n    };\n\n    useEffect(() => {\n        getAllArea();\n        const area = user.id_area;\n        const descarea = user.desc_area;\n        const subarea = user.id_sub_area;\n        const descsubarea = user.desc_sub_area;\n        getSubArea(area,subarea,descsubarea);\n    }, []);\n\n    // console.log(user); \n    const initialValues = { \n        name: user.name, \n        flag_active: user.flag_active,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n        role: user.role,\n        role_name: user.role_name,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        id_area: user.id_area,\n        desc_area: user.desc_area,\n        id_sub_area: user.id_sub_area,\n        desc_sub_area: user.desc_sub_area,\n    };\n    const validationSchema = Yup.object().shape({\n        // id: Yup.string().required('Id Title is required'),\n        // title: Yup.string().required('Title is required'),\n        // desc: Yup.string().required('Description is required'),\n        // startDate: Yup.string().required('Start date is required'),\n        // dueDate: Yup.string().required('Due date is required'),\n    });\n    const onSubmit = (values) => {\n        let act = \"0\";\n        if (ref.current.checked) {\n            act = \"1\";\n        } \n        // console.log(values);\n        ManageUser(currentUser.token,values.name,values.name,values.firstname,values.lastname,valueRole.value,valueArea.value,valueSubArea.value,act).then(function(response) {\n            if(response) {\n              console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const path = `${appRoot}/setting/usersetting`; \n                history.push(path);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n              }\n            }\n        });\n    };\n    const handleClickBackButton = () => {\n        const path = `${appRoot}/setting/usersetting`; \n        // console.log(path);\n        history.push(path);\n    };\n    const handleChecked = () => {\n        setIsChecked(!isChecked);\n    };\n    const changeArea = event => {\n        console.log(event.value);\n        const objSelected = {\n            value: event.value,\n            label: event.label,\n        };\n        setValueArea(objSelected);\n        const area = event.value;\n        const descarea = event.label;\n        const subarea = event.value;\n        const descsubarea = event.label;\n        getSubArea(area,subarea,descsubarea);\n    };\n\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"App\" style={{  }}>\n            <HtmlHead title={title} description={description} />\n            <Row>\n                <Col>\n                    {/* Title Start */}\n                    <section className=\"scroll-section\" id=\"title\">\n                    <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </div>\n                    </section>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h2 className=\"small-title\">Node Info</h2>\n                    <Form id=\"loginForm\" className=\"tooltip-end-bottom\" onSubmit={handleSubmit}>\n                    <Card className=\"mb-2\">\n                        <Card.Body className=\"p-3\">\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">User Name</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"name\" id=\"name\" value={values.name}  onChange={handleChange} readOnly={1}/>\n                                    {errors.name  && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">First Name</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"firstname\" id=\"firstname\" value={values.firstname}  onChange={handleChange}/>\n                                    {errors.firstname  && touched.firstname && <div className=\"d-block invalid-tooltip\">{errors.firstname}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Last Name</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"lastname\" id=\"lastname\" value={values.lastname}  onChange={handleChange}/>\n                                    {errors.lastname  && touched.lastname && <div className=\"d-block invalid-tooltip\">{errors.lastname}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Role</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Select classNamePrefix=\"react-select\" options={optRole} value={valueRole} onChange={setValueRole} placeholder=\"\" />\n                                    {/* {errors.role_name  && touched.role_name && <div className=\"d-block invalid-tooltip\">{errors.role_name}</div>} */}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"3\">\n                                    <Form.Label className=\"col-form-label\">Area</Form.Label>\n                                </Col>\n                                <Col lg=\"4\" md=\"9\" sm=\"9\" >\n                                    <Select classNamePrefix=\"react-select\" options={opt} value={valueArea} onChange={changeArea} placeholder=\"\" />\n                                    {/* {errors.desc_area  && touched.desc_area && <div className=\"d-block invalid-tooltip\">{errors.desc_area}</div>} */}\n                                </Col>\n                                <Col lg=\"2\" md=\"3\" sm=\"3\">\n                                    <Form.Label className=\"col-form-label\">Sub Area</Form.Label>\n                                </Col>\n                                <Col lg=\"4\" sm=\"4\" md=\"9\" >\n                                    <Select classNamePrefix=\"react-select\" options={optSub} value={valueSubArea} onChange={setValueSubArea} placeholder=\"\" />\n                                    {/* {errors.desc_sub_area  && touched.desc_sub_area && <div className=\"d-block invalid-tooltip\">{errors.desc_sub_area}</div>} */}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Flag Active</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Check ref={ref} type=\"checkbox\" className=\"mt-2\" label=\"active\" id=\"status\" name=\"status\" checked={isChecked !== null ? isChecked : values.flag_active} onChange={() => handleChecked()}/>\n                                    {errors.status  && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-5\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <div className=\"btn-group\">\n                                        <Button type=\"submit\" variant=\"outline-primary\" className=\"mb-1\">Submit</Button>\n                                        <Button id=\"backButton\" name=\"backButton\" type=\"button\" variant=\"outline-warning\" className=\"mb-1\" onClick={() => handleClickBackButton()}>Back</Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                    </Form>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default EditUser;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/area/AddArea.js",["455","456","457","458","459","460","461","462","463"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Button, Row, Col, Card, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport Select from 'react-select';\nimport Autosuggest from 'react-autosuggest';\n// import DatePicker from 'react-datepicker';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useFormik, Formik, Field } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\n// import CsLineIcons from 'cs-line-icons/CsLineIcons';\n// import useCustomLayout from 'hooks/useCustomLayout';\nimport 'react-datepicker/dist/react-datepicker.css';\n// import { useWindowSize } from 'hooks/useWindowSize';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_PATHS } from '../../config';\nimport { GetAllAreasSelection, AddAreaService } from '../../services/areaservice';\nimport { LAYOUT } from '../../constants';\n\nconst AddArea = (props) => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const states = props;\n    const area = states.location.state;\n    const ref = useRef(null);\n    const [isChecked, setIsChecked] = useState(false);\n\n    const title = 'Add New Area Page';\n    const description = 'An page for adding new area.';\n    const breadcrumbs = [\n        { to: ``, text: 'Home' },\n        { to: `setting/areasetting`, text: 'Area Setting' },\n    ];\n\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const id_area = currentUser.id_area;\n    const desc_area = currentUser.desc_area;\n    // console.log(currentUser);\n    const [isLoading, setLoading] = useState(true);\n    const options = [];\n    const [optParent, setOptParent] = useState(options);\n    const [valueParent, setValueParent] = useState();\n\n    const fetchParentArea = () => {\n        setLoading(true);\n        GetAllAreasSelection(currentUser.token,id_area,desc_area).then(function(response) {\n            if(response) {\n            //   console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                // const objSelected = {\n                //     value: area.idparentarea,\n                //     label: area.descparentarea,\n                // };\n                // setValueParent(objSelected);\n                setOptParent(response.responseData);\n                setLoading(false);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n                setLoading(false);\n              }\n            }\n        });\n    };\n\n    const initialValues = { \n        desc_area: currentUser.desc_area, \n        id_area: currentUser.id_area,\n        desc_parent_area: '',\n        desc_sub_area: '',\n    };\n    const validationSchema = Yup.object().shape({\n        desc_area: Yup.string().required('Area Region is required'),\n        desc_sub_area: Yup.string().required('Sub Area is required'),\n    });\n    const onSubmit = (values) => {\n        console.log(values);\n        let act = \"0\";\n        if (ref.current.checked) {\n            act = \"1\";\n        } \n        AddAreaService(currentUser.token,currentUser.id_area,currentUser.desc_area,values.desc_sub_area,valueParent.value,act).then(function(response) {\n            if(response) {\n              console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const path = `${appRoot}/setting/areasetting`; \n                history.push(path);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n              }\n            }\n        });\n    };\n    const handleClickBackButton = () => {\n        const path = `${appRoot}/setting/areasetting`; \n        history.push(path);\n    };\n    const handleChecked = () => {\n        setIsChecked(!isChecked);\n    };\n\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    useEffect(() => {\n        fetchParentArea();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n    return (\n        <div className=\"App\" style={{  }}>\n            <HtmlHead title={title} description={description} />\n            <Row>\n                <Col>\n                    {/* Title Start */}\n                    <section className=\"scroll-section\" id=\"title\">\n                    <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </div>\n                    </section>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h2 className=\"small-title\">Area Info</h2>\n                    <Form id=\"loginForm\" className=\"tooltip-end-bottom\" onSubmit={handleSubmit}>\n                    <Card className=\"mb-2\">\n                        <Card.Body className=\"p-3\">\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Region Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"desc_area\" id=\"desc_area\" value={values.desc_area}  onChange={handleChange} readOnly={1}/>\n                                    {errors.desc_area  && touched.desc_area && <div className=\"d-block invalid-tooltip\">{errors.desc_area}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Parent Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    {/* <Form.Control type=\"text\" name=\"desc_parent_area\" id=\"desc_parent_area\" value={values.desc_parent_area}  onChange={handleChange} readOnly={values.id_sub_area == 1? 1 : 0}/> */}\n                                    <Select classNamePrefix=\"react-select\" name=\"desc_parent_area\" id=\"desc_parent_area\" options={optParent} value={valueParent} onChange={setValueParent} placeholder=\"\" />\n                                    {errors.desc_parent_area  && touched.desc_parent_area && <div className=\"d-block invalid-tooltip\">{errors.desc_parent_area}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Sub Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"desc_sub_area\" id=\"desc_sub_area\" value={values.desc_sub_area}  values={values.desc_sub_area} onChange={handleChange}/>\n                                    {errors.desc_sub_area  && touched.desc_sub_area && <div className=\"d-block invalid-tooltip\">{errors.desc_sub_area}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Flag Active</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Check ref={ref} type=\"checkbox\" className=\"mt-2\" label=\"active\" id=\"status\" name=\"status\" checked={isChecked} onChange={() => handleChecked()}/>\n                                    {errors.status  && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-5\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <div className=\"btn-group\">\n                                        <Button type=\"submit\" variant=\"outline-primary\" className=\"mb-1\">Submit</Button>\n                                        <Button id=\"backButton\" name=\"backButton\" type=\"button\" variant=\"outline-warning\" className=\"mb-1\" onClick={() => handleClickBackButton()}>Back</Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                    </Form>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default AddArea;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/area/EditArea.js",["464","465","466","467","468","469","470","471"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Button, Row, Col, Card, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport Select from 'react-select';\nimport Autosuggest from 'react-autosuggest';\n// import DatePicker from 'react-datepicker';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useFormik, Formik, Field } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\n// import CsLineIcons from 'cs-line-icons/CsLineIcons';\n// import useCustomLayout from 'hooks/useCustomLayout';\nimport 'react-datepicker/dist/react-datepicker.css';\n// import { useWindowSize } from 'hooks/useWindowSize';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_PATHS } from '../../config';\nimport { EditAreas, GetAllAreasSelection } from '../../services/areaservice';\nimport { LAYOUT } from '../../constants';\n\nconst EditArea = (props) => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const states = props;\n    const area = states.location.state;\n    const ref = useRef(null);\n    const [isChecked, setIsChecked] = useState(null);\n    const [value, setValue] = useState();\n\n    const title = 'Update Area Page';\n    const description = 'An page for update the area.';\n    const breadcrumbs = [\n        { to: ``, text: 'Home' },\n        { to: `setting/areasetting`, text: 'Area Setting' },\n    ];\n\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n\n    const [isLoading, setLoading] = useState(true);\n    const options = [];\n    const [opt, setOpt] = useState(options);\n\n    const initialValues = { \n        id_area: area.idarea,\n        desc_area: area.descarea,\n        id_sub_area: area.idsubarea,\n        desc_sub_area: area.descsubarea,\n        id_parent_area: area.idparentarea,\n        desc_parent_area: area.descparentarea,\n        active: area.active,\n    };\n    const validationSchema = Yup.object().shape({\n        id_area: Yup.string().required('Area is required'),\n        desc_sub_area: Yup.string().required('Sub Area is required'),\n        desc_parent_area: Yup.string().required('Parent Area is required'),\n    });\n\n    const fetchArea = () => {\n        setLoading(true);\n        GetAllAreasSelection(currentUser.token,area.idarea,area.idsubarea).then(function(response) {\n            if(response) {\n              console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const objSelected = {\n                    value: area.idparentarea,\n                    label: area.descparentarea,\n                };\n                setValue(objSelected);\n                setOpt(response.responseData);\n                setLoading(false);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n                setLoading(false);\n              }\n            }\n        });\n    };\n    const onSubmit = (values) => {\n        // console.log(value.value);\n        let act = \"0\";\n        if (ref.current.checked) {\n            act = \"1\";\n        } \n        EditAreas(currentUser.token,values.id_area,values.id_sub_area,values.desc_sub_area,value.value,act).then(function(response) {\n            if(response) {\n              console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const path = `${appRoot}/setting/areasetting`; \n                history.push(path);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n              }\n            }\n        });\n    };\n    const handleClickBackButton = () => {\n        const path = `${appRoot}/setting/areasetting`; \n        // console.log(path);\n        history.push(path);\n    };\n    const handleChecked = () => {\n        setIsChecked(!isChecked);\n    }\n\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    useEffect(() => {\n        fetchArea();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"App\" style={{  }}>\n            <HtmlHead title={title} description={description} />\n            <Row>\n                <Col>\n                    {/* Title Start */}\n                    <section className=\"scroll-section\" id=\"title\">\n                    <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </div>\n                    </section>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h2 className=\"small-title\">Node Info</h2>\n                    <Form id=\"loginForm\" className=\"tooltip-end-bottom\" onSubmit={handleSubmit}>\n                    <Card className=\"mb-2\">\n                        <Card.Body className=\"p-3\">\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Region Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"name\" id=\"name\" value={values.desc_area}  onChange={handleChange} readOnly={1}/>\n                                    {errors.desc_area  && touched.desc_area && <div className=\"d-block invalid-tooltip\">{errors.desc_area}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Parent Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    {/* <Form.Control type=\"text\" name=\"desc_parent_area\" id=\"desc_parent_area\" value={values.desc_parent_area}  onChange={handleChange} readOnly={values.id_sub_area == 1? 1 : 0}/> */}\n                                    <Select classNamePrefix=\"react-select\" options={opt} value={value} onChange={setValue} placeholder=\"\" />\n                                    {errors.desc_parent_area  && touched.desc_parent_area && <div className=\"d-block invalid-tooltip\">{errors.desc_parent_area}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Sub Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"desc_sub_area\" id=\"desc_sub_area\" value={values.desc_sub_area}  values={values.desc_sub_area} onChange={handleChange}/>\n                                    {errors.desc_sub_area  && touched.desc_sub_area && <div className=\"d-block invalid-tooltip\">{errors.desc_sub_area}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Flag Active</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Check ref={ref} type=\"checkbox\" className=\"mt-2\" label=\"active\" id=\"status\" name=\"status\" checked={isChecked !== null ? isChecked : values.active} onChange={() => handleChecked()}/>\n                                    {errors.status  && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-5\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <div className=\"btn-group\">\n                                        <Button type=\"submit\" variant=\"outline-primary\" className=\"mb-1\">Submit</Button>\n                                        <Button id=\"backButton\" name=\"backButton\" type=\"button\" variant=\"outline-warning\" className=\"mb-1\" onClick={() => handleClickBackButton()}>Back</Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                    </Form>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default EditArea;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/cluster/EditCluster.js",["472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Button, Row, Col, Card, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport Select from 'react-select';\n// import DatePicker from 'react-datepicker';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useFormik, Formik, Field } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\n// import CsLineIcons from 'cs-line-icons/CsLineIcons';\n// import useCustomLayout from 'hooks/useCustomLayout';\nimport 'react-datepicker/dist/react-datepicker.css';\n// import { useWindowSize } from 'hooks/useWindowSize';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_PATHS } from '../../config';\nimport { GetParentAreasSelection, GetAllAreasSelection } from '../../services/areaservice';\nimport { EditClusterService } from '../../services/clusterservice';\nimport { LAYOUT } from '../../constants';\n\nconst EditCluster = (props) => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const states = props;\n    const area = states.location.state;\n    console.log(area);\n    const ref = useRef(null);\n    const [isChecked, setIsChecked] = useState(true);\n\n    const title = 'Add New Cluster';\n    const description = 'An page for adding new cluster.';\n    const breadcrumbs = [\n        { to: ``, text: 'Home' },\n        { to: `setting/clustersetting`, text: 'Cluster Setting' },\n    ];\n\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const id_area = currentUser.id_area;\n    const desc_area = currentUser.desc_area;\n\n    const [isLoading, setLoading] = useState(true);\n    const options = [];\n    const [optParent, setOptParent] = useState(options);\n    const [opt, setOpt] = useState(options);\n    const [valueParent, setValueParent] = useState();\n    const [valueArea, setValueArea] = useState();\n    const [valueSubArea, setValueSubArea] = useState();\n    const [optSub, setOptSub] = useState(options);\n\n    const indik = area !== undefined && area.idsubareas !== null && area.idsubareas !== \"\" ? JSON.parse(area.idsubareas) : [];\n    const rowsId = [];\n    // console.log(indik);\n    indik.forEach((el) => {\n        const obj = {value:el.id_sub_area};\n        rowsId.push(obj);\n    });\n    // setRowState(rowsId);\n    const [rowState, setRowState] = useState(rowsId);\n\n    const fetchParentArea = () => {\n        setLoading(true);\n        GetParentAreasSelection(currentUser.token,currentUser.id_area).then(function(response) {\n            if(response) {\n            //   console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const objSelected = {\n                    value: area.idarea,\n                    label: area.descarea,\n                };\n                setValueArea(objSelected);\n                setOptParent(response.responseData);\n                setLoading(false);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n                setLoading(false);\n              }\n            }\n        });\n    };\n\n    const getSubArea = (area,sub_area,desc_sub_area) => {\n        setLoading(true);\n        let result = null;\n        GetAllAreasSelection(currentUser.token, area, sub_area).then(function(response) {\n            if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 1000,\n                });\n                // if(area == user.id_area) {\n                    const objSelected = {\n                        value: sub_area,\n                        label: desc_sub_area,\n                    };\n                    setValueSubArea(objSelected);\n                // }else{\n                //     const objSelected = {\n                //         value: null,\n                //         label: null,\n                //     };\n                //     setValueSubArea(objSelected);\n                // }\n                // result = response.responseData;\n                // console.log(response.responseData);\n                setOptSub(response.responseData);\n                setLoading(false);\n            }else{  \n                toast.error(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                });\n                setLoading(false);\n\n                // if(response.responseCode === 401) {\n                //   // dispatch(setCurrentUser(''));\n                //   const path = `${appRoot}/login`; \n                //   history.push(path);\n                // }\n            }\n            }\n        });\n    };\n\n    const initialValues = { \n        nama_cluster: area.namacluster,\n    };\n    const validationSchema = Yup.object().shape({\n        // desc_area: Yup.string().required('Area Region is required'),\n        // desc_sub_area: Yup.string().required('Sub Area is required'),\n    });\n    const onSubmit = (values) => {\n        console.log(values);\n        let act = \"0\";\n        if (ref.current.checked) {\n            act = \"1\";\n        } \n        const subAreas = [];\n        EditClusterService(currentUser.token,area.idCluster,values.nama_cluster,valueArea.value,subAreas,act,new Date()).then(function(response) {\n            if(response) {\n              console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const path = `${appRoot}/setting/clustersetting`; \n                history.push(path);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n              }\n            }\n        });\n    };\n    const handleClickBackButton = () => {\n        const path = `${appRoot}/setting/clustersetting`; \n        history.push(path);\n    };\n    const handleChecked = () => {\n        setIsChecked(!isChecked);\n    };\n\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    useEffect(() => {\n        fetchParentArea();\n        const area = currentUser.id_area;\n        const subarea = currentUser.id_sub_area;\n        const descsubarea = currentUser.desc_sub_area;\n        getSubArea(area,subarea,descsubarea);\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n    return (\n        <div className=\"App\" style={{  }}>\n            <HtmlHead title={title} description={description} />\n            <Row>\n                <Col>\n                    {/* Title Start */}\n                    <section className=\"scroll-section\" id=\"title\">\n                    <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </div>\n                    </section>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h2 className=\"small-title\">Cluster Info</h2>\n                    <Form id=\"loginForm\" className=\"tooltip-end-bottom\" onSubmit={handleSubmit}>\n                    <Card className=\"mb-2\">\n                        <Card.Body className=\"p-3\">\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Cluster Name</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"nama_cluster\" id=\"nama_cluster\" value={values.nama_cluster}  onChange={handleChange}/>\n                                    {errors.nama_cluster  && touched.nama_cluster && <div className=\"d-block invalid-tooltip\">{errors.nama_cluster}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    {/* <Form.Control type=\"text\" name=\"desc_parent_area\" id=\"desc_parent_area\" value={values.desc_parent_area}  onChange={handleChange} readOnly={values.id_sub_area == 1? 1 : 0}/> */}\n                                    <Select classNamePrefix=\"react-select\" name=\"desc_area\" id=\"desc_area\" options={optParent} value={valueArea} onChange={setValueArea} placeholder=\"\" />\n                                    {errors.desc_area  && touched.desc_area && <div className=\"d-block invalid-tooltip\">{errors.desc_area}</div>}\n                                </Col>\n                            </Row>\n                            {/* <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Sub Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">  \n                                    <InputGroup>\n                                        <Button variant=\"outline-primary\" onClick={() => handleClickAddButton()}> \n                                            <CsLineIcons icon=\"plus\" />\n                                        </Button>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                            <div className=\"display-data-Container\">\n                                {rowState.map((row, idx) => {\n                                        return(\n                                            <RowInd \n                                            key={idx}\n                                            value={row.value}\n                                            opt={optSub}\n                                            valueSubArea={valueSubArea}\n                                            setValueSubArea={setValueSubArea}\n                                            onChange={(e) => updateValue(e, idx)} \n                                            onDelete={(e) => deleteRows(row.value)}\n                                            /> \n                                        )\n                                    })\n                                }\n                            </div> */}\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Flag Active</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Check ref={ref} type=\"checkbox\" className=\"mt-2\" label=\"active\" id=\"status\" name=\"status\" checked={isChecked} onChange={() => handleChecked()}/>\n                                    {errors.status  && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-5\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <div className=\"btn-group\">\n                                        <Button type=\"submit\" variant=\"outline-primary\" className=\"mb-1\">Submit</Button>\n                                        <Button id=\"backButton\" name=\"backButton\" type=\"button\" variant=\"outline-warning\" className=\"mb-1\" onClick={() => handleClickBackButton()}>Back</Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                    </Form>\n                </Col>\n            </Row>\n        </div>\n    );\n}\nexport default EditCluster;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/cluster/AddCluster.js",["490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Button, Row, Col, Card, Form, InputGroup, Dropdown } from 'react-bootstrap';\nimport Select from 'react-select';\nimport Autosuggest from 'react-autosuggest';\n// import DatePicker from 'react-datepicker';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useFormik, Formik, Field } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\n// import CsLineIcons from 'cs-line-icons/CsLineIcons';\n// import useCustomLayout from 'hooks/useCustomLayout';\nimport 'react-datepicker/dist/react-datepicker.css';\n// import { useWindowSize } from 'hooks/useWindowSize';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_PATHS } from '../../config';\nimport { GetParentAreasSelection, GetAllAreasSelection, AddAreaService } from '../../services/areaservice';\nimport { AddClusterService } from '../../services/clusterservice';\nimport { LAYOUT } from '../../constants';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\n\nconst RowInd = function(propss){\n    const {value, onChange,opt,valueSubArea, setValueSubArea, onDelete} = propss;\n    // console.log(props);\n    return (\n        <Row className=\"mb-2 filled tooltip-end-top\">\n            <Col lg=\"2\" md=\"3\" sm=\"4\"> </Col>\n            <Col lg=\"9\"md=\"8\" sm=\"7\"   height=\"200px\">  \n                {/* <InputGroup> */}\n                    <Select className=\"sm-6 md-6 xs-6\" classNamePrefix=\"react-select\" name=\"id_sub_area\" id=\"id_sub_area\" options={opt} value={valueSubArea} onChange={setValueSubArea} placeholder=\"Sub Area\"/>\n                    {/* <Form.Control name=\"ind\" placeholder=\"Indikator\" aria-label=\"\" value={value} onChange={onChange}/> */}\n                    {/* <Button variant=\"outline-danger\" onClick={onDelete}>\n                        <CsLineIcons icon=\"multiply\" />\n                    </Button> */}\n                {/* </InputGroup> */}\n            </Col>\n            <Col lg=\"1\" md=\"1\" sm=\"1\" height=\"200px\">\n                <Button variant=\"outline-danger\" onClick={onDelete}>\n                    <CsLineIcons icon=\"multiply\" />\n                </Button>\n            </Col>\n        </Row>\n    );\n}\n\nconst AddCluster = (props) => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const states = props;\n    const area = states.location.state;\n    // console.log(area);\n    const ref = useRef(null);\n    const [isChecked, setIsChecked] = useState(true);\n\n    const title = 'Add New Cluster';\n    const description = 'An page for adding new cluster.';\n    const breadcrumbs = [\n        { to: ``, text: 'Home' },\n        { to: `setting/clustersetting`, text: 'Cluster Setting' },\n    ];\n\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const id_area = currentUser.id_area;\n    const desc_area = currentUser.desc_area;\n\n    const [isLoading, setLoading] = useState(true);\n    const options = [];\n    const [optParent, setOptParent] = useState(options);\n    const [opt, setOpt] = useState(options);\n    const [valueParent, setValueParent] = useState();\n    const [valueArea, setValueArea] = useState();\n    const [valueSubArea, setValueSubArea] = useState();\n    const [optSub, setOptSub] = useState(options);\n\n    const indik = area !== undefined && area.id_sub_areas !== null && area.id_sub_areas !== \"\" ? JSON.parse(area.id_sub_areas) : [];\n    const rowsId = [];\n    // console.log(indik);\n    indik.forEach((el) => {\n        const obj = {value:el.id_sub_area};\n        rowsId.push(obj);\n    });\n    // setRowState(rowsId);\n    const [rowState, setRowState] = useState(rowsId);\n\n    const handleClickAddButton = () => {\n        const rows = [...rowState];\n        // rows = rowState;\n        rows.push({value:''});\n        // console.log('click button',rows);\n        setRowState(rows);\n        // console.log(newrows);\n        // this.displayData.push(<div  id=\"display-data\"><pre>{this.state.postVal}</pre></div>);\n        // this.setState({\n        //     showdata : this.displayData,\n        //     postVal : \"\"\n        // });\n    };\n    const updateValue = (e, idx) => {\n        const rows = [...rowState];;  // copy array because we don't want to mutate the previous one\n        rows[idx].value = e.target.value;\n        // console.log('update value',rows);\n        setRowState(rows);\n    };\n\n    const deleteRows = (val) => {\n        const rows = [...rowState].filter(e => e.value !== val);\n        // console.log(rows);\n        setRowState(rows);\n    }\n\n    const fetchParentArea = () => {\n        setLoading(true);\n        GetParentAreasSelection(currentUser.token,currentUser.id_area).then(function(response) {\n            if(response) {\n            //   console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                // const objSelected = {\n                //     value: area.idparentarea,\n                //     label: area.descparentarea,\n                // };\n                // setValueParent(objSelected);\n                setOptParent(response.responseData);\n                setLoading(false);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n                setLoading(false);\n              }\n            }\n        });\n    };\n\n    const getSubArea = (area,sub_area,desc_sub_area) => {\n        setLoading(true);\n        let result = null;\n        GetAllAreasSelection(currentUser.token, area, sub_area).then(function(response) {\n            if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 1000,\n                });\n                // if(area == user.id_area) {\n                    const objSelected = {\n                        value: sub_area,\n                        label: desc_sub_area,\n                    };\n                    setValueSubArea(objSelected);\n                // }else{\n                //     const objSelected = {\n                //         value: null,\n                //         label: null,\n                //     };\n                //     setValueSubArea(objSelected);\n                // }\n                // result = response.responseData;\n                // console.log(response.responseData);\n                setOptSub(response.responseData);\n                setLoading(false);\n            }else{  \n                toast.error(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                });\n                setLoading(false);\n\n                // if(response.responseCode === 401) {\n                //   // dispatch(setCurrentUser(''));\n                //   const path = `${appRoot}/login`; \n                //   history.push(path);\n                // }\n            }\n            }\n        });\n    };\n\n    const initialValues = { \n        nama_cluster: '',\n    };\n    const validationSchema = Yup.object().shape({\n        // desc_area: Yup.string().required('Area Region is required'),\n        // desc_sub_area: Yup.string().required('Sub Area is required'),\n    });\n    const onSubmit = (values) => {\n        // console.log(values);\n        let act = \"0\";\n        if (ref.current.checked) {\n            act = \"1\";\n        } \n        const subAreas = [];\n        AddClusterService(currentUser.token,values.nama_cluster,valueArea.value,subAreas,act,new Date()).then(function(response) {\n            if(response) {\n            //   console.log(response);\n              if(response.responseCode === 200) {\n                toast.success(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 1000,\n                });\n                const path = `${appRoot}/setting/clustersetting`; \n                history.push(path);\n              }else{  \n                toast.error(response.responseDesc, {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                });\n              }\n            }\n        });\n    };\n    const handleClickBackButton = () => {\n        const path = `${appRoot}/setting/clustersetting`; \n        history.push(path);\n    };\n    const handleChecked = () => {\n        setIsChecked(!isChecked);\n    };\n\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    useEffect(() => {\n        fetchParentArea();\n        const area = currentUser.id_area;\n        const subarea = currentUser.id_sub_area;\n        const descsubarea = currentUser.desc_sub_area;\n        getSubArea(area,subarea,descsubarea);\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"App\" style={{  }}>\n            <HtmlHead title={title} description={description} />\n            <Row>\n                <Col>\n                    {/* Title Start */}\n                    <section className=\"scroll-section\" id=\"title\">\n                    <div className=\"page-title-container\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </div>\n                    </section>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h2 className=\"small-title\">Cluster Info</h2>\n                    <Form id=\"loginForm\" className=\"tooltip-end-bottom\" onSubmit={handleSubmit}>\n                    <Card className=\"mb-2\">\n                        <Card.Body className=\"p-3\">\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Cluster Name</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Control type=\"text\" name=\"nama_cluster\" id=\"nama_cluster\" value={values.nama_cluster}  onChange={handleChange}/>\n                                    {errors.nama_cluster  && touched.nama_cluster && <div className=\"d-block invalid-tooltip\">{errors.nama_cluster}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    {/* <Form.Control type=\"text\" name=\"desc_parent_area\" id=\"desc_parent_area\" value={values.desc_parent_area}  onChange={handleChange} readOnly={values.id_sub_area == 1? 1 : 0}/> */}\n                                    <Select classNamePrefix=\"react-select\" name=\"desc_area\" id=\"desc_area\" options={optParent} value={valueArea} onChange={setValueArea} placeholder=\"\" />\n                                    {errors.desc_area  && touched.desc_area && <div className=\"d-block invalid-tooltip\">{errors.desc_area}</div>}\n                                </Col>\n                            </Row>\n                            {/* <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Sub Area</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">  \n                                    <InputGroup>\n                                        <Button variant=\"outline-primary\" onClick={() => handleClickAddButton()}> \n                                            <CsLineIcons icon=\"plus\" />\n                                        </Button>\n                                    </InputGroup>\n                                </Col>\n                            </Row>\n                            <div className=\"display-data-Container\">\n                                {rowState.map((row, idx) => {\n                                        return(\n                                            <RowInd \n                                            key={idx}\n                                            value={row.value}\n                                            opt={optSub}\n                                            valueSubArea={valueSubArea}\n                                            setValueSubArea={setValueSubArea}\n                                            onChange={(e) => updateValue(e, idx)} \n                                            onDelete={(e) => deleteRows(row.value)}\n                                            /> \n                                        )\n                                    })\n                                }\n                            </div> */}\n                            <Row className=\"mb-2 filled tooltip-end-top\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\">\n                                    <Form.Label className=\"col-form-label\">Flag Active</Form.Label>\n                                </Col>\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <Form.Check ref={ref} type=\"checkbox\" className=\"mt-2\" label=\"active\" id=\"status\" name=\"status\" checked={isChecked} onChange={() => handleChecked()}/>\n                                    {errors.status  && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-5\">\n                                <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                                <Col sm=\"8\" md=\"9\" lg=\"10\">\n                                    <div className=\"btn-group\">\n                                        <Button type=\"submit\" variant=\"outline-primary\" className=\"mb-1\">Submit</Button>\n                                        <Button id=\"backButton\" name=\"backButton\" type=\"button\" variant=\"outline-warning\" className=\"mb-1\" onClick={() => handleClickBackButton()}>Back</Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                    </Form>\n                </Col>\n            </Row>\n        </div>\n    );\n}\nexport default AddCluster;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/cluster/ClusterSetting.js",["514","515","516","517","518","519","520","521","522","523","524","525","526","527","528"],"import {React,useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Card, Form , Button, Pagination} from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport useCustomLayout from 'hooks/useCustomLayout';\nimport { MENU_PLACEMENT, LAYOUT } from 'constants.js';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport { GetAllCluster, FindCluster } from '../../services/clusterservice';\nimport { GetAllAreas, FindAreas } from '../../services/areaservice';\nimport { DEFAULT_PATHS } from '../../config';\n\nconst RowInd = function(propss){\n    const {idcluster, idarea, desccluster, descarea, createdat, modifiedat, subareas, active, onClickSubArea, onClick} = propss;\n    let newDate= new Date(createdat); \n    const cratedString = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(newDate);\n    newDate= new Date(modifiedat); \n    const modString = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(newDate);\n    // const newDate= new Date(createDate); \n    // const cratedString = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(newDate);\n    // console.log(cratedString)\n    // console.log('act',active);\n    return (\n      <Card className=\"mb-2\">\n      <Row className=\"g-0 h-auto sh-sm-19 sh-lg-9\">\n        <Col xs=\"12\" sm=\"auto\">\n          <img src=\"/img/logo/locations.gif\" className=\"card-img card-img-horizontal-sm rounded-xl sh-10 h-sm-100 sw-lg-9 sw-sm-12\" alt=\"thumb\" />\n        </Col>\n        <Col xs=\"12\" className=\"col-sm\">\n          <Card.Body className=\"pt-sm-0 pb-sm-0 h-100\">\n            <Row className=\"g-0 h-100 align-content-center\">\n              <Col lg=\"2\" xs=\"6\" sm=\"6\" className=\"d-flex flex-column mb-lg-0 mb-3 mb-lg-0 pe-3 d-flex\">\n                  <div className=\"lh-1\">{desccluster}</div>\n                  <div className=\"text-small text-muted text-truncate\">Cluster</div>\n              </Col>\n              <Col lg=\"2\" sm=\"6\" xs=\"6\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 \">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{descarea}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Area</div>\n              </Col>\n              {/* <Col lg=\"3\" xs=\"6\" sm=\"6\" className=\"d-flex flex-column mb-lg-0 mb-3 mb-lg-0 pe-3 d-flex\">\n                <Button size=\"xs\" variant=\"outline-muted\" className=\"btn-icon btn-icon-only hover-outline\" onClick={onClickSubArea}>\n                    <CsLineIcons icon=\"more-horizontal\" />\n                </Button>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Sub Area</div>\n              </Col> */}\n              <Col lg=\"3\" sm=\"6\" xs=\"6\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 \">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{cratedString}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Created</div>\n              </Col>\n              <Col lg=\"3\" sm=\"6\" xs=\"6\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 \">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{modString}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Modified</div>\n              </Col>\n              <Col lg=\"1\" sm=\"6\" xs=\"6\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <div className=\"lh-1 text-alternate\" style={{textAlign:\"left\"}}>{active == \"1\" ? 'Active' : 'Not Active'}</div>\n                <div className=\"text-muted text-small\" style={{textAlign:\"left\"}}>Flag Active</div>\n              </Col>\n              <Col lg=\"1\" sm=\"1\" xs=\"1\" className=\"d-flex flex-column pe-1 mb-2 mb-lg-0 align-items-lg-end\">\n                <Button size=\"sm\" variant=\"outline-muted\" className=\"btn-icon btn-icon-only hover-outline\" onClick={onClick}>\n                  <CsLineIcons icon=\"edit-square\" />\n                </Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Col>\n      </Row>\n    </Card>\n    );\n}\n\nconst RowSubs = function(propss) {\n    const {id_sub_area, desc_sub_area} = propss;\n    return (\n        <div className=\"row mt-0 mb-0\">\n            <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">Sub Area {id_sub_area}</small>\n            <span className=\"sm-12\"><Card.Text>{desc_sub_area}</Card.Text></span>\n        </div>\n    );\n}\n\nconst ClusterSettingPage = () => {\n    const appRoot = DEFAULT_PATHS.APP.endsWith('/') ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length) : DEFAULT_PATHS.APP;\n    const history = useHistory();\n    const title = 'Cluster Setting Page';\n    const description = 'List of Clusters.';\n    const breadcrumbs = [{ to: '', text: 'Home' }];\n    useCustomLayout({ placement: MENU_PLACEMENT.Vertical, layout: LAYOUT.Boxed });\n    const { currentUser, isLogin } = useSelector((state) => state.auth);\n    const [isLoading, setLoading] = useState(true);\n    const [page, setPage] = useState(1);\n    const rowsId = [];\n    const [ds, getCluster] = useState(rowsId);\n    const [dsSub, setSubs] = useState(rowsId);\n    const [show,setShow] = useState(false);\n    const [rowData, setRow] = useState(true);\n \n    const CompClose = () => setShow(false);\n    const CompShow = () => setShow(true);\n\n    const getAllCluster = (paging) => {\n        setLoading(true);\n        let result = null;\n        // console.log(paging);\n        GetAllCluster(currentUser.token, paging).then(function(response) {\n          if(response) {\n            // console.log(response);\n            if(response.responseCode === 200) {\n              toast.success(response.responseDesc, {\n                position: \"top-right\",\n                autoClose: 1000,\n              });\n              // console.log(response.responseData);\n              result = response.responseData;\n              getCluster(result);\n              setLoading(false);\n              setPage(paging);\n            }else{  \n              toast.error(response.responseDesc, {\n                position: \"top-right\",\n                autoClose: 5000,\n              });\n              \n              setLoading(false);\n              // if(response.responseCode === 401) {\n              //   // dispatch(setCurrentUser(''));\n              //   const path = `${appRoot}/login`; \n              //   history.push(path);\n              // }\n            }\n          }\n        });\n    };\n\n    const findCluster = (paging,search) => {\n        setLoading(true);\n        let result = null;\n        if(search == \"\") {\n            getAllCluster(paging);\n        }else{\n            FindCluster(currentUser.token, paging, search).then(function(response) {\n                if(response) {\n                // console.log(response);\n                if(response.responseCode === 200) {\n                    toast.success(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 1000,\n                    });\n                    // console.log(response.responseData);\n                    result = response.responseData;\n                    getCluster(result);\n                    setLoading(false);\n                }else{  \n                    toast.error(response.responseDesc, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    });\n                    \n                    setLoading(false);\n                    // if(response.responseCode === 401) {\n                    //   // dispatch(setCurrentUser(''));\n                    //   const path = `${appRoot}/login`; \n                    //   history.push(path);\n                    // }\n                }\n                }\n            });\n        }\n    };\n\n    const addClusterClick = () => {\n        const path = `${appRoot}/setting/clustersetting/addcluster`; \n            // console.log(path);\n          history.push(path);\n    };\n  \n    const clickRows = (val) => {\n        // console.log(val);\n        const path = `${appRoot}/setting/clustersetting/editcluster`; \n        // console.log(path);\n        history.push(path,{\n            idCluster: val.id_cluster,\n            namacluster: val.nama_cluster,\n            idarea: val.id_area,\n            descarea: val.desc_area,\n            idsubareas: val.id_sub_areas,\n            flagactive: val.flag_active,\n        });\n    };\n\n    const clickRowsSubArea = (val) => {\n        // console.log(val);\n        setRow(val);\n        const subs = JSON.parse(val.id_sub_areas);\n        setSubs(subs);\n        CompShow();\n    }\n  \n    const onSubmit = (values) => {\n        // console.log(values);\n        // console.log(paging);\n        findCluster(page,values.searchField);\n    };\n\n    const nextPage = () => {\n        const paging = page + 1;\n        // console.log(values.searchField);\n        if(values.searchField != '') {\n            findCluster(paging,values.searchField);\n        }else{\n            getAllCluster(paging);\n        }\n    };\n\n    const prevPage = () => {\n        let paging = 0;\n        if(page == 1) {\n            paging = page;\n        }else{\n            paging = page - 1;\n        }\n        // console.log(values.searchField);\n        if(values.searchField != '') {\n            findCluster(paging,values.searchField);\n        }else{\n            getAllCluster(paging);\n        }\n    };\n\n    const initialValues = { searchField: '' };\n    const validationSchema = Yup.object().shape({\n        // searchField: Yup.string().required('Search is required'),\n    });\n    const formik = useFormik({ initialValues, validationSchema, onSubmit });\n    const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n    useEffect(() => {\n        getAllCluster(page);\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"App\">Loading...</div>;\n    }\n  \n    return (\n        <div className=\"App2\">\n        <HtmlHead title={title} description={description} />\n        <Row>\n            <Col>\n                <section className=\"scroll-section\" id=\"title\">\n                {/* Title Start */}\n                <Row className=\"g-0\">\n                      <Col xs=\"auto\" className=\"mb-2 mb-md-0 me-auto\">\n                          <div className=\"page-title-container\">\n                          <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                          <BreadcrumbList items={breadcrumbs} />\n                          </div>\n                      </Col>\n                      {/* Title End */}\n                      <div className=\"w-100 d-md-none\" />\n                      {/* <Col>\n                      <Card className=\"mb-5\" body> */}\n                      <Col xs=\"12\" sm=\"6\" md=\"auto\" className=\"d-flex align-items-start justify-content-end order-3 order-sm-2\">\n                          <div className=\"g-0 row mb-3\">\n                              <div className=\"d-flex align-items-start justify-content-end justify-content-lg-start col-md col-12\">\n                                  <form id=\"searchForm\" className=\"tooltip-end-bottom me-lg-auto w-md-auto search-input-container border border-separator col-12\" onSubmit={handleSubmit}>\n                                      <div className=\"input-group\">\n                                          <Form.Control id=\"searchField\" className=\"\" placeholder=\"Search\" value={values.searchField} onChange={handleChange} />\n                                          <button id=\"button-addon\" type=\"submit\" className=\"btn btn-outline-secondary\">\n                                              <span className=\"search-magnifier-icon pe-none\">\n                                                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"cs-icon search \">\n                                                  <circle cx=\"9\" cy=\"9\" r=\"7\"> </circle>\n                                                  <path d=\"M14 14L17.5 17.5\"> </path>\n                                                  </svg>\n                                              </span>\n                                          </button>\n                                          <button id=\"button-addon\" type=\"submit\" className=\"btn btn-outline-warning\" onClick={()=>addClusterClick()} >\n                                            <CsLineIcons icon=\"plus\" className=\"me-2\" size=\"17\" />\n                                          </button>\n                                      </div>\n                                  </form> \n                              </div>\n                          </div> \n                      </Col>\n                  </Row>\n                  {/* </Card>\n                  </Col> */}\n                  <Row>\n                  </Row>\n                  {/* <section className=\"scroll-section\" id=\"responsiveVertical\"> */}\n                  <h2 className=\"small-title\">List Clusters</h2>\n                  <Row className=\"mb-5\">\n                  <Col>\n                      <div className=\"display-data-Container\">\n                            {ds.map((row, idx) => {\n                                delete row.pass;\n                                return(\n                                    <RowInd \n                                    key={idx}\n                                    idcluster={row.id_cluster}\n                                    desccluster={row.nama_cluster}\n                                    idarea={row.id_area}\n                                    descarea={row.desc_area}\n                                    subareas={row.id_sub_areas}\n                                    createdat={row.createdAt}\n                                    modifiedat={row.modifiedAt}\n                                    active={row.flag_active}\n                                    onClick={(e) => clickRows(row)}\n                                    onClickSubArea={(e) => clickRowsSubArea(row)}\n                                    /> \n                                )\n                            })\n                            }\n                      </div>\n                  </Col>\n                  </Row>\n                  <div className=\"mb-5\">\n                    <nav>\n                      <Pagination className=\"justify-content-center\">\n                          <Pagination.Prev className=\"shadow\" onClick={() => prevPage()}>\n                              <CsLineIcons icon=\"chevron-left\" />\n                          </Pagination.Prev>\n                          <Pagination.Item className=\"shadow\" disabled>{page}</Pagination.Item>\n                          <Pagination.Next className=\"shadow\" onClick={() => nextPage()}>\n                              <CsLineIcons icon=\"chevron-right\" />\n                          </Pagination.Next>\n                      </Pagination>\n                    </nav>\n                  </div>\n                  </section>\n              </Col>\n              \n          </Row>\n        <Offcanvas show={show} onHide={CompClose} placement=\"end\" name=\"end\">\n            <Offcanvas.Header closeButton className=\"row\">\n                <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">Cluster</small>\n                <Offcanvas.Title className=\"sm-12\">\n                    {rowData.nama_cluster}\n                </Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body style={{background:\"var(--background-navcolor-dark)\"}}>\n            <Card className=\"mb-3\" body style={{background:\"rgba(255,255,255,.05) !important\"}}>\n                <Card.Header className=\"pt-0 pb-1\">\n                    <div className=\"row mt-0 mb-0 d-flex align-items-start justify-content-end justify-content-lg-start\">\n                        <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">Area</small>\n                        <span className=\"col-md col-6 sm-6\">{rowData.desc_area}</span>\n                        <span className=\"col-md col-6 sm-6\"> </span>\n                    </div>\n                </Card.Header>\n                <Card.Body>\n                    {dsSub.map((row, idx) => {\n                        delete row.pass;\n                        return(\n                            <RowSubs \n                            key={idx}\n                            id_sub_area={row.id_sub_area}\n                            desc_sub_area={row.desc_sub_area}\n                            /> \n                        )\n                    })\n                    }\n                </Card.Body>\n            </Card>\n            </Offcanvas.Body>\n        </Offcanvas>\n        </div>\n    \n    );\n};\n  \nexport default ClusterSettingPage;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/api.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/NotFound.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Register.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Login.js",["529","530"],"import React from 'react';\nimport { NavLink,useHistory } from 'react-router-dom';\nimport { Button, Form } from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport LayoutFullpage from 'layout/LayoutFullpage';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport {useSelector , useDispatch} from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Signin } from '../../services/signin';\n\nconst Login = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { isLogin, currentUser } = useSelector((state) => state.auth);\n  // console.log(currentUser);\n  const title = 'Login';\n  const description = 'Login Page';\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required'),\n    password: Yup.string().min(3, 'Must be at least 6 chars!').required('Password is required'),\n  });\n  const initialValues = { email: '', password: '' };\n  const onSubmit = (values) => {\n    // console.log('submit form', values);\n    Signin(values.email, values.password, dispatch).then(function(response) {\n      // console.log(response);\n      if(response) {\n        if(response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n          const path = `home`; \n          history.push(path);\n        }else{  \n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n          });\n        }\n      }\n    });\n    \n  }\n\n  const formik = useFormik({ initialValues, validationSchema, onSubmit });\n  const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n  const leftSide = (\n    <div className=\"min-h-100 d-flex align-items-center\">\n      <div className=\"w-100 w-lg-75 w-xxl-50\">\n        <div>\n          <div className=\"mb-5\">\n            <h1 className=\"display-3 text-white\">Multiple Niches</h1>\n            <h1 className=\"display-3 text-white\">Ready for Your Project</h1>\n          </div>\n          <p className=\"h6 text-white lh-1-5 mb-5\">\n            Dynamically target high-payoff intellectual capital for customized technologies. Objectively integrate emerging core competencies before\n            process-centric communities...\n          </p>\n          <div className=\"mb-5\">\n            <Button size=\"lg\" variant=\"outline-white\" href=\"/\">\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const rightSide = (\n    <div className=\"sw-lg-70 min-h-100 bg-foreground d-flex justify-content-center align-items-center shadow-deep py-5 full-page-content-right-border\">\n     \n      <div className=\"sw-lg-50 px-5\">\n        <div className=\"sh-11\">\n          <NavLink to=\"/\">\n            <div className=\"logo-default\" />\n          </NavLink>\n        </div>\n        <div className=\"mb-5\">\n          <h2 className=\"cta-1 mb-0 text-primary\">Welcome,</h2>\n          <h2 className=\"cta-1 text-primary\">let's get started!</h2>\n        </div>\n        <div className=\"mb-5\">\n          <p className=\"h6\">Please use your credentials to login.</p>\n          <p className=\"h6\">\n            If you are not a member, please <NavLink to=\"/register\">register</NavLink>.\n          </p>\n        </div>\n        <div>\n          <form id=\"loginForm\" className=\"tooltip-end-bottom\" onSubmit={handleSubmit}>\n            <div className=\"mb-3 filled form-group tooltip-end-top\">\n              <CsLineIcons icon=\"user\" />\n              <Form.Control type=\"text\" name=\"email\" placeholder=\"User\" value={values.email} onChange={handleChange} />\n              {errors.email  && touched.email && <div className=\"d-block invalid-tooltip\">{errors.email}</div>}\n            </div>\n            <div className=\"mb-3 filled form-group tooltip-end-top\">\n              <CsLineIcons icon=\"lock-off\" />\n              <Form.Control type=\"password\" name=\"password\" onChange={handleChange} value={values.password} placeholder=\"Password\" />\n              <NavLink className=\"text-small position-absolute t-3 e-3\" to=\"/forgot-password\">\n                Forgot?\n              </NavLink>\n              {errors.password && touched.password && <div className=\"d-block invalid-tooltip\">{errors.password}</div>}\n            </div>\n            <Button size=\"lg\" type=\"submit\">\n              Login\n            </Button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      <HtmlHead title={title} description={description} />\n      <LayoutFullpage left={leftSide} right={rightSide} />\n    </>\n  );\n};\n\nexport default Login;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/ForgotPassword.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/Unauthorized.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/ResetPassword.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/default/InvalidAccess.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.chat.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.contacts.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.tasks.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/products.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.mailbox.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/users.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/apps.events.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/notifications.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/@mock-api/data/datatable.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/es.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/en.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/lang/messages/de.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-detail/index.js",["531","532","533"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport SortableTree from \"react-sortable-tree\";\nimport {\n  Alert,\n  Row,\n  Col,\n  Card,\n  ButtonGroup,\n  Button,\n  Spinner,\n} from \"react-bootstrap\";\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\nimport CsLineIcons from \"cs-line-icons/CsLineIcons\";\nimport HtmlHead from \"components/html-head/HtmlHead\";\nimport BreadcrumbList from \"components/breadcrumb-list/BreadcrumbList\";\nimport { toast } from \"react-toastify\";\nimport { useSelector } from \"react-redux\";\nimport { debounce } from \"lodash\";\nimport {\n  RemapNode,\n  SearchGoals,\n  TreeGoals,\n} from \"../../../services/treeservice\";\nimport { DEFAULT_PATHS } from \"../../../config\";\nimport SelectServerSide from \"components/select/SelectServerSide\";\n\nconst TreeAdminDetail = ({ location }) => {\n  const stateData = location.state;\n  const appRoot = DEFAULT_PATHS.APP.endsWith(\"/\")\n    ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length)\n    : DEFAULT_PATHS.APP;\n  const history = useHistory();\n  const { id } = useParams();\n  const { currentUser, isLogin } = useSelector((state) => state.auth);\n  const [treeData, setTreeData] = useState([]);\n  const [canvas, setCanvas] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [nodeClicked, clickNode] = useState(true);\n  const [show, setShow] = useState(false);\n  const [dismissingAlertShow, setDismissingAlertShow] = useState(true);\n  const [styleBackround, setStyleBack] = useState(true);\n  const [styleColor, setStyleCol] = useState(true);\n  const [indData, setInd] = useState(true);\n  const [selectedSearch, setSelectedSearch] = useState(null);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const searchGoals = (inputValue, callback) => {\n    SearchGoals(currentUser.token, { searchTerm: inputValue })\n      .then((response) => {\n        if (response) {\n          // console.log(response);\n          if (response.responseCode === 200) {\n            callback(response.responseData);\n            return;\n          }\n        }\n        callback([]);\n      })\n      .catch(() => {\n        callback([]);\n      });\n  };\n  const getTreeGoals = (idGoals) => {\n    let result = [];\n    setLoading(true);\n    TreeGoals(currentUser.token, {\n      parent_family: Number(id),\n      id_goals: idGoals,\n    })\n      .then(function (response) {\n        if (response) {\n          if (response.responseCode === 200) {\n            result = response.responseData;\n            setTreeData(result);\n            setDismissingAlertShow(false);\n          } else {\n            toast.error(response.responseDesc, {\n              position: \"top-right\",\n              autoClose: 1000,\n            });\n            setTreeData(result?.[0]);\n            setDismissingAlertShow(true);\n          }\n        }\n        // console.log(result);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  const handleNodeClick = (node) => {\n    // setState({\n    //     // nodeClicked: node\n\n    // });\n    clickNode(node);\n  };\n\n  const handleTreeOnChange = (treeDataS) => {\n    // setState({ treeData });\n    setTreeData(treeDataS);\n  };\n\n  const alertNodeInfo = ({ node, path, treeIndex }) => {\n    // console.log(node);\n    // console.log(path);\n    // console.log(treeIndex);\n    const objectString = Object.keys(node)\n      .map((k) => (k === \"children\" ? \"children: Array\" : `${k}: '${node[k]}'`))\n      .join(\",\\n   \");\n\n    // alert(\n    //   \"Info passed to the button generator:\\n\\n\" +\n    //     `node: {\\n   ${objectString}\\n},\\n` +\n    //     `path: [${path.join(\", \")}],\\n` +\n    //     `treeIndex: ${treeIndex}`\n    // );\n    setCanvas(node);\n    const ind = [];\n    node.indikator.forEach((el) => {\n      ind.push(\n        <Row className=\"g-0 py-1\" key={el.key}>\n          <Col xs=\"auto\">\n            <div className=\"sw-3 d-inline-block d-flex justify-content-start align-items-center h-100\">\n              <div className=\"sh-3\">\n                <CsLineIcons\n                  icon=\"dashboard-1\"\n                  className=\"text-primary align-top\"\n                />\n              </div>\n            </div>\n          </Col>\n          <Col>\n            <div className=\"d-flex flex-column pt-0 pb-0 ps-3 pe-4 h-100 justify-content-center\">\n              <div className=\"d-flex flex-column\">\n                <div\n                  className=\"text-alternate mt-n1 lh-1-25\"\n                  style={{ fontSize: \"12px\" }}\n                >\n                  {el.indikator}\n                </div>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      );\n    });\n\n    const styBack =\n      node.type_goals?.background !== null && node.type_goals?.background !== \"\"\n        ? node.type_goals?.background\n        : \"\";\n    const styCol =\n      node.type_goals?.color !== null && node.type_goals?.color !== \"\"\n        ? node.type_goals?.color\n        : \"\";\n    setStyleBack(styBack);\n    setStyleCol(styCol);\n    setInd(ind);\n    handleShow();\n  };\n\n  const resJson = [];\n  const loopParseData = (res, data, parent) => {\n    if (data) {\n      let obj = {};\n      data.forEach(function (d, idx, arr) {\n        if (d.expanded) {\n          // this.loopParseData(d);\n          obj = {\n            id_goals: d.id_goals,\n            parent_goals: parent,\n            title_goals: d.title,\n            pic_goals: currentUser.email,\n          };\n          // console.log(`${d.title}, id : ${d.id}, parent : ${parent} Parent of : `);\n          // resJson += `${d.title} Parent of : `;\n          // console.log(obj);\n          loopParseData(res, d.children, d.id_goals);\n        } else {\n          obj = {\n            id_goals: d.id_goals,\n            parent_goals: parent,\n            title_goals: d.title,\n            pic_goals: currentUser.email,\n          };\n          // resJson += `${d.title}, id : ${d.id}, parent : ${parent}`;\n          // console.log(`${d.title}, id : ${d.id}, parent : ${parent}`);\n          // console.log(obj);\n        }\n\n        res.push(obj);\n      });\n    }\n    return res;\n  };\n\n  const handleClickButton = () => {\n    // const { treeData } = this.state;\n    // const loopData = '';\n    // console.log(treeData.keys(\"children\"));\n    // treeData.forEach(\n    //     function(d) {\n    //         console.log(d);\n    //         if(d.expanded) {\n\n    //         }\n    //     }\n    // );\n    loopParseData(resJson, treeData, 0);\n  };\n\n  const handleClickRemapButton = () => {\n    const newMap = loopParseData(resJson, treeData, 0);\n    // console.log(newMap);\n    RemapNode(currentUser.token, newMap).then(function (response) {\n      if (response) {\n        if (response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          // console.log(response.responseData);\n          // result = response.responseData;\n          // console.log(result);\n          // getGoals(result);\n          // setLoading(false);\n          getTreeGoals(\n            newMap?.find((item) => item.parent_goals === 0)?.id_goals\n          );\n        } else {\n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        }\n      }\n    });\n  };\n\n  const handleClickCancelButton = () => {\n    getTreeGoals(stateData?.id_goals);\n  };\n\n  const handleClickAddParentButton = (parentCanvas) => {\n    // console.log(`${appRoot}/tree/treeadmf/addchild`);\n    const path = `${appRoot}/tree/treeadmin/${parentCanvas.id_goals}/addchild`;\n    // console.log(path);\n    history.push(path, {\n      id: parentCanvas.id_goals,\n      parentFamilyId: parentCanvas.parent_family,\n      title: parentCanvas.title,\n    });\n  };\n\n  const handleClicUpdkButton = (parentCanvas) => {\n    console.log(\"parentCanvas\", parentCanvas);\n    const path = `${appRoot}/tree/treeadmin/${parentCanvas.id_goals}/update`;\n    // console.log(path);\n    history.push(path, {\n      id: parentCanvas.id_goals,\n      title: parentCanvas.title,\n      desc: parentCanvas.desc_goals,\n      startDate: parentCanvas.start_date,\n      dueDate: parentCanvas.due_date,\n      typeGoals: parentCanvas.type_goals,\n      indikator: parentCanvas.indikator,\n      status: parentCanvas.status_goals,\n    });\n  };\n\n  const handleClickAddButton = (parentCanvas) => {\n    // console.log(`${appRoot}/tree/treeadmf/addchild`);\n    const path = `${appRoot}/tree/treeadmin/${parentCanvas.id_goals}/addchild`;\n    // console.log(path);\n    history.push(path, {\n      id: parentCanvas.id_goals,\n      title: parentCanvas.title,\n      parentFamilyId: parentCanvas.parent_family,\n    });\n  };\n\n  useEffect(() => {\n    getTreeGoals(\n      selectedSearch ? selectedSearch?.id_goals : stateData?.id_goals\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedSearch]);\n\n  // const maxDepth = 5;\n  const title = \"Tree Admin Page\";\n  const description = \"An page for configure the tree view.\";\n  const breadcrumbs = [\n    { to: \"\", text: \"Home\" },\n    { to: \"tree/treeadmin\", text: \"Tree Admin\" },\n  ];\n\n  return (\n    <div className=\"App scroll-out\">\n      <HtmlHead title={title} description={description} />\n      <div className=\"override-native overflow-auto sh-100 pe-3\">\n        <Row>\n          <Col>\n            {/* Title Start */}\n            <section className=\"scroll-section\" id=\"title\">\n              <div className=\"page-title-container\">\n                <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                <BreadcrumbList items={breadcrumbs} />\n              </div>\n              <Card className=\"mb-2\" body>\n                <Card.Text>{description}</Card.Text>\n                <div className=\"g-0 row\">\n                  <div className=\"col-md col-12 mb-1 mr-2\">\n                    <SelectServerSide\n                      value={selectedSearch}\n                      placeholder=\"Search here...\"\n                      loadOptions={debounce(searchGoals, 500)}\n                      onChange={setSelectedSearch}\n                      getOptionLabel={(e) => e.title_goals}\n                      getOptionValue={(e) => e.id_goals}\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-start justify-content-end justify-content-lg-start col-md col-12 mb-1\">\n                    <Button\n                      variant=\"outline-muted\"\n                      className=\"btn-icon btn-icon-start mb-1 mx-2\"\n                      onClick={() => setSelectedSearch(null)}\n                    >\n                      <CsLineIcons icon=\"close\" /> <span>Clear</span>\n                    </Button>{\" \"}\n                  </div>\n                </div>\n              </Card>\n              <Card className=\"mb-3\" body>\n                {dismissingAlertShow && (\n                  <Alert\n                    variant=\"alert\"\n                    onClose={() => setDismissingAlertShow(false)}\n                  >\n                    <strong>Data goals is empty! </strong> You should add Parent\n                    Node.\n                  </Alert>\n                )}\n                {isLoading ? (\n                  <div className=\"d-flex justify-content-center\">\n                    <Spinner animation=\"border\" />\n                  </div>\n                ) : (\n                  <SortableTree\n                    className=\"mb-3\"\n                    treeData={treeData}\n                    onChange={handleTreeOnChange}\n                    isVirtualized={false}\n                    // maxDepth={maxDepth}\n                    generateNodeProps={(rowInfo) => {\n                      const { node } = rowInfo;\n                      // console.log(node);\n                      return {\n                        buttons: [\n                          <button\n                            type=\"button\"\n                            key={node}\n                            className=\"btn-xs btn-outline-default\"\n                            style={{\n                              verticalAlign: \"middle\",\n                              background:\n                                node.type_goals?.background !== null &&\n                                node.type_goals?.background !== \"\"\n                                  ? node.type_goals?.background\n                                  : \"\",\n                              color:\n                                node.type_goals?.color !== null &&\n                                node.type_goals?.color !== \"\"\n                                  ? node.type_goals?.color\n                                  : \"\",\n                              width: \"50px\",\n                            }}\n                            onClick={() => alertNodeInfo(rowInfo)}\n                          >\n                            ℹ\n                          </button>,\n                        ],\n                        onClick: () => {\n                          handleNodeClick(node);\n                        },\n                        style:\n                          node === nodeClicked\n                            ? {\n                                border: \"3px solid yellow\",\n                              }\n                            : {},\n                      };\n                    }}\n                  />\n                )}\n                <ButtonGroup aria-label=\"Basic outlined example\">\n                  <button\n                    type=\"button\"\n                    onClick={() => handleClickRemapButton()}\n                    className=\"btn-icon btn-icon-start ms-1 btn btn-outline-primary\"\n                  >\n                    Submit New Map\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleClickCancelButton()}\n                    className=\"btn-icon btn-icon-start ms-1 btn btn-outline-warning\"\n                  >\n                    Cancel\n                  </button>\n                  {dismissingAlertShow && (\n                    <button\n                      type=\"button\"\n                      onClick={() => handleClickAddParentButton(canvas)}\n                      className=\"btn-icon btn-icon-start ms-1 btn btn-outline-primary\"\n                    >\n                      Add Parent\n                    </button>\n                  )}\n                </ButtonGroup>\n              </Card>\n            </section>\n            {/* Title End */}\n          </Col>\n        </Row>\n        <Offcanvas show={show} onHide={handleClose} placement=\"end\" name=\"end\">\n          <Offcanvas.Header\n            closeButton\n            className=\"row\"\n            style={{ backgroundColor: styleBackround, color: styleColor }}\n          >\n            <small\n              id=\"passwordHelpBlock\"\n              className=\"form-text text-muted sm-12\"\n            >\n              Title\n            </small>\n            <Offcanvas.Title className=\"sm-12\">{canvas.title}</Offcanvas.Title>\n          </Offcanvas.Header>\n          <Offcanvas.Body\n            style={{ background: \"var(--background-navcolor-dark)\" }}\n          >\n            <Card\n              className=\"mb-3\"\n              body\n              style={{ background: \"rgba(255,255,255,.05) !important\" }}\n            >\n              <Card.Header className=\"pt-0 pb-1\">\n                <div className=\"row mt-0 mb-0 d-flex align-items-start justify-content-end justify-content-lg-start\">\n                  <small\n                    id=\"passwordHelpBlock\"\n                    className=\"form-text text-muted sm-12\"\n                  >\n                    PIC\n                  </small>\n                  <span className=\"col-md col-6 sm-6\">{canvas.firstName}</span>\n                  <span className=\"col-md col-6 sm-6\">{canvas.pic}</span>\n                </div>\n              </Card.Header>\n              <Card.Body>\n                <div className=\"row mt-0 mb-0\">\n                  <small\n                    id=\"passwordHelpBlock\"\n                    className=\"form-text text-muted sm-12\"\n                  >\n                    Description\n                  </small>\n                  <span className=\"sm-12\">\n                    <Card.Text>{canvas.description}</Card.Text>\n                  </span>\n                </div>\n              </Card.Body>\n              <Card.Body>\n                <div className=\"row mt-0 mb-0\">\n                  <small\n                    id=\"passwordHelpBlock\"\n                    className=\"form-text text-muted sm-12\"\n                  >\n                    Progress\n                  </small>\n                  <span className=\"sm-12\">\n                    <Card.Text>{canvas.progress}</Card.Text>\n                  </span>\n                </div>\n              </Card.Body>\n              <Card.Footer className=\"pt-0 pb-1\">\n                <div className=\"row mt-0 mb-0\">\n                  <small\n                    id=\"passwordHelpBlock\"\n                    className=\"form-text text-muted sm-12 col-md col-6\"\n                  >\n                    Start Date\n                  </small>\n                  <span className=\"col-md col-6 sm-12\">\n                    <Card.Text>{canvas.start_date}</Card.Text>\n                  </span>\n                </div>\n                <div className=\"row mt-0 mb-0\">\n                  <small\n                    id=\"passwordHelpBlock\"\n                    className=\"form-text text-muted sm-12 col-md col-6\"\n                  >\n                    End Date\n                  </small>\n                  <span className=\"col-md col-6 sm-12\">\n                    <Card.Text>{canvas.due_date}</Card.Text>\n                  </span>\n                </div>\n              </Card.Footer>\n            </Card>\n            <Card\n              className=\"mb-3\"\n              body\n              style={{ background: \"rgba(255,255,255,.05) !important\" }}\n            >\n              <Card.Header className=\"pt-0 pb-1\">\n                <div className=\"row mt-0 mb-0 d-flex align-items-start justify-content-end justify-content-lg-start\">\n                  <small\n                    id=\"passwordHelpBlock\"\n                    className=\"form-text text-muted sm-12\"\n                  >\n                    Indikator :{\" \"}\n                  </small>\n                </div>\n              </Card.Header>\n              <Card.Body className=\"mb-n2 py-1\">{indData}</Card.Body>\n            </Card>\n            <div className=\"btn-group\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  handleClickAddButton(canvas);\n                }}\n                className=\"btn-icon btn-icon-start ms-1 btn btn-outline-primary\"\n              >\n                Add Child\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  handleClicUpdkButton(canvas);\n                }}\n                className=\"btn-icon btn-icon-start ms-1 btn btn-outline-warning\"\n              >\n                Update\n              </button>\n            </div>\n          </Offcanvas.Body>\n        </Offcanvas>\n      </div>\n    </div>\n  );\n};\n\nexport default TreeAdminDetail;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-addchild/index.js",["534"],"import React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Button, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport HtmlHead from \"components/html-head/HtmlHead\";\nimport BreadcrumbList from \"components/breadcrumb-list/BreadcrumbList\";\nimport CsLineIcons from \"cs-line-icons/CsLineIcons\";\nimport useCustomLayout from \"hooks/useCustomLayout\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// import { useWindowSize } from 'hooks/useWindowSize';\nimport { toast } from \"react-toastify\";\nimport { BlockPicker } from \"react-color\";\nimport { AddChildTreeService } from \"../../../services/treeservice\";\nimport { DEFAULT_PATHS } from \"../../../config\";\nimport { LAYOUT } from \"../../../constants\";\n\nconst RowInd = function (propss) {\n  const { value, onChange, onDelete } = propss;\n  // console.log(props);\n  return (\n    <Row className=\"mb-2 filled tooltip-end-top\">\n      <Col lg=\"2\" md=\"3\" sm=\"4\">\n        {\" \"}\n      </Col>\n      <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">\n        <InputGroup>\n          <Form.Control\n            name=\"ind\"\n            placeholder=\"Indikator\"\n            aria-label=\"\"\n            value={value}\n            onChange={onChange}\n          />\n          <Button variant=\"outline-danger\" onClick={onDelete}>\n            <CsLineIcons icon=\"multiply\" />\n          </Button>\n        </InputGroup>\n      </Col>\n    </Row>\n  );\n};\n\nconst TreeAdminAddChild = (props) => {\n  const appRoot = DEFAULT_PATHS.APP.endsWith(\"/\")\n    ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length)\n    : DEFAULT_PATHS.APP;\n  const { id } = useParams();\n  const history = useHistory();\n  const states = props;\n  const parent = states.location.state;\n  const [startDate, setStartDate] = useState(new Date());\n  const [dueDate, setDueDate] = useState(new Date());\n  useCustomLayout({ layout: LAYOUT.Boxed });\n  const { currentUser, isLogin } = useSelector((state) => state.auth);\n  const [blockPickerColor, setBlockPickerColor] = useState(\"#37d67a\");\n  const isParentMode = !parent.id;\n\n  const rowsId = [];\n\n  const [rowState, setRowState] = useState(rowsId);\n\n  const title = isParentMode ? \"Add Parent Page\" : \"Add Child Page\";\n  const description = \"An page for adding child the tree view node.\";\n  const breadcrumbs = [\n    { to: ``, text: \"Home\" },\n    { to: `tree/treeadmin`, text: \"Tree Admin\" },\n    ...(!isParentMode\n      ? [{ to: `tree/treadmin/${id}/detail`, text: \"Tree Admin Detail\" }]\n      : []),\n    // {\n    //   to: `tree/treeadmin/addchild`,\n    //   text: title,\n    // },\n  ];\n\n  const handleClickBackButton = () => {\n    const path = `${appRoot}/tree/treeadmf`;\n    // console.log(path);\n    history.push(path);\n  };\n\n  const handleClickAddIndButton = () => {\n    const rows = [...rowState];\n    // rows = rowState;\n    rows.push({ value: \"\" });\n    // console.log('click button',rows);\n    setRowState(rows);\n  };\n\n  const updateValue = (e, idx) => {\n    const rows = [...rowState]; // copy array because we don't want to mutate the previous one\n    rows[idx].value = e.target.value;\n    setRowState(rows);\n  };\n\n  const deleteRows = (val) => {\n    const rows = [...rowState].filter((e) => e.value !== val);\n    // console.log(rows);\n    setRowState(rows);\n  };\n\n  const validationSchema = Yup.object().shape({\n    childTitle: Yup.string().required(\"Title is required\"),\n    childDesc: Yup.string().required(\"Description is required\"),\n    // startDate: Yup.string().required('Start date is required'),\n    // dueDate: Yup.string().required('Due date is required'),\n  });\n\n  const initialValues = {\n    childTitle: \"\",\n    childDesc: \"\",\n    startDate: \"\",\n    dueDate: \"\",\n    backCol: blockPickerColor,\n  };\n\n  const onSubmit = (values) => {\n    let textCol = \"#000\";\n    // const ind = [];\n    if (blockPickerColor === \"#697689\" || blockPickerColor === \"#555555\") {\n      textCol = \"#fff\";\n    }\n    const type = {\n      background: blockPickerColor,\n      color: textCol,\n    };\n    const indRes = [];\n    rowState.forEach((el, idx) => {\n      const obj = { key: idx.toString(), indikator: el.value };\n      indRes.push(obj);\n    });\n    AddChildTreeService(\n      currentUser.token,\n      values.childTitle,\n      values.childDesc,\n      currentUser.email,\n      startDate,\n      dueDate,\n      parent.id || 0,\n      type,\n      indRes ? JSON.stringify(indRes) : null\n    ).then(function (response) {\n      //   console.log(response);\n      if (response) {\n        if (response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n          history.goBack();\n        } else {\n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n        }\n      }\n    });\n  };\n\n  const formik = useFormik({ initialValues, validationSchema, onSubmit });\n  const { handleSubmit, handleChange, values, touched, errors } = formik;\n\n  return (\n    <div className=\"App\" style={{}}>\n      <HtmlHead title={title} description={description} />\n      <Row>\n        <Col>\n          {/* Title Start */}\n          <section className=\"scroll-section\" id=\"title\">\n            <div className=\"page-title-container\">\n              <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n              <BreadcrumbList items={breadcrumbs} />\n            </div>\n          </section>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {parent.id && <h2 className=\"small-title\">Parent Info</h2>}\n\n          <Form\n            id=\"loginForm\"\n            className=\"tooltip-end-bottom\"\n            onSubmit={handleSubmit}\n          >\n            {parent.id && (\n              <Card className=\"mb-3\">\n                <Card.Body className=\"p-3\">\n                  <Row>\n                    <Col lg=\"2\" md=\"3\" sm=\"4\">\n                      <Form.Label className=\"col-form-label\">\n                        Title Parent\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"8\" md=\"9\" lg=\"10\">\n                      <Form.Label\n                        type=\"text\"\n                        className=\"col-form-label\"\n                        text={parent.title}\n                        name=\"parentTitle\"\n                        id=\"parentTitle\"\n                        value={parent.title}\n                        defaultValue={parent.title}\n                        readOnly={1}\n                      >\n                        {parent.title}\n                      </Form.Label>\n                      {errors.parentTitle && touched.parentTitle && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.parentTitle}\n                        </div>\n                      )}\n                      <Form.Label\n                        type=\"text\"\n                        name=\"parentId\"\n                        id=\"parentId\"\n                        defaultValue={parent.id}\n                        value={parent.id}\n                        readOnly={1}\n                        hidden={1}\n                      />\n                    </Col>\n                  </Row>\n                </Card.Body>\n              </Card>\n            )}\n            <h2 className=\"small-title\">\n              {parent.id ? \"Child Info\" : \"Parent Info\"}\n            </h2>\n            <Card className=\"mb-2\">\n              <Card.Body className=\"p-3\">\n                <Row className=\"mb-2 filled tooltip-end-top\">\n                  <Col lg=\"2\" md=\"3\" sm=\"4\">\n                    <Form.Label className=\"col-form-label\">\n                      Title {!isParentMode && \"Child\"}\n                    </Form.Label>\n                  </Col>\n                  <Col sm=\"8\" md=\"9\" lg=\"10\">\n                    <Form.Control\n                      type=\"text\"\n                      name=\"childTitle\"\n                      id=\"childTitle\"\n                      values={values.childTitle}\n                      value={values.childTitle}\n                      onChange={handleChange}\n                    />\n                    {errors.childTitle && touched.childTitle && (\n                      <div className=\"d-block invalid-tooltip\">\n                        {errors.childTitle}\n                      </div>\n                    )}\n                  </Col>\n                </Row>\n                <Row className=\"mb-2 filled tooltip-end-top\">\n                  <Col lg=\"2\" md=\"3\" sm=\"4\">\n                    <Form.Label className=\"col-form-label\">\n                      Description {!isParentMode && \"Child\"}\n                    </Form.Label>\n                  </Col>\n                  <Col sm=\"8\" md=\"9\" lg=\"10\">\n                    <Form.Control\n                      type=\"text\"\n                      name=\"childDesc\"\n                      id=\"childDesc\"\n                      values={values.childDesc}\n                      value={values.childDesc}\n                      onChange={handleChange}\n                    />\n                    {errors.childDesc && touched.childDesc && (\n                      <div className=\"d-block invalid-tooltip\">\n                        {errors.childDesc}\n                      </div>\n                    )}\n                  </Col>\n                </Row>\n                <Row className=\"mb-2 filled tooltip-end-top\">\n                  <Col lg=\"2\" md=\"2\" sm=\"2\">\n                    <Form.Label className=\"col-form-label\">\n                      Start Date\n                    </Form.Label>\n                  </Col>\n                  <Col sm=\"4\" md=\"4\" lg=\"4\">\n                    {/* <Form.Control type=\"text\" name=\"startDate\" id=\"startDate\" defaultValue=\"\"/> */}\n                    <DatePicker\n                      className=\"form-control\"\n                      name=\"startDates\"\n                      id=\"startDates\"\n                      value={startDate}\n                      values={startDate}\n                      selected={startDate}\n                      onChange={(date) => setStartDate(date)}\n                    />\n                    {errors.startDate && touched.startDate && (\n                      <div className=\"d-block invalid-tooltip\">\n                        {errors.startDate}\n                      </div>\n                    )}\n                  </Col>\n                  <Col lg=\"2\" md=\"2\" sm=\"2\">\n                    <Form.Label className=\"col-form-label\">Due Date</Form.Label>\n                  </Col>\n                  <Col sm=\"4\" md=\"4\" lg=\"4\">\n                    {/* <Form.Control type=\"text\" name=\"dueDate\" id=\"dueDate\" defaultValue=\"\"/> */}\n                    <DatePicker\n                      className=\"form-control\"\n                      name=\"dueDates\"\n                      id=\"dueDates\"\n                      value={dueDate}\n                      values={dueDate}\n                      selected={dueDate}\n                      onChange={(date) => setDueDate(date)}\n                    />\n                    {errors.dueDate && touched.dueDate && (\n                      <div className=\"d-block invalid-tooltip\">\n                        {errors.dueDate}\n                      </div>\n                    )}\n                  </Col>\n                </Row>\n                <Row className=\"mb-2 filled tooltip-end-top\">\n                  <Col lg=\"2\" md=\"2\" sm=\"2\">\n                    <Form.Label className=\"col-form-label\">\n                      Background-color\n                    </Form.Label>\n                  </Col>\n                  <Col sm=\"4\" md=\"4\" lg=\"4\" height=\"200px\">\n                    <Form.Control\n                      type=\"text\"\n                      name=\"backCol\"\n                      id=\"backCol\"\n                      value={blockPickerColor}\n                      values={blockPickerColor}\n                      readOnly={1}\n                      onChange={handleChange}\n                    />\n                    {errors.backCol && touched.backCol && (\n                      <div className=\"d-block invalid-tooltip\">\n                        {errors.backCol}\n                      </div>\n                    )}\n                    <div className=\"blockpicker\">\n                      <BlockPicker\n                        color={blockPickerColor}\n                        onChange={(color) => {\n                          setBlockPickerColor(color.hex);\n                        }}\n                      />\n                    </div>\n                  </Col>\n                </Row>\n                <Row className=\"mb-2 filled tooltip-end-top\">\n                  <Col lg=\"2\" md=\"3\" sm=\"4\">\n                    <Form.Label className=\"col-form-label\">\n                      Indikator\n                    </Form.Label>\n                  </Col>\n                  <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">\n                    <InputGroup>\n                      {/* <Form.Control name=\"ind\" placeholder=\"Indikator\" aria-label=\"\" /> */}\n                      <Button\n                        variant=\"outline-primary\"\n                        onClick={() => handleClickAddIndButton()}\n                      >\n                        <CsLineIcons icon=\"plus\" />\n                      </Button>\n                    </InputGroup>\n                  </Col>\n                </Row>\n                {/* <Row className=\"mb-2 filled tooltip-end-top\">\n                                    <Col lg=\"2\" md=\"3\" sm=\"4\"> </Col>\n                                    <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">  \n                                        <InputGroup>\n                                            <Form.Control name=\"ind\" placeholder=\"Indikator\" aria-label=\"\" />\n                                            <Button variant=\"outline-danger\">\n                                                <CsLineIcons icon=\"multiply\" />\n                                            </Button>\n                                        </InputGroup>\n                                    </Col>\n                                </Row> */}\n                <div className=\"display-data-Container\">\n                  {rowState.map((row, idx) => {\n                    return (\n                      <RowInd\n                        key={idx}\n                        value={row.value}\n                        onChange={(e) => updateValue(e, idx)}\n                        onDelete={(e) => deleteRows(row.value)}\n                      />\n                    );\n                  })}\n                </div>\n                <Row className=\"mt-5\">\n                  <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                  <Col sm=\"8\" md=\"9\" lg=\"10\">\n                    <div className=\"btn-group\">\n                      <Button\n                        type=\"submit\"\n                        variant=\"outline-primary\"\n                        className=\"mb-1\"\n                      >\n                        Submit\n                      </Button>\n                      <Button\n                        id=\"backButton\"\n                        name=\"backButton\"\n                        type=\"button\"\n                        variant=\"outline-warning\"\n                        className=\"mb-1\"\n                        onClick={handleClickBackButton}\n                      >\n                        Back\n                      </Button>\n                    </div>\n                  </Col>\n                </Row>\n              </Card.Body>\n            </Card>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default TreeAdminAddChild;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-update/index.js",["535","536","537"],"import React, { useState, useRef } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Row,\n  Col,\n  Card,\n  Form,\n  InputGroup,\n  Modal,\n} from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport HtmlHead from \"components/html-head/HtmlHead\";\nimport BreadcrumbList from \"components/breadcrumb-list/BreadcrumbList\";\nimport CsLineIcons from \"cs-line-icons/CsLineIcons\";\nimport useCustomLayout from \"hooks/useCustomLayout\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useWindowSize } from \"hooks/useWindowSize\";\nimport { toast } from \"react-toastify\";\nimport { BlockPicker } from \"react-color\";\nimport { EditNode } from \"../../../services/treeservice\";\nimport { DEFAULT_PATHS } from \"../../../config\";\nimport { LAYOUT } from \"../../../constants\";\n\nconst RowInd = function (propss) {\n  const { value, onChange, onDelete } = propss;\n  // console.log(props);\n  return (\n    <Row className=\"mb-2 filled tooltip-end-top\">\n      <Col lg=\"2\" md=\"3\" sm=\"4\">\n        {\" \"}\n      </Col>\n      <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">\n        <InputGroup>\n          <Form.Control\n            name=\"ind\"\n            placeholder=\"Indikator\"\n            aria-label=\"\"\n            value={value}\n            onChange={onChange}\n          />\n          <Button variant=\"outline-danger\" onClick={onDelete}>\n            <CsLineIcons icon=\"multiply\" />\n          </Button>\n        </InputGroup>\n      </Col>\n    </Row>\n  );\n};\n\nconst showModalInitialValue = { isVisible: false, data: null };\n\nconst TreeAdminUpdate = (props) => {\n  const appRoot = DEFAULT_PATHS.APP.endsWith(\"/\")\n    ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length)\n    : DEFAULT_PATHS.APP;\n  const history = useHistory();\n  const { id } = useParams();\n  const states = props;\n  const parent = states.location.state;\n  // console.log(parent);\n  // console.log(parent.title);\n  // console.log(rowsId);\n  const [startDate, setStartDate] = useState(new Date());\n  const [dueDate, setDueDate] = useState(new Date());\n  const [modalConfirmation, setModalConfirmation] = useState(\n    showModalInitialValue\n  );\n\n  useCustomLayout({ layout: LAYOUT.Boxed });\n  const ref = useRef(null);\n  const { currentUser, isLogin } = useSelector((state) => state.auth);\n  const styBack =\n    parent.typeGoals.background !== null && parent.typeGoals.background !== \"\"\n      ? parent.typeGoals.background\n      : \"\";\n  const [blockPickerColor, setBlockPickerColor] = useState(styBack);\n\n  const indik =\n    parent.indikator !== null && parent.indikator !== \"\"\n      ? parent.indikator\n      : \"\";\n  const rowsId = [];\n  // console.log(indik);\n  indik.forEach((el) => {\n    const obj = { value: el.indikator };\n    rowsId.push(obj);\n  });\n  // setRowState(rowsId);\n\n  const [rowState, setRowState] = useState(rowsId);\n\n  const title = \"Update Node Page\";\n  const description = \"An page for update the tree view node.\";\n  const breadcrumbs = [\n    { to: ``, text: \"Home\" },\n    { to: `tree/treeadmin`, text: \"Tree Admin\" },\n    { to: `tree/treeadmin/${id}/detail`, text: \"Tree Admin Detail\" },\n  ];\n\n  const handleClickBackButton = () => {\n    const path = `${appRoot}/tree/treeadmf`;\n    // console.log(path);\n    history.push(path);\n  };\n\n  const handleClickAddIndButton = () => {\n    const rows = [...rowState];\n    // rows = rowState;\n    rows.push({ value: \"\" });\n    // console.log('click button',rows);\n    setRowState(rows);\n    // console.log(newrows);\n    // this.displayData.push(<div  id=\"display-data\"><pre>{this.state.postVal}</pre></div>);\n    // this.setState({\n    //     showdata : this.displayData,\n    //     postVal : \"\"\n    // });\n  };\n\n  const updateValue = (e, idx) => {\n    const rows = [...rowState]; // copy array because we don't want to mutate the previous one\n    rows[idx].value = e.target.value;\n    // console.log('update value',rows);\n    setRowState(rows);\n  };\n\n  const deleteRows = (val) => {\n    const rows = [...rowState].filter((e) => e.value !== val);\n    // console.log(rows);\n    setRowState(rows);\n  };\n\n  const onSubmit = (values, isConfirm = false) => {\n    console.log(\"values\", values);\n    let textCol = \"#000\";\n    if (blockPickerColor === \"#697689\" || blockPickerColor === \"#555555\") {\n      textCol = \"#fff\";\n    }\n    const type = {\n      background: blockPickerColor,\n      color: textCol,\n    };\n    const indRes = [];\n    rowState.forEach((el, idx) => {\n      const obj = { key: idx.toString(), indikator: el.value };\n      indRes.push(obj);\n    });\n\n    if (values.status === \"0\" && !isConfirm) {\n      setModalConfirmation({ isVisible: true, data: values });\n      return;\n    }\n    // console.log('submit form', JSON.stringify(indRes));\n    // console.log('submit form', values);\n    EditNode(\n      currentUser.token,\n      values.id,\n      values.title,\n      values.desc,\n      currentUser.email,\n      startDate,\n      dueDate,\n      values.status,\n      type,\n      indRes ? JSON.stringify(indRes) : null\n    ).then(function (response) {\n      //   console.log(response);\n      if (response) {\n        if (response.responseCode === 200) {\n          toast.success(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n          history.goBack();\n        } else {\n          toast.error(response.responseDesc, {\n            position: \"top-right\",\n            autoClose: 1000,\n          });\n        }\n      }\n    });\n  };\n\n  const validationSchema = Yup.object().shape({\n    id: Yup.string().required(\"Id Title is required\"),\n    title: Yup.string().required(\"Title is required\"),\n    desc: Yup.string().required(\"Description is required\"),\n    // startDate: Yup.string().required('Start date is required'),\n    // dueDate: Yup.string().required('Due date is required'),\n  });\n\n  const initialValues = {\n    id: parent.id,\n    title: parent.title,\n    desc: parent.desc,\n    startDate: parent.startDate,\n    dueDate: parent.dueDate,\n    status: parent.status ? `${parent.status}` : \"0\",\n    backCol: blockPickerColor,\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: (val) => onSubmit(val),\n  });\n  const { handleSubmit, handleChange, setFieldValue, values, touched, errors } =\n    formik;\n\n  return (\n    <div className=\"App\" style={{}}>\n      <HtmlHead title={title} description={description} />\n      <>\n        <Row>\n          <Col>\n            <section className=\"scroll-section\" id=\"title\">\n              <div className=\"page-title-container\">\n                <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                <BreadcrumbList items={breadcrumbs} />\n              </div>\n            </section>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h2 className=\"small-title\">Node Info</h2>\n            <Form\n              id=\"loginForm\"\n              className=\"tooltip-end-bottom\"\n              onSubmit={handleSubmit}\n            >\n              <Card className=\"mb-2\">\n                <Card.Body className=\"p-3\">\n                  <Row className=\"mb-2 filled tooltip-end-top\">\n                    <Col lg=\"2\" md=\"3\" sm=\"4\">\n                      <Form.Label className=\"col-form-label\">\n                        Id Title\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"8\" md=\"9\" lg=\"10\">\n                      <Form.Control\n                        type=\"text\"\n                        name=\"title\"\n                        id=\"title\"\n                        value={values.id}\n                        onChange={handleChange}\n                        readOnly={1}\n                      />\n                      {errors.id && touched.id && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.id}\n                        </div>\n                      )}\n                    </Col>\n                  </Row>\n                  <Row className=\"mb-2 filled tooltip-end-top\">\n                    <Col lg=\"2\" md=\"3\" sm=\"4\">\n                      <Form.Label className=\"col-form-label\">Title</Form.Label>\n                    </Col>\n                    <Col sm=\"8\" md=\"9\" lg=\"10\">\n                      <Form.Control\n                        type=\"text\"\n                        name=\"title\"\n                        id=\"title\"\n                        value={values.title}\n                        onChange={handleChange}\n                      />\n                      {errors.title && touched.title && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.title}\n                        </div>\n                      )}\n                    </Col>\n                  </Row>\n                  <Row className=\"mb-2 filled tooltip-end-top\">\n                    <Col lg=\"2\" md=\"3\" sm=\"4\">\n                      <Form.Label className=\"col-form-label\">\n                        Description\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"8\" md=\"9\" lg=\"10\">\n                      <Form.Control\n                        type=\"text\"\n                        name=\"desc\"\n                        id=\"desc\"\n                        value={values.desc}\n                        onChange={handleChange}\n                      />\n                      {errors.desc && touched.desc && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.desc}\n                        </div>\n                      )}\n                    </Col>\n                  </Row>\n                  <Row className=\"mb-2 filled tooltip-end-top\">\n                    <Col lg=\"2\" md=\"2\" sm=\"2\">\n                      <Form.Label className=\"col-form-label\">\n                        Start Date\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"4\" md=\"4\" lg=\"4\">\n                      {/* <Form.Control type=\"text\" name=\"startDate\" id=\"startDate\" defaultValue=\"\"/> */}\n                      <DatePicker\n                        className=\"form-control\"\n                        name=\"startDates\"\n                        id=\"startDates\"\n                        value={startDate === \"\" ? parent.startDate : startDate}\n                        selected={startDate}\n                        onChange={(date) => setStartDate(date)}\n                      />\n                      {errors.startDate && touched.startDate && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.startDate}\n                        </div>\n                      )}\n                    </Col>\n                    <Col lg=\"2\" md=\"2\" sm=\"2\">\n                      <Form.Label className=\"col-form-label\">\n                        Due Date\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"4\" md=\"4\" lg=\"4\">\n                      {/* <Form.Control type=\"text\" name=\"dueDate\" id=\"dueDate\" defaultValue=\"\"/> */}\n                      <DatePicker\n                        className=\"form-control\"\n                        name=\"dueDates\"\n                        id=\"dueDates\"\n                        value={dueDate === \"\" ? parent.dueDate : dueDate}\n                        selected={dueDate}\n                        onChange={(date) => setDueDate(date)}\n                      />\n                      {errors.dueDate && touched.dueDate && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.dueDate}\n                        </div>\n                      )}\n                    </Col>\n                  </Row>\n                  <Row className=\"mb-3\">\n                    <Col lg=\"2\" md=\"3\" sm=\"4\">\n                      <Form.Label className=\"col-form-label\">Status</Form.Label>\n                    </Col>\n                    <Col sm=\"8\" md=\"9\" lg=\"10\">\n                      <Form.Check\n                        type=\"checkbox\"\n                        className=\"mt-2\"\n                        label=\"active\"\n                        id=\"status\"\n                        name=\"status\"\n                        checked={values.status === \"1\"}\n                        onChange={(e) =>\n                          setFieldValue(\"status\", e.target.checked ? \"1\" : \"0\")\n                        }\n                      />\n                      {errors.status && touched.status && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.status}\n                        </div>\n                      )}\n                    </Col>\n                  </Row>\n                  <Row className=\"mb-2 filled tooltip-end-top\">\n                    <Col lg=\"2\" md=\"2\" sm=\"2\">\n                      <Form.Label className=\"col-form-label\">\n                        Background-color\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"4\" md=\"4\" lg=\"4\" height=\"200px\">\n                      <Form.Control\n                        type=\"text\"\n                        name=\"backCol\"\n                        id=\"backCol\"\n                        value={blockPickerColor}\n                        values={blockPickerColor}\n                        readOnly={1}\n                        onChange={handleChange}\n                      />\n                      {errors.backCol && touched.backCol && (\n                        <div className=\"d-block invalid-tooltip\">\n                          {errors.backCol}\n                        </div>\n                      )}\n                      <div className=\"blockpicker\">\n                        <BlockPicker\n                          color={blockPickerColor}\n                          onChange={(color) => {\n                            setBlockPickerColor(color.hex);\n                          }}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                  <Row className=\"mb-2 filled tooltip-end-top\">\n                    <Col lg=\"2\" md=\"3\" sm=\"4\">\n                      <Form.Label className=\"col-form-label\">\n                        Indikator\n                      </Form.Label>\n                    </Col>\n                    <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">\n                      <InputGroup>\n                        {/* <Form.Control name=\"ind\" placeholder=\"Indikator\" aria-label=\"\" /> */}\n                        <Button\n                          variant=\"outline-primary\"\n                          onClick={() => handleClickAddIndButton()}\n                        >\n                          <CsLineIcons icon=\"plus\" />\n                        </Button>\n                      </InputGroup>\n                    </Col>\n                  </Row>\n                  {/* <Row className=\"mb-2 filled tooltip-end-top\">\n                                    <Col lg=\"2\" md=\"3\" sm=\"4\"> </Col>\n                                    <Col sm=\"8\" md=\"9\" lg=\"10\" height=\"200px\">  \n                                        <InputGroup>\n                                            <Form.Control name=\"ind\" placeholder=\"Indikator\" aria-label=\"\" />\n                                            <Button variant=\"outline-danger\">\n                                                <CsLineIcons icon=\"multiply\" />\n                                            </Button>\n                                        </InputGroup>\n                                    </Col>\n                                </Row> */}\n                  <div className=\"display-data-Container\">\n                    {rowState.map((row, idx) => {\n                      return (\n                        <RowInd\n                          key={idx}\n                          value={row.value}\n                          onChange={(e) => updateValue(e, idx)}\n                          onDelete={(e) => deleteRows(row.value)}\n                        />\n                      );\n                    })}\n                  </div>\n                  <Row className=\"mt-5\">\n                    <Col lg=\"2\" md=\"3\" sm=\"4\" />\n                    <Col sm=\"8\" md=\"9\" lg=\"10\">\n                      <div className=\"btn-group\">\n                        <Button\n                          type=\"submit\"\n                          variant=\"outline-primary\"\n                          className=\"mb-1\"\n                        >\n                          Submit\n                        </Button>\n                        <Button\n                          id=\"backButton\"\n                          name=\"backButton\"\n                          type=\"button\"\n                          variant=\"outline-warning\"\n                          className=\"mb-1\"\n                          onClick={() => handleClickBackButton()}\n                        >\n                          Back\n                        </Button>\n                      </div>\n                    </Col>\n                  </Row>\n                </Card.Body>\n              </Card>\n            </Form>\n          </Col>\n        </Row>\n        <Modal\n          show={modalConfirmation.isVisible}\n          onHide={() => setModalConfirmation(showModalInitialValue)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Attention</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Are you sure want to deactivate this node ?</Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => setModalConfirmation(showModalInitialValue)}\n            >\n              Close\n            </Button>\n            <Button\n              onClick={() => {\n                onSubmit(modalConfirmation.data, true);\n                setModalConfirmation(showModalInitialValue);\n              }}\n            >\n              Save\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    </div>\n  );\n};\n\nexport default TreeAdminUpdate;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/index.js",["538"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport { Badge, Button, Col, Row, Spinner } from \"react-bootstrap\";\nimport {\n  useTable,\n  useGlobalFilter,\n  useSortBy,\n  usePagination,\n  useRowSelect,\n  useRowState,\n} from \"react-table\";\nimport HtmlHead from \"components/html-head/HtmlHead\";\nimport BreadcrumbList from \"components/breadcrumb-list/BreadcrumbList\";\nimport ControlsPageSize from \"./components/ControlsPageSize\";\nimport ControlsSearch from \"./components/ControlsSearch\";\nimport ModalAddEdit from \"./components/ModalAddEdit\";\nimport Table from \"./components/Table\";\nimport TablePagination from \"./components/TablePagination\";\nimport { Link } from \"react-router-dom\";\nimport { DEFAULT_PATHS } from \"config\";\nimport { InitialGoals } from \"services/treeservice\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport CsLineIcons from \"cs-line-icons/CsLineIcons\";\n\nconst TreeAdminIndex = () => {\n  const history = useHistory();\n  const appRoot = DEFAULT_PATHS.APP.endsWith(\"/\")\n    ? DEFAULT_PATHS.APP.slice(1, DEFAULT_PATHS.APP.length)\n    : DEFAULT_PATHS.APP;\n  const title = \"Tree Admin\";\n  const description = \"Separate rows with edit, delete and add.\";\n\n  const breadcrumbs = [\n    { to: \"\", text: \"Home\" },\n    // { to: \"interface\", text: \"Interface\" },\n    // { to: \"interface/plugins\", title: \"Plugins\" },\n    // { to: \"interface/plugins/datatables\", title: \"Datatables\" },\n  ];\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [initialGoals, setInitialGoals] = useState([]);\n\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"Title\",\n        accessor: \"title_goals\",\n        sortable: true,\n        headerClassName: \"text-muted text-small text-uppercase w-30\",\n        Cell: ({ cell, row }) => {\n          return (\n            <Link\n              className=\"list-item-heading body\"\n              to={{\n                pathname: `${appRoot}/tree/treeadmin/${row.original.parent_family}/detail`,\n                state: row.original,\n              }}\n            >\n              {cell.value}\n            </Link>\n          );\n        },\n      },\n      {\n        Header: \"Description\",\n        accessor: \"desc_goals\",\n        sortable: true,\n        headerClassName: \"text-muted text-small text-uppercase w-10\",\n      },\n      {\n        Header: \"PIC\",\n        accessor: \"pic_goals\",\n        sortable: true,\n        headerClassName: \"text-muted text-small text-uppercase w-10\",\n      },\n      {\n        Header: \"Last Modified\",\n        accessor: \"last_modified_date\",\n        sortable: true,\n        headerClassName: \"text-muted text-small text-uppercase w-20\",\n      },\n      {\n        Header: \"Tag\",\n        accessor: \"tag\",\n        sortable: true,\n        headerClassName: \"text-muted text-small text-uppercase w-10\",\n        Cell: ({ cell }) => {\n          return <Badge bg=\"outline-primary\">{cell.value}</Badge>;\n        },\n      },\n    ];\n  }, [appRoot]);\n\n  const { currentUser } = useSelector((state) => state.auth);\n\n  const [isOpenAddEditModal, setIsOpenAddEditModal] = useState(false);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data: initialGoals,\n      setData: setInitialGoals,\n      isOpenAddEditModal,\n      setIsOpenAddEditModal,\n      initialState: { pageIndex: 0 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useRowState\n  );\n\n  const getInitialGoals = () => {\n    let result = null;\n    setIsLoading(true);\n    InitialGoals(currentUser.token)\n      .then(function (response) {\n        if (response) {\n          if (response.responseCode === 200) {\n            result = response.responseData;\n            setInitialGoals(result);\n          }\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  console.log(\"first\", initialGoals);\n\n  const handleClickAddParentButton = () => {\n    const path = `${appRoot}/tree/treeadmin/addchild`;\n    history.push({\n      pathname: path,\n      state: {\n        id: null,\n        title: null,\n      },\n    });\n  };\n\n  useEffect(() => {\n    getInitialGoals();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <HtmlHead title={title} description={description} />\n\n      <Row>\n        <Col>\n          <div className=\"page-title-container\">\n            <Row>\n              <Col xs=\"12\" md=\"7\">\n                <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                <BreadcrumbList items={breadcrumbs} />\n              </Col>\n              <Col\n                xs=\"12\"\n                md=\"5\"\n                className=\"d-flex align-items-start justify-content-end\"\n              >\n                <Button\n                  variant=\"outline-primary\"\n                  className=\"btn-icon btn-icon-start w-100 w-md-auto add-datatable\"\n                  onClick={handleClickAddParentButton}\n                >\n                  <CsLineIcons icon=\"plus\" /> <span>Add New Parent</span>\n                </Button>\n              </Col>\n            </Row>\n          </div>\n\n          <div>\n            <Row className=\"mb-3\">\n              <Col sm=\"12\" md=\"5\" lg=\"3\" xxl=\"2\">\n                <div className=\"d-inline-block float-md-start me-1 mb-1 mb-md-0 search-input-container w-100 shadow bg-foreground\">\n                  {/* <ControlsSearch tableInstance={tableInstance} /> */}\n                </div>\n              </Col>\n              <Col sm=\"12\" md=\"7\" lg=\"9\" xxl=\"10\" className=\"text-end\">\n                <div className=\"d-inline-block me-0 me-sm-3 float-start float-md-none\"></div>\n                <div className=\"d-inline-block\">\n                  <ControlsPageSize tableInstance={tableInstance} />\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs=\"12\">\n                <Table\n                  className=\"react-table rows\"\n                  tableInstance={tableInstance}\n                />\n              </Col>\n              <Col xs=\"12\">\n                {isLoading ? (\n                  <div className=\"d-flex justify-content-center\">\n                    <Spinner animation=\"border\" />\n                  </div>\n                ) : (\n                  <TablePagination\n                    id=\"table-treeadmin\"\n                    tableInstance={tableInstance}\n                  />\n                )}\n              </Col>\n            </Row>\n          </div>\n          <ModalAddEdit tableInstance={tableInstance} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default TreeAdminIndex;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeview-dabeng/index.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/areaservice.js",["539","540","541","542","543","544","545","546"],"import axios from 'axios';\nimport { URL_SERVICE } from 'config.js';\n\nlet response = {\n    responseCode : 999,\n    responseDesc : \"\",\n    responseData : null,\n};\n\nexport const GetAllAreas = async (token,paging) => {\n    const params = new URLSearchParams();\n    params.append('page',paging);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/allareapage`,params, header)\n    .then(res => {\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const GetAllAreasSelection = async (token,id_area,id_sub_area) => {\n    const params = new URLSearchParams();\n    params.append('id_area',id_area);\n    params.append('id_sub_area',id_sub_area);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/allarea`,params, header)\n    .then(res => {\n        let resData = [];\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    res.data.data.forEach(element => {\n                        const obj = {};\n                        if(element.id_sub_area != undefined && element.id_sub_area != null) {\n                            obj.value = element.id_sub_area;\n                            obj.label =  element.desc_sub_area;\n                            resData.push(obj);\n                        }\n                    });\n                    // console.log(resData);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : resData,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const GetParentAreasSelection = async (token,id_area) => {\n    const params = new URLSearchParams();\n    params.append('id_area',id_area);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/allparentarea`,params, header)\n    .then(res => {\n        let resData = [];\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    res.data.data.forEach(element => {\n                        const obj = {};\n                        if(element.id_sub_area != undefined && element.id_sub_area != null) {\n                            obj.value = element.id_sub_area;\n                            obj.label =  element.desc_sub_area;\n                            resData.push(obj);\n                        }\n                    });\n                    // console.log(resData);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : resData,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const FindAreas = async (token,paging,filter) => {\n    const params = new URLSearchParams();\n    params.append('page',paging);\n    params.append('search',filter);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/findareapage`,params, header)\n    .then(res => {\n        console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const EditAreas = async (token,id_area,id_sub_area,desc_sub_area,id_parent_area,active) => {\n    const params = new URLSearchParams();\n    params.append('id_area',id_area);\n    params.append('id_sub_area',id_sub_area);\n    params.append('desc_sub_area',desc_sub_area);\n    params.append('id_parent_area',id_parent_area);\n    params.append('active',active);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/editarea`,params, header)\n    .then(res => {\n        console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const AddAreaService = async (token,id_area,desc_area,desc_sub_area,id_parent_area,active) => {\n    const params = new URLSearchParams();\n    params.append('id_area',id_area);\n    params.append('desc_area',desc_area);\n    params.append('desc_sub_area',desc_sub_area);\n    params.append('id_parent_area',id_parent_area);\n    params.append('active',active);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/addarea`,params, header)\n    .then(res => {\n        console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/clusterservice.js",["547","548","549","550"],"import axios from 'axios';\nimport { URL_SERVICE } from 'config.js';\n\nlet response = {\n    responseCode : 999,\n    responseDesc : \"\",\n    responseData : null,\n};\n\n\nexport const GetAllCluster = async (token,paging) => {\n    const params = new URLSearchParams();\n    params.append('page',paging);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}cluster/allclusterpage`,params, header)\n    .then(res => {\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const FindCluster = async (token,paging,filter) => {\n    const params = new URLSearchParams();\n    params.append('page',paging);\n    params.append('search',filter);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}cluster/findclusterpage`,params, header)\n    .then(res => {\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const AddClusterService = async (token,nama_cluster,id_area,id_sub_areas,flag_active,createdAt) => {\n    const params = new URLSearchParams();\n    params.append('nama_cluster',nama_cluster);\n    params.append('id_area',id_area);\n    params.append('id_sub_area',id_sub_areas);\n    params.append('createdAt',createdAt);\n    params.append('flag_active',flag_active);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}cluster/addcluster`,params, header)\n    .then(res => {\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const EditClusterService = async (token,id_cluster,nama_cluster,id_area,id_sub_areas,flag_active,createdAt) => {\n    const params = new URLSearchParams();\n    params.append('id_cluster',id_cluster);\n    params.append('nama_cluster',nama_cluster);\n    params.append('id_area',id_area);\n    params.append('id_sub_areas',[]);\n    params.append('createdAt',createdAt);\n    params.append('flag_active',flag_active);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}cluster/editcluster`,params, header)\n    .then(res => {\n        // console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/signin.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/Layout.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeview-dabeng/view.js",["551"],"import React, { useEffect, useRef, useState } from \"react\";\nimport _ from \"lodash\";\nimport { Row, Col, Card, Button, Tab, Nav, Form } from \"react-bootstrap\";\nimport HtmlHead from \"components/html-head/HtmlHead\";\nimport BreadcrumbList from \"components/breadcrumb-list/BreadcrumbList\";\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\nimport CsLineIcons from \"cs-line-icons/CsLineIcons\";\nimport OrganizationChart from \"../../../components/org-chart/ChartContainer\";\nimport MyNode from \"../../../components/node/mynode\";\nimport SelectMultiple from \"components/select/SelectMultiple\";\nimport { el } from \"date-fns/locale\";\n\nconst View = ({\n  title,\n  description,\n  breadcrumbs = [],\n  trees = null,\n  selectedParents = [],\n  initialGoals = [],\n  onNodeClicked,\n  show,\n  nodeData,\n  indData,\n  styleBackround,\n  styleColor,\n  onCompClose,\n  onSelectedParents,\n  onTreeLoaded,\n}) => {\n  const orgchart = useRef([]);\n  const [navActiveKey, setNavActiveKey] = useState(\"\");\n\n  const exportTo = (index) => {\n    orgchart.current[index].exportTo(\"organization_chart\", \"pdf\");\n  };\n\n  useEffect(() => {\n    if (selectedParents.length === 1) {\n      setNavActiveKey(`tab-${selectedParents?.[0]?.value?.id_goals}`);\n    }\n  }, [selectedParents]);\n\n  return (\n    <div className=\"App2\">\n      {/* {setLoading(true)} */}\n      <HtmlHead title={title} description={description} />\n      <Row>\n        <Col>\n          {/* Title Start */}\n          <section className=\"scroll-section\" id=\"title\">\n            <div className=\"page-title-container\">\n              <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n              <BreadcrumbList items={breadcrumbs} />\n            </div>\n\n            <Row className=\"align-items-end justify-content-center\">\n              <Col lg=\"4\">\n                <Form.Label className=\"d-block\">Select Parent</Form.Label>\n                <SelectMultiple\n                  placeholder=\"Please Select the Parent First\"\n                  options={initialGoals.map((item) => ({\n                    label: item.title_goals,\n                    value: item,\n                  }))}\n                  onChange={(val) => {\n                    const current = selectedParents;\n                    const diff = _.difference(current, val);\n                    const isAdded = diff.length === 0;\n                    onSelectedParents(val);\n                    if (isAdded) {\n                      const lastItem = val?.[val.length - 1];\n                      onTreeLoaded(\n                        lastItem?.value?.parent_family,\n                        lastItem?.value?.id_goals\n                      );\n                    }\n                  }}\n                  value={selectedParents}\n                />\n              </Col>\n              <Col></Col>\n            </Row>\n            <Tab.Container activeKey={navActiveKey}>\n              <Nav\n                activeKey={navActiveKey}\n                variant=\"tabs\"\n                className=\"nav-tabs-title nav-tabs-line-title my-4 mx-1\"\n                onSelect={setNavActiveKey}\n              >\n                {selectedParents.map((item, index) => (\n                  <Nav.Item key={`tab-${index}`}>\n                    <Nav.Link eventKey={`tab-${item.value.id_goals}`}>\n                      {item.value.title_goals}\n                    </Nav.Link>\n                  </Nav.Item>\n                ))}\n              </Nav>\n              <Tab.Content>\n                {trees &&\n                  selectedParents.map((item, index) => (\n                    <Tab.Pane\n                      key={`content-${index}`}\n                      eventKey={`tab-${item.value.id_goals}`}\n                    >\n                      <div className=\"scroll-section EmptyDiv os-host os-host-foreign os-host-resize-disabled os-host-scrollbar-vertical-hidden os-host-transition\">\n                        {trees?.[item?.value?.id_goals] && (\n                          <OrganizationChart\n                            ref={(el) => (orgchart.current[index] = el)}\n                            key={`react-org-${item?.value?.id_goals}`}\n                            id=\"chartTree\"\n                            datasource={trees?.[item?.value?.id_goals]}\n                            chartClass=\"myChart\"\n                            NodeTemplate={MyNode}\n                            pan\n                            zoom\n                            onClickNode={(clickedNode) =>\n                              onNodeClicked(clickedNode)\n                            }\n                          />\n                        )}\n                        <Button\n                          onClick={() => exportTo(index)}\n                          variant=\"gradient-primary\"\n                          className=\"btn-icon btn-icon-end\"\n                          style={{ position: \"absolute\", right: 16, top: 8 }}\n                        >\n                          <span>Export To PDF</span>{\" \"}\n                          <CsLineIcons icon=\"download\" />\n                        </Button>\n                      </div>\n                    </Tab.Pane>\n                  ))}\n              </Tab.Content>\n            </Tab.Container>\n\n            {/* </Card> */}\n          </section>\n          {/* Title End */}\n          {/* <button\n            type=\"button\"\n            className=\"btn-icon btn-icon-start ms-1 btn btn-outline-primary\"\n          >\n            Click Me\n          </button> */}\n        </Col>\n      </Row>\n\n      <Offcanvas show={show} onHide={onCompClose} placement=\"end\" name=\"end\">\n        <Offcanvas.Header\n          closeButton\n          className=\"row\"\n          style={{ backgroundColor: styleBackround, color: styleColor }}\n        >\n          <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">\n            Title\n          </small>\n          <Offcanvas.Title className=\"sm-12\">\n            {nodeData.title_goals}\n          </Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body\n          style={{ background: \"var(--background-navcolor-dark)\" }}\n        >\n          <Card\n            className=\"mb-3\"\n            body\n            style={{ background: \"rgba(255,255,255,.05) !important\" }}\n          >\n            <Card.Header className=\"pt-0 pb-1\">\n              <div className=\"row mt-0 mb-0 d-flex align-items-start justify-content-end justify-content-lg-start\">\n                <small\n                  id=\"passwordHelpBlock\"\n                  className=\"form-text text-muted sm-12\"\n                >\n                  PIC\n                </small>\n                <span className=\"col-md col-6 sm-6\">{nodeData.pic_goals}</span>\n                <span className=\"col-md col-6 sm-6\"> </span>\n              </div>\n            </Card.Header>\n            <Card.Body>\n              <div className=\"row mt-0 mb-0\">\n                <small\n                  id=\"passwordHelpBlock\"\n                  className=\"form-text text-muted sm-12\"\n                >\n                  Description\n                </small>\n                <span className=\"sm-12\">\n                  <Card.Text>{nodeData.desc_goals}</Card.Text>\n                </span>\n              </div>\n            </Card.Body>\n            <Card.Body>\n              <div className=\"row mt-0 mb-0\">\n                <small\n                  id=\"passwordHelpBlock\"\n                  className=\"form-text text-muted sm-12\"\n                >\n                  Progress\n                </small>\n                <span className=\"sm-12\">\n                  <Card.Text>{nodeData.progress}</Card.Text>\n                </span>\n              </div>\n            </Card.Body>\n            <Card.Footer className=\"pt-0 pb-1\">\n              <div className=\"row mt-0 mb-0\">\n                <small\n                  id=\"passwordHelpBlock\"\n                  className=\"form-text text-muted sm-12 col-md col-6\"\n                >\n                  Start Date\n                </small>\n                <span className=\"col-md col-6 sm-12\">\n                  <Card.Text>{nodeData.start_date}</Card.Text>\n                </span>\n              </div>\n              <div className=\"row mt-0 mb-0\">\n                <small\n                  id=\"passwordHelpBlock\"\n                  className=\"form-text text-muted sm-12 col-md col-6\"\n                >\n                  End Date\n                </small>\n                <span className=\"col-md col-6 sm-12\">\n                  <Card.Text>{nodeData.due_date}</Card.Text>\n                </span>\n              </div>\n            </Card.Footer>\n          </Card>\n          <Card\n            className=\"mb-3\"\n            body\n            style={{ background: \"rgba(255,255,255,.05) !important\" }}\n          >\n            <Card.Header className=\"pt-0 pb-1\">\n              <div className=\"row mt-0 mb-0 d-flex align-items-start justify-content-end justify-content-lg-start\">\n                <small\n                  id=\"passwordHelpBlock\"\n                  className=\"form-text text-muted sm-12\"\n                >\n                  Indikator :{\" \"}\n                </small>\n              </div>\n            </Card.Header>\n            <Card.Body className=\"mb-n2 py-1\">{indData}</Card.Body>\n          </Card>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </div>\n  );\n};\n\nexport default View;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/treeservice.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/html-head/HtmlHead.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useCustomLayout.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/breadcrumb-list/BreadcrumbList.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/cs-line-icons/CsLineIcons.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/Table.js",["552","553"],"/* eslint-disable no-plusplus */\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst Table = ({ tableInstance, className = \"react-table boxed\" }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    page,\n    getTableBodyProps,\n    prepareRow,\n    toggleAllPageRowsSelected,\n    setIsOpenAddEditModal,\n  } = tableInstance;\n\n  return (\n    <>\n      <table className={className} {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, headerIndex) => (\n            <tr\n              key={`header${headerIndex}`}\n              {...headerGroup.getHeaderGroupProps()}\n            >\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <th\n                    key={`th.${index}`}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    className={classNames(column.headerClassName, {\n                      sorting_desc: column.isSortedDesc,\n                      sorting_asc: column.isSorted && !column.isSortedDesc,\n                      sorting: column.sortable,\n                    })}\n                  >\n                    {column.render(\"Header\")}\n                  </th>\n                );\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n\n            return (\n              <tr\n                key={`tr.${i}`}\n                {...row.getRowProps()}\n                className={classNames({ selected: row.isSelected })}\n              >\n                {row.cells.map((cell, cellIndex) => (\n                  <td\n                    key={`td.${cellIndex}`}\n                    {...cell.getCellProps()}\n                    // onClick={() => {\n                    //   if (cell.column.id === 'name') {\n                    //     toggleAllPageRowsSelected(false);\n                    //     row.toggleRowSelected();\n                    //     setIsOpenAddEditModal(true);\n                    //   } else {\n                    //     row.toggleRowSelected();\n                    //   }\n                    // }}\n                  >\n                    {cell.render(\"Cell\")}\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\nexport default Table;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/TablePagination.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/ModalAddEdit.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/ControlsPageSize.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/views/goals/treeadmin-index/components/ControlsSearch.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/LayoutFullpage.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/userservice.js",["554","555","556"],"import axios from 'axios';\nimport { URL_SERVICE } from 'config.js';\n\nlet response = {\n    responseCode : 999,\n    responseDesc : \"\",\n    responseData : null,\n};\n\nexport const GetAllUsers = async (token,paging) => {\n    const params = new URLSearchParams();\n    params.append('page',paging);\n\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}users/alluserspage`, params, header)\n    .then(res => {\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const FindUsers = async (token,paging,filter) => {\n    const params = new URLSearchParams();\n    params.append('page',paging);\n    params.append('search',filter);\n\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}users/finduserspage`, params, header)\n    .then(res => {\n        if(res) {\n            if(res.data) {\n                console.log(res.data);\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const GetAllArea = async (token) => {\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}area/allarea`, { }, header)\n    .then(res => {\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}\n\nexport const ManageUser = async (token,user,name,firstname,lastname,role,idarea,idsubarea,active) => {\n    const params = new URLSearchParams();\n    params.append('id_user',user);\n    params.append('user',name);\n    params.append('role',role);\n    params.append('firstname',firstname);\n    params.append('lastname',lastname);\n    params.append('area',idarea);\n    params.append('subarea',idsubarea);\n    params.append('active',active);\n    const header = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            'Authorization': `Bearer ${token}`,\n        },\n    };\n    const result = await axios.post( `${URL_SERVICE}users/manageuser`,params, header)\n    .then(res => {\n        console.log('result',res.data);\n        if(res) {\n            if(res.data) {\n                if(res.data.statusCode != undefined && res.data.statusCode != null) {\n                    // console.log(res.data.data);\n                    response = {\n                        responseCode : res.data.statusCode,\n                        responseDesc : res.data.message,\n                        responseData : res.data.data,\n                    };\n                }else{\n                    response = {\n                        responseCode : 999,\n                        responseDesc : 'Invalid response. 2',\n                        responseData : null,\n                    };\n                }\n            }else{\n                response = {\n                    responseCode : 999,\n                    responseDesc : 'Invalid response. 3',\n                    responseData : null,\n                };\n            }\n        }else{\n            response = {\n                responseCode : 999,\n                responseDesc : 'Failled to parse response.',\n                responseData : null,\n            };\n        }\n        return response;\n    })\n    .catch( function(error) {\n        if (error.response) {\n            // Request made and server responded\n            // console.log(error.response.data);\n            // console.log(error.response.status);\n            // console.log(error.response.headers);\n            response = {\n                responseCode : error.response.status,\n                responseDesc : error.response.data.message,\n                responseData : null,\n            };\n        } else if (error.request) {\n            // The request was made but no response was received\n            // console.log(error.request);\n            response = {\n                responseCode : 999,\n                responseDesc : error.request,\n                responseData : null,\n            };\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            // console.log('Error', error.message);\n            response = {\n                responseCode : 999,\n                responseDesc : `Something went wrong, ${error.message}`,\n                responseData : null,\n            };\n        }  \n        return response; \n    });\n    return result;\n}","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/services/defaultRes.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useWindowSize.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/node/mynode.js",["557"],"import React, { useState } from 'react';\nimport PropTypes from \"prop-types\";\nimport \"./mynode.css\";\nimport { Row, Col, Card } from \"react-bootstrap\";\n// import Offcanvas from 'react-bootstrap/Offcanvas';\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import styled from \"styled-components\";\n// import { Link } from 'react-router-dom';\n// import CardHeader from 'react-bootstrap/esm/CardHeader';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\n\n// const DropDownContainerNew = styled(\"div\")`\n//   width: 200px;\n//   margin: 0 auto;\n// `;\n\n// const DropDownContainerEdit = styled(\"div\")`\n//   width: 200px;\n//   margin: 0 auto;\n// `;\n\n// const DropDownHeaderNew = styled(\"div\")`\n//   margin-bottom: 0.8em;\n//   padding: 0.4em 2em 0.4em 1em;\n//   box-shadow: 0 2px 3px rgba(0, 0, 0, 0.15);\n//   font-weight: 500;\n//   font-size: 15px;\n//   color: #ffffff;\n//   background: #6593F5;\n//   border-radius:5px;\n// `;\n\n// const DropDownHeaderEdit = styled(\"div\")`\n//   margin-bottom: 0.8em;\n//   padding: 0.4em 2em 0.4em 1em;\n//   box-shadow: 0 2px 3px rgba(0, 0, 0, 0.15);\n//   font-weight: 500;\n//   font-size: 15px;\n//   color: #6593F5;\n//   background: #ffffff;\n//   border-radius:5px;\n//   border-color: #6593f5;\n//   border-width: 2px;\n//   border-style: solid;\n// `;\n\n// const DropDownListContainerNew = styled(\"div\")``;\n// const DropDownListContainerEdit = styled(\"div\")``;\n\n// const DropDownListNew = styled(\"ul\")`\n//   padding:0;\n//   margin-bottom: 40px;\n//   background: #ffffff;\n//   border: 2px solid #e5e5e5;\n//   box-sizing: border-box;\n//   color: #646464;\n//   font-size: 0px;\n//   font-weight: 400;\n//   &:first-child {\n//     padding-top: 0.8em;\n//   }\n//   border-radius:5px;\n// `;\n\n// const DropDownListEdit = styled(\"ul\")`\n//  padding:0;\n//   margin-bottom: 40px;\n//   background: #ffffff;\n//   border: 2px solid #e5e5e5;\n//   box-sizing: border-box;\n//   color: #646464;\n//   font-size: 0px;\n//   font-weight: 400;\n//   &:first-child {\n//     padding-top: 0.8em;\n//   }\n//   border-radius:5px;\n// `;\n\n// const ListItemNew = styled(\"li\")`\n//   list-style: none;\n//   padding:6px;\n//   margin-bottom:5px;\n//   font-size: 15px;\n// `;\n\n// const ListItemEdit = styled(\"li\")`\n//   list-style: none;\n//   padding:6px;\n//   margin-bottom:5px;\n//   font-size: 15px;\n// `;\n\nconst propTypes = {\n  // nodeData: PropTypes.object.isRequired\n  nodeData: PropTypes.oneOfType([PropTypes.object]).isRequired\n};\n\nconst MyNode = ({ nodeData }) => {\n  // console.log(nodeData);\n const [show,setShow] = useState(false);\n \n//  const CompClose = () => setShow(false);\n const CompShow = () => setShow(true);\n\n\n const ind = [];\n if(nodeData !== undefined && nodeData) {\n  if(nodeData.indikator !== undefined) {\n    nodeData.indikator.forEach((el) => {\n      // console.log(el);\n      ind.push(\n        <Row className=\"g-0 py-1\" key={el.key}>\n        <Col xs=\"auto\">\n          <div className=\"sw-3 d-inline-block d-flex justify-content-start align-items-center h-100\">\n            <div className=\"sh-3\">\n              <CsLineIcons icon=\"dashboard-1\" className=\"text-primary align-top\" />\n            </div>\n          </div>\n        </Col>\n        <Col>\n          <div className=\"d-flex flex-column pt-0 pb-0 ps-3 pe-4 h-100 justify-content-center\">\n            <div className=\"d-flex flex-column\">\n              <div className=\"text-alternate mt-n1 lh-1-25\" style={{fontSize: '12px'}}>{el.indikator}</div>\n            </div>\n          </div>\n        </Col>\n      </Row>\n      );\n     });\n  }\n }\n let back = null;\n let col = null;\n if(nodeData.type_goals !== undefined && nodeData.type_goals !== '' && nodeData.type_goals !== null) {\n  back = nodeData.type_goals.background !== null && nodeData.type_goals.background !== \"\" ? nodeData.type_goals.background : \"\";\n  col = nodeData.type_goals.color !== null && nodeData.type_goals.color !== \"\" ? nodeData.type_goals.color : \"\";\n }\n//  console.log(back);\n//  console.log(col);\n\n  return (\n     <div className=\"org-node-container\" key={nodeData.id_goals !== undefined ? nodeData.id_goals : ''} onClick={CompShow}>\n        <div  className=\"sw-40 hover-scale-up cursor-pointer card\" >\n            <div className=\"h-200 py-3 align-items-top card-body\" style={{backgroundColor:back, color:col, borderRadius:10}}>\n              <div className=\"g-0 h-200 align-items-top row\">\n                  <div className=\"pe-3 col-auto\">\n                      <div className=\"bg-gradient-light sh-5 sw-5 rounded-xl d-flex justify-content-center align-items-center\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"cs-icon sync-horizontal text-white\">\n                          <path d=\"M3 5 16 5.00001C17.1046 5.00001 18 5.89544 18 7.00001V8M17 15 4.00001 15C2.89544 15 2.00001 14.1046 2.00001 13V12\"> </path>\n                          <path d=\"M5 8 2 5 5 2M15 12 18 15 15 18\"> </path>\n                        </svg>\n                        {/* <canvas className=\"sw-8 sh-8\" width=\"128\" height=\"128\" style={{ display: 'block', bordersizing:'border-box',height:'64px', width:'64px' }} > </canvas> */}\n                      </div>\n                  </div>\n                  <div className=\"col\">\n                    <div className=\"gx-2 d-flex align-content-center row\">\n                      <div className=\"col-14 d-flex col-14\">\n                        <div className=\"d-flex align-items-center lh-2-25 \" style={{fontSize: '9px'}}>PIC : {nodeData.pic_goals !== undefined ? nodeData.pic_goals: ''}</div>\n                      </div>\n                      <div className=\"col-14 d-flex col-14\">\n                        <div className=\"cta-2\" style={{fontSize: '14px',color:col,}} >{nodeData.title_goals !== undefined ? nodeData.title_goals : ''}</div>\n                      </div>\n                      <div className=\"col-14 d-flex col-14\">\n                        <div className=\"d-flex align-items-center lh-1-25 clamp\">{nodeData.desc_goals !== undefined ? nodeData.desc_goals : ''}</div>\n                      </div>\n                    </div>\n                  </div> \n                </div>\n            </div>\n            <div className='h-100 py-2 align-items-top card-footer'>\n              <div className=\"g-0 h-100 align-items-top row\">\n                  <div className=\"col\">\n                      <div className=\"gx-2 d-flex align-content-center row\">\n                        <div className=\"col-14 d-flex col-14\">\n                          <div className=\"d-flex align-items-center lh-2-25 \" style={{fontSize: '12px'}}>Indikator : </div>\n                        </div>\n                      </div>\n                  </div>\n              </div>\n              <section className=\"scroll-section\" id=\"default\">\n                    <div className='row'>\n                      <Card>\n                        <Card.Body className=\"mb-n2 py-1\">\n                          {ind}\n                        </Card.Body>\n                      </Card>\n                    </div>\n              </section>\n            </div>\n        </div>\n        {/* <Card bg=\"warning\" text=\"white\" style={{ width: '18rem' }} className=\"mb-2\" onClick={ CompShow }>\n        <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n          <Card.Body>\n           <Card.Title>{nodeData.title_goals}</Card.Title>\n            <Card.Text>\n            {nodeData.desc_goals}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>2 days ago</Card.Footer>\n        </Card> */}\n\n\n      {/* <Modal className=\"\" show={ show } onHide={ CompClose }>\n        <Modal.Header closeButton>\n            <Modal.Title><div className=\"cta-2 text-primary\">{nodeData.title_goals}</div></Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"Model\">\n            <div className=\"modelBody\"> \n              <form className=''>\n                <fieldset disabled>\n                    <div className='mb-3 form-floating'>\n                      <input disabled className='form-control' value={nodeData.desc_goals !== \"\" && nodeData.desc_goals !== null ? nodeData.desc_goals : \" \"} />\n                      <label className='form-label'>desc goals</label>\n                    </div>\n                </fieldset>\n                <fieldset disabled>\n                    <div className='mb-3 form-floating'>\n                      <input disabled className='form-control' value={nodeData.pic_goals !== \"\" && nodeData.pic_goals !== null ? nodeData.pic_goals : \" \"} />\n                      <label className='form-label'>PIC</label>\n                    </div>\n                </fieldset>\n                <fieldset disabled className='row'>\n                    <div className='mb-3 form-floating col-sm-6'>\n                      <input disabled className='form-control' value={nodeData.start_date !== \"\" && nodeData.start_date !== null? nodeData.start_date  : \" \" } />\n                      <label className='form-label'>Start Date</label>\n                    </div>\n                    <div className='mb-3 form-floating col-sm-6'>\n                      <input disabled className='form-control' value={nodeData.due_date !== \"\" && nodeData.due_date !== null ? nodeData.due_date : \" \" } />\n                      <label className='form-label'>Due Date</label>\n                    </div>\n                </fieldset>\n                <fieldset disabled>\n                <div className='mb-3 form-floating'>\n                      <input disabled className='form-control' value={nodeData.last_modified_date !== \"\" && nodeData.last_modified_date !== null? nodeData.last_modified_date : \" \" } />\n                      <label className='form-label'>Last Modify Date</label>\n                    </div>\n                </fieldset>\n                <fieldset disabled>\n                    <div className='mb-3 form-floating'>\n                      <input disabled className='form-control' value={nodeData.progress !== \"\" && nodeData.progress !== null ? nodeData.progress : \" \" } />\n                      <label className='form-label'>Progress</label>\n                    </div>\n                </fieldset>\n                <fieldset disabled>\n                    <div className='mb-3 form-floating'>\n                      <input disabled className='form-control' value={nodeData.type_goals !== \"\" &&  nodeData.type_goals !== null ? nodeData.type_goals : \" \" } />\n                      <label className='form-label'>Indikator</label>\n                    </div>\n                </fieldset>\n              </form>\n            </div>\n        </Modal.Body>\n        \n      </Modal> */}\n      {/* <Offcanvas show={show} onHide={CompClose} placement=\"end\" name=\"end\">\n          <Offcanvas.Header closeButton className=\"row\">\n              <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">Title</small>\n              <Offcanvas.Title className=\"sm-12\">\n                  {nodeData.title_goals}\n              </Offcanvas.Title>\n          </Offcanvas.Header>\n          <Offcanvas.Body style={{background:\"var(--background-navcolor-dark)\"}}>\n              <Card className=\"mb-3\" body style={{background:\"rgba(255,255,255,.05) !important\"}}>\n                  <Card.Header className=\"pt-0 pb-1\">\n                      <div className=\"row mt-0 mb-0 d-flex align-items-start justify-content-end justify-content-lg-start\">\n                          <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">PIC</small>\n                          <span className=\"col-md col-6 sm-6\"> </span>\n                          <span className=\"col-md col-6 sm-6\">{nodeData.pic_goals}</span>\n                      </div>\n                  </Card.Header>\n                  <Card.Body>\n                      <div className=\"row mt-0 mb-0\">\n                          <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">Description</small>\n                          <span className=\"sm-12\"><Card.Text>{nodeData.desc_goals}</Card.Text></span>\n                      </div>\n                  </Card.Body>\n                  <Card.Body>\n                      <div className=\"row mt-0 mb-0\">\n                          <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12\">Progress</small>\n                          <span className=\"sm-12\"><Card.Text>{nodeData.progress}</Card.Text></span>\n                      </div>\n                  </Card.Body>\n                  <Card.Footer className=\"pt-0 pb-1\">\n                      <div className=\"row mt-0 mb-0\">\n                          <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12 col-md col-6\">Start Date</small>\n                          <span className=\"col-md col-6 sm-12\"><Card.Text>{nodeData.start_date}</Card.Text></span>\n                      </div>\n                      <div className=\"row mt-0 mb-0\">\n                          <small id=\"passwordHelpBlock\" className=\"form-text text-muted sm-12 col-md col-6\">End Date</small>\n                          <span className=\"col-md col-6 sm-12\"><Card.Text>{nodeData.due_date}</Card.Text></span>\n                      </div>\n                  </Card.Footer>\n              </Card>\n          </Offcanvas.Body>\n      </Offcanvas> */}\n\n    </div>\n       \n  );\n};\n\n\nMyNode.propTypes = propTypes;\n\nexport default MyNode;","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/org-chart/ChartContainer.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/cs-line-icons/svgs.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/select/SelectServerSide.js",["558"],"import React from \"react\";\nimport { components } from \"react-select\";\n\nimport AsyncSelect from \"react-select/async\";\n\nconst SelectServerSide = ({ loadOptions, ...otherProps }) => {\n  const formatOptionLabel = ({ title_goals }) => (\n    <div>\n      <div className=\"clearfix\" />\n      <div>{title_goals}</div>\n    </div>\n  );\n\n  return (\n    <AsyncSelect\n      cacheOptions={false}\n      defaultOptions\n      classNamePrefix=\"react-select\"\n      loadOptions={loadOptions}\n      formatOptionLabel={formatOptionLabel}\n      // components={{ }}\n      {...otherProps}\n    />\n  );\n};\n\nexport default SelectServerSide;\n","/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useLayout.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/Nav.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/footer/Footer.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/sidebar-menu/SidebarMenu.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/select/SelectMultiple.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/org-chart/ChartNode.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/org-chart/service.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useModalPaddingFix.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/NavMobileButtons.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/NavLogo.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/MainMenu.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/NavUserMenu.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/sidebar-menu/SidebarMenuItems.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useMutationObservable.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/helper.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/layout/nav/main-menu/MainMenuItems.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/scrollspy/ScrollspyMobile.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/useWindowScroll.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/components/scrollspy/ScrollspyContent.js",[],"/Users/admin/Documents/ProjectReact/goals_planner_fe/src/hooks/usePrevious.js",[],{"ruleId":"559","replacedBy":"560"},{"ruleId":"561","replacedBy":"562"},{"ruleId":"563","severity":1,"message":"564","line":11,"column":13,"nodeType":"565","messageId":"566","endLine":11,"endColumn":24},{"ruleId":"563","severity":1,"message":"567","line":11,"column":26,"nodeType":"565","messageId":"566","endLine":11,"endColumn":33},{"ruleId":"563","severity":1,"message":"567","line":70,"column":24,"nodeType":"565","messageId":"566","endLine":70,"endColumn":31},{"ruleId":"568","severity":1,"message":"569","line":149,"column":29,"nodeType":"570","messageId":"571","endLine":149,"endColumn":31},{"ruleId":"568","severity":1,"message":"572","line":158,"column":15,"nodeType":"570","messageId":"571","endLine":158,"endColumn":17},{"ruleId":"568","severity":1,"message":"569","line":164,"column":29,"nodeType":"570","messageId":"571","endLine":164,"endColumn":31},{"ruleId":"573","severity":1,"message":"574","line":173,"column":6,"nodeType":"575","endLine":173,"endColumn":8,"suggestions":"576"},{"ruleId":"563","severity":1,"message":"577","line":206,"column":47,"nodeType":"565","messageId":"566","endLine":206,"endColumn":54},{"ruleId":"563","severity":1,"message":"578","line":206,"column":56,"nodeType":"565","messageId":"566","endLine":206,"endColumn":62},{"ruleId":"563","severity":1,"message":"579","line":17,"column":12,"nodeType":"565","messageId":"566","endLine":17,"endColumn":18},{"ruleId":"563","severity":1,"message":"580","line":17,"column":20,"nodeType":"565","messageId":"566","endLine":17,"endColumn":29},{"ruleId":"563","severity":1,"message":"581","line":17,"column":54,"nodeType":"565","messageId":"566","endLine":17,"endColumn":66},{"ruleId":"568","severity":1,"message":"572","line":45,"column":89,"nodeType":"570","messageId":"571","endLine":45,"endColumn":91},{"ruleId":"563","severity":1,"message":"567","line":68,"column":26,"nodeType":"565","messageId":"566","endLine":68,"endColumn":33},{"ruleId":"568","severity":1,"message":"572","line":113,"column":17,"nodeType":"570","messageId":"571","endLine":113,"endColumn":19},{"ruleId":"568","severity":1,"message":"569","line":176,"column":31,"nodeType":"570","messageId":"571","endLine":176,"endColumn":33},{"ruleId":"568","severity":1,"message":"572","line":185,"column":17,"nodeType":"570","messageId":"571","endLine":185,"endColumn":19},{"ruleId":"568","severity":1,"message":"569","line":191,"column":31,"nodeType":"570","messageId":"571","endLine":191,"endColumn":33},{"ruleId":"563","severity":1,"message":"577","line":203,"column":49,"nodeType":"565","messageId":"566","endLine":203,"endColumn":56},{"ruleId":"563","severity":1,"message":"578","line":203,"column":58,"nodeType":"565","messageId":"566","endLine":203,"endColumn":64},{"ruleId":"573","severity":1,"message":"582","line":207,"column":8,"nodeType":"575","endLine":207,"endColumn":10,"suggestions":"583"},{"ruleId":"563","severity":1,"message":"584","line":3,"column":40,"nodeType":"565","messageId":"566","endLine":3,"endColumn":50},{"ruleId":"563","severity":1,"message":"585","line":3,"column":52,"nodeType":"565","messageId":"566","endLine":3,"endColumn":60},{"ruleId":"563","severity":1,"message":"586","line":8,"column":21,"nodeType":"565","messageId":"566","endLine":8,"endColumn":27},{"ruleId":"563","severity":1,"message":"587","line":8,"column":29,"nodeType":"565","messageId":"566","endLine":8,"endColumn":34},{"ruleId":"563","severity":1,"message":"588","line":19,"column":10,"nodeType":"565","messageId":"566","endLine":19,"endColumn":16},{"ruleId":"563","severity":1,"message":"567","line":37,"column":26,"nodeType":"565","messageId":"566","endLine":37,"endColumn":33},{"ruleId":"563","severity":1,"message":"589","line":50,"column":21,"nodeType":"565","messageId":"566","endLine":50,"endColumn":31},{"ruleId":"563","severity":1,"message":"590","line":55,"column":13,"nodeType":"565","messageId":"566","endLine":55,"endColumn":19},{"ruleId":"563","severity":1,"message":"590","line":96,"column":13,"nodeType":"565","messageId":"566","endLine":96,"endColumn":19},{"ruleId":"563","severity":1,"message":"591","line":141,"column":15,"nodeType":"565","messageId":"566","endLine":141,"endColumn":23},{"ruleId":"573","severity":1,"message":"592","line":145,"column":8,"nodeType":"575","endLine":145,"endColumn":10,"suggestions":"593"},{"ruleId":"563","severity":1,"message":"591","line":210,"column":15,"nodeType":"565","messageId":"566","endLine":210,"endColumn":23},{"ruleId":"563","severity":1,"message":"584","line":3,"column":40,"nodeType":"565","messageId":"566","endLine":3,"endColumn":50},{"ruleId":"563","severity":1,"message":"585","line":3,"column":52,"nodeType":"565","messageId":"566","endLine":3,"endColumn":60},{"ruleId":"563","severity":1,"message":"594","line":5,"column":8,"nodeType":"565","messageId":"566","endLine":5,"endColumn":19},{"ruleId":"563","severity":1,"message":"586","line":9,"column":21,"nodeType":"565","messageId":"566","endLine":9,"endColumn":27},{"ruleId":"563","severity":1,"message":"587","line":9,"column":29,"nodeType":"565","messageId":"566","endLine":9,"endColumn":34},{"ruleId":"563","severity":1,"message":"588","line":19,"column":10,"nodeType":"565","messageId":"566","endLine":19,"endColumn":16},{"ruleId":"563","severity":1,"message":"595","line":25,"column":11,"nodeType":"565","messageId":"566","endLine":25,"endColumn":15},{"ruleId":"563","severity":1,"message":"567","line":36,"column":26,"nodeType":"565","messageId":"566","endLine":36,"endColumn":33},{"ruleId":"573","severity":1,"message":"596","line":121,"column":8,"nodeType":"575","endLine":121,"endColumn":10,"suggestions":"597"},{"ruleId":"563","severity":1,"message":"584","line":3,"column":40,"nodeType":"565","messageId":"566","endLine":3,"endColumn":50},{"ruleId":"563","severity":1,"message":"585","line":3,"column":52,"nodeType":"565","messageId":"566","endLine":3,"endColumn":60},{"ruleId":"563","severity":1,"message":"594","line":5,"column":8,"nodeType":"565","messageId":"566","endLine":5,"endColumn":19},{"ruleId":"563","severity":1,"message":"586","line":9,"column":21,"nodeType":"565","messageId":"566","endLine":9,"endColumn":27},{"ruleId":"563","severity":1,"message":"587","line":9,"column":29,"nodeType":"565","messageId":"566","endLine":9,"endColumn":34},{"ruleId":"563","severity":1,"message":"588","line":19,"column":10,"nodeType":"565","messageId":"566","endLine":19,"endColumn":16},{"ruleId":"563","severity":1,"message":"567","line":37,"column":26,"nodeType":"565","messageId":"566","endLine":37,"endColumn":33},{"ruleId":"573","severity":1,"message":"598","line":124,"column":8,"nodeType":"575","endLine":124,"endColumn":10,"suggestions":"599"},{"ruleId":"563","severity":1,"message":"584","line":3,"column":40,"nodeType":"565","messageId":"566","endLine":3,"endColumn":50},{"ruleId":"563","severity":1,"message":"585","line":3,"column":52,"nodeType":"565","messageId":"566","endLine":3,"endColumn":60},{"ruleId":"563","severity":1,"message":"586","line":8,"column":21,"nodeType":"565","messageId":"566","endLine":8,"endColumn":27},{"ruleId":"563","severity":1,"message":"587","line":8,"column":29,"nodeType":"565","messageId":"566","endLine":8,"endColumn":34},{"ruleId":"563","severity":1,"message":"588","line":19,"column":10,"nodeType":"565","messageId":"566","endLine":19,"endColumn":16},{"ruleId":"563","severity":1,"message":"567","line":37,"column":26,"nodeType":"565","messageId":"566","endLine":37,"endColumn":33},{"ruleId":"563","severity":1,"message":"600","line":38,"column":11,"nodeType":"565","messageId":"566","endLine":38,"endColumn":18},{"ruleId":"563","severity":1,"message":"601","line":39,"column":11,"nodeType":"565","messageId":"566","endLine":39,"endColumn":20},{"ruleId":"563","severity":1,"message":"602","line":44,"column":12,"nodeType":"565","messageId":"566","endLine":44,"endColumn":15},{"ruleId":"563","severity":1,"message":"603","line":44,"column":17,"nodeType":"565","messageId":"566","endLine":44,"endColumn":23},{"ruleId":"563","severity":1,"message":"604","line":45,"column":12,"nodeType":"565","messageId":"566","endLine":45,"endColumn":23},{"ruleId":"563","severity":1,"message":"605","line":45,"column":25,"nodeType":"565","messageId":"566","endLine":45,"endColumn":39},{"ruleId":"563","severity":1,"message":"606","line":47,"column":12,"nodeType":"565","messageId":"566","endLine":47,"endColumn":24},{"ruleId":"563","severity":1,"message":"607","line":48,"column":12,"nodeType":"565","messageId":"566","endLine":48,"endColumn":18},{"ruleId":"563","severity":1,"message":"608","line":58,"column":12,"nodeType":"565","messageId":"566","endLine":58,"endColumn":20},{"ruleId":"563","severity":1,"message":"609","line":58,"column":22,"nodeType":"565","messageId":"566","endLine":58,"endColumn":33},{"ruleId":"563","severity":1,"message":"590","line":90,"column":13,"nodeType":"565","messageId":"566","endLine":90,"endColumn":19},{"ruleId":"573","severity":1,"message":"610","line":183,"column":8,"nodeType":"575","endLine":183,"endColumn":10,"suggestions":"611"},{"ruleId":"563","severity":1,"message":"584","line":3,"column":40,"nodeType":"565","messageId":"566","endLine":3,"endColumn":50},{"ruleId":"563","severity":1,"message":"585","line":3,"column":52,"nodeType":"565","messageId":"566","endLine":3,"endColumn":60},{"ruleId":"563","severity":1,"message":"594","line":5,"column":8,"nodeType":"565","messageId":"566","endLine":5,"endColumn":19},{"ruleId":"563","severity":1,"message":"586","line":9,"column":21,"nodeType":"565","messageId":"566","endLine":9,"endColumn":27},{"ruleId":"563","severity":1,"message":"587","line":9,"column":29,"nodeType":"565","messageId":"566","endLine":9,"endColumn":34},{"ruleId":"563","severity":1,"message":"612","line":18,"column":57,"nodeType":"565","messageId":"566","endLine":18,"endColumn":71},{"ruleId":"563","severity":1,"message":"588","line":20,"column":10,"nodeType":"565","messageId":"566","endLine":20,"endColumn":16},{"ruleId":"563","severity":1,"message":"613","line":23,"column":7,"nodeType":"565","messageId":"566","endLine":23,"endColumn":13},{"ruleId":"563","severity":1,"message":"614","line":24,"column":12,"nodeType":"565","messageId":"566","endLine":24,"endColumn":17},{"ruleId":"563","severity":1,"message":"615","line":24,"column":19,"nodeType":"565","messageId":"566","endLine":24,"endColumn":27},{"ruleId":"563","severity":1,"message":"567","line":63,"column":26,"nodeType":"565","messageId":"566","endLine":63,"endColumn":33},{"ruleId":"563","severity":1,"message":"600","line":64,"column":11,"nodeType":"565","messageId":"566","endLine":64,"endColumn":18},{"ruleId":"563","severity":1,"message":"601","line":65,"column":11,"nodeType":"565","messageId":"566","endLine":65,"endColumn":20},{"ruleId":"563","severity":1,"message":"602","line":70,"column":12,"nodeType":"565","messageId":"566","endLine":70,"endColumn":15},{"ruleId":"563","severity":1,"message":"603","line":70,"column":17,"nodeType":"565","messageId":"566","endLine":70,"endColumn":23},{"ruleId":"563","severity":1,"message":"604","line":71,"column":12,"nodeType":"565","messageId":"566","endLine":71,"endColumn":23},{"ruleId":"563","severity":1,"message":"605","line":71,"column":25,"nodeType":"565","messageId":"566","endLine":71,"endColumn":39},{"ruleId":"563","severity":1,"message":"606","line":73,"column":12,"nodeType":"565","messageId":"566","endLine":73,"endColumn":24},{"ruleId":"563","severity":1,"message":"607","line":74,"column":12,"nodeType":"565","messageId":"566","endLine":74,"endColumn":18},{"ruleId":"563","severity":1,"message":"616","line":86,"column":11,"nodeType":"565","messageId":"566","endLine":86,"endColumn":31},{"ruleId":"563","severity":1,"message":"617","line":99,"column":11,"nodeType":"565","messageId":"566","endLine":99,"endColumn":22},{"ruleId":"563","severity":1,"message":"618","line":106,"column":11,"nodeType":"565","messageId":"566","endLine":106,"endColumn":21},{"ruleId":"563","severity":1,"message":"590","line":142,"column":13,"nodeType":"565","messageId":"566","endLine":142,"endColumn":19},{"ruleId":"573","severity":1,"message":"610","line":235,"column":8,"nodeType":"575","endLine":235,"endColumn":10,"suggestions":"619"},{"ruleId":"563","severity":1,"message":"620","line":15,"column":10,"nodeType":"565","messageId":"566","endLine":15,"endColumn":21},{"ruleId":"563","severity":1,"message":"621","line":15,"column":23,"nodeType":"565","messageId":"566","endLine":15,"endColumn":32},{"ruleId":"563","severity":1,"message":"622","line":19,"column":12,"nodeType":"565","messageId":"566","endLine":19,"endColumn":21},{"ruleId":"563","severity":1,"message":"579","line":19,"column":23,"nodeType":"565","messageId":"566","endLine":19,"endColumn":29},{"ruleId":"563","severity":1,"message":"623","line":19,"column":77,"nodeType":"565","messageId":"566","endLine":19,"endColumn":85},{"ruleId":"563","severity":1,"message":"624","line":19,"column":95,"nodeType":"565","messageId":"566","endLine":19,"endColumn":109},{"ruleId":"568","severity":1,"message":"572","line":60,"column":89,"nodeType":"570","messageId":"571","endLine":60,"endColumn":91},{"ruleId":"563","severity":1,"message":"567","line":93,"column":26,"nodeType":"565","messageId":"566","endLine":93,"endColumn":33},{"ruleId":"568","severity":1,"message":"572","line":142,"column":19,"nodeType":"570","messageId":"571","endLine":142,"endColumn":21},{"ruleId":"568","severity":1,"message":"569","line":212,"column":31,"nodeType":"570","messageId":"571","endLine":212,"endColumn":33},{"ruleId":"568","severity":1,"message":"572","line":221,"column":17,"nodeType":"570","messageId":"571","endLine":221,"endColumn":19},{"ruleId":"568","severity":1,"message":"569","line":227,"column":31,"nodeType":"570","messageId":"571","endLine":227,"endColumn":33},{"ruleId":"563","severity":1,"message":"577","line":239,"column":49,"nodeType":"565","messageId":"566","endLine":239,"endColumn":56},{"ruleId":"563","severity":1,"message":"578","line":239,"column":58,"nodeType":"565","messageId":"566","endLine":239,"endColumn":64},{"ruleId":"573","severity":1,"message":"625","line":243,"column":8,"nodeType":"575","endLine":243,"endColumn":10,"suggestions":"626"},{"ruleId":"563","severity":1,"message":"567","line":16,"column":11,"nodeType":"565","messageId":"566","endLine":16,"endColumn":18},{"ruleId":"563","severity":1,"message":"564","line":16,"column":20,"nodeType":"565","messageId":"566","endLine":16,"endColumn":31},{"ruleId":"563","severity":1,"message":"567","line":35,"column":24,"nodeType":"565","messageId":"566","endLine":35,"endColumn":31},{"ruleId":"563","severity":1,"message":"627","line":112,"column":11,"nodeType":"565","messageId":"566","endLine":112,"endColumn":23},{"ruleId":"563","severity":1,"message":"628","line":202,"column":9,"nodeType":"565","messageId":"566","endLine":202,"endColumn":26},{"ruleId":"563","severity":1,"message":"567","line":57,"column":24,"nodeType":"565","messageId":"566","endLine":57,"endColumn":31},{"ruleId":"563","severity":1,"message":"629","line":21,"column":10,"nodeType":"565","messageId":"566","endLine":21,"endColumn":23},{"ruleId":"563","severity":1,"message":"630","line":74,"column":9,"nodeType":"565","messageId":"566","endLine":74,"endColumn":12},{"ruleId":"563","severity":1,"message":"567","line":75,"column":24,"nodeType":"565","messageId":"566","endLine":75,"endColumn":31},{"ruleId":"563","severity":1,"message":"631","line":14,"column":8,"nodeType":"565","messageId":"566","endLine":14,"endColumn":22},{"ruleId":"568","severity":1,"message":"569","line":24,"column":40,"nodeType":"570","messageId":"571","endLine":24,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":103,"column":40,"nodeType":"570","messageId":"571","endLine":103,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":107,"column":48,"nodeType":"570","messageId":"571","endLine":107,"endColumn":50},{"ruleId":"568","severity":1,"message":"569","line":190,"column":40,"nodeType":"570","messageId":"571","endLine":190,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":194,"column":48,"nodeType":"570","messageId":"571","endLine":194,"endColumn":50},{"ruleId":"568","severity":1,"message":"569","line":277,"column":40,"nodeType":"570","messageId":"571","endLine":277,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":358,"column":40,"nodeType":"570","messageId":"571","endLine":358,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":439,"column":40,"nodeType":"570","messageId":"571","endLine":439,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":25,"column":40,"nodeType":"570","messageId":"571","endLine":25,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":103,"column":40,"nodeType":"570","messageId":"571","endLine":103,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":184,"column":40,"nodeType":"570","messageId":"571","endLine":184,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":266,"column":40,"nodeType":"570","messageId":"571","endLine":266,"endColumn":42},{"ruleId":"563","severity":1,"message":"632","line":11,"column":10,"nodeType":"565","messageId":"566","endLine":11,"endColumn":12},{"ruleId":"563","severity":1,"message":"633","line":12,"column":5,"nodeType":"565","messageId":"566","endLine":12,"endColumn":30},{"ruleId":"563","severity":1,"message":"634","line":13,"column":5,"nodeType":"565","messageId":"566","endLine":13,"endColumn":26},{"ruleId":"568","severity":1,"message":"569","line":24,"column":40,"nodeType":"570","messageId":"571","endLine":24,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":103,"column":40,"nodeType":"570","messageId":"571","endLine":103,"endColumn":42},{"ruleId":"568","severity":1,"message":"569","line":261,"column":40,"nodeType":"570","messageId":"571","endLine":261,"endColumn":42},{"ruleId":"563","severity":1,"message":"635","line":101,"column":9,"nodeType":"565","messageId":"566","endLine":101,"endColumn":13},{"ruleId":"563","severity":1,"message":"636","line":2,"column":10,"nodeType":"565","messageId":"566","endLine":2,"endColumn":20},"no-native-reassign",["637"],"no-negated-in-lhs",["638"],"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","'isLogin' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAllUsers' and 'page'. Either include them or remove the dependency array.","ArrayExpression",["639"],"'touched' is assigned a value but never used.","'errors' is assigned a value but never used.","'idarea' is assigned a value but never used.","'idsubarea' is assigned a value but never used.","'idparentarea' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllAreas' and 'page'. Either include them or remove the dependency array.",["640"],"'InputGroup' is defined but never used.","'Dropdown' is defined but never used.","'Formik' is defined but never used.","'Field' is defined but never used.","'LAYOUT' is defined but never used.","'setOptRole' is assigned a value but never used.","'result' is assigned a value but never used.","'descarea' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllArea', 'getSubArea', 'user.desc_area', 'user.desc_sub_area', 'user.id_area', and 'user.id_sub_area'. Either include them or remove the dependency array.",["641"],"'Autosuggest' is defined but never used.","'area' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchParentArea'. Either include it or remove the dependency array.",["642"],"React Hook useEffect has a missing dependency: 'fetchArea'. Either include it or remove the dependency array.",["643"],"'id_area' is assigned a value but never used.","'desc_area' is assigned a value but never used.","'opt' is assigned a value but never used.","'setOpt' is assigned a value but never used.","'valueParent' is assigned a value but never used.","'setValueParent' is assigned a value but never used.","'valueSubArea' is assigned a value but never used.","'optSub' is assigned a value but never used.","'rowState' is assigned a value but never used.","'setRowState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.desc_sub_area', 'currentUser.id_area', 'currentUser.id_sub_area', 'fetchParentArea', and 'getSubArea'. Either include them or remove the dependency array.",["644"],"'AddAreaService' is defined but never used.","'RowInd' is assigned a value but never used.","'value' is assigned a value but never used.","'onChange' is assigned a value but never used.","'handleClickAddButton' is assigned a value but never used.","'updateValue' is assigned a value but never used.","'deleteRows' is assigned a value but never used.",["645"],"'GetAllAreas' is defined but never used.","'FindAreas' is defined but never used.","'idcluster' is assigned a value but never used.","'subareas' is assigned a value but never used.","'onClickSubArea' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllCluster' and 'page'. Either include them or remove the dependency array.",["646"],"'objectString' is assigned a value but never used.","'handleClickButton' is assigned a value but never used.","'useWindowSize' is defined but never used.","'ref' is assigned a value but never used.","'ControlsSearch' is defined but never used.","'el' is defined but never used.","'toggleAllPageRowsSelected' is assigned a value but never used.","'setIsOpenAddEditModal' is assigned a value but never used.","'show' is assigned a value but never used.","'components' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"647","fix":"648"},{"desc":"649","fix":"650"},{"desc":"651","fix":"652"},{"desc":"653","fix":"654"},{"desc":"655","fix":"656"},{"desc":"657","fix":"658"},{"desc":"657","fix":"659"},{"desc":"660","fix":"661"},"Update the dependencies array to be: [getAllUsers, page]",{"range":"662","text":"663"},"Update the dependencies array to be: [getAllAreas, page]",{"range":"664","text":"665"},"Update the dependencies array to be: [getAllArea, getSubArea, user.desc_area, user.desc_sub_area, user.id_area, user.id_sub_area]",{"range":"666","text":"667"},"Update the dependencies array to be: [fetchParentArea]",{"range":"668","text":"669"},"Update the dependencies array to be: [fetchArea]",{"range":"670","text":"671"},"Update the dependencies array to be: [currentUser.desc_sub_area, currentUser.id_area, currentUser.id_sub_area, fetchParentArea, getSubArea]",{"range":"672","text":"673"},{"range":"674","text":"673"},"Update the dependencies array to be: [getAllCluster, page]",{"range":"675","text":"676"},[6685,6687],"[getAllUsers, page]",[8090,8092],"[getAllAreas, page]",[5547,5549],"[getAllArea, getSubArea, user.desc_area, user.desc_sub_area, user.id_area, user.id_sub_area]",[4610,4612],"[fetchParentArea]",[4637,4639],"[fetchArea]",[6959,6961],"[currentUser.desc_sub_area, currentUser.id_area, currentUser.id_sub_area, fetchParentArea, getSubArea]",[9122,9124],[10259,10261],"[getAllCluster, page]"]